global job_caller
global job_start
global runtimes
global runtime_by_caller

// This script measures the runtime of jobs executed. After cancelling the execution of this
// script a detailed summary of jobs ran will be printed to the console as a histogram. It provides the same
// functionality as `job_start_end.d`.
// NOTE: the job_start probe needs some time to retrieve the job's callers. If there are many short running ones
//       it might lead to a crash of this script, since the event handling overhead is too high (it always has to
//       look on the stack). You can simply comment it outif you want. Of course, you will lose the information
//       about the job caller.

probe begin
{
    printf("Probing binary %s\n", @1)
}

// Job started event
probe process(@1).provider("HYRISE").mark("JOB_START")
{
    /*
      arg1: _id (int)
      arg2: _description  (string)
      arg3: this  (long, needed as identifier)
    */

    job_start[$arg3] = gettimeofday_us()
    
    // Get first 3 elements of call stack
    callers = ucallers(2)
    str_tok = tokenize(callers, " ")
    // Need to run 3 times, since caller is third element in stack trace
    str_tok = tokenize("", " ")
    str_tok = tokenize("", " ")
    // Fetch symbol from casted address
    caller = usymname(strtol(str_tok, 16))
    job_caller[$arg3] = caller

    description = user_string($arg2)
    printf("Starting job with id %i\n"
           "\tCalled by %s\n"
           "\tRunning on cpu %i\n"
           "\tDescription: \"%s\"\n", $arg1, caller, cpu(), description)
}

// Job finished event
probe process(@1).provider("HYRISE").mark("JOB_END")
{
    /*
      arg1: _id (int) 
      arg2: this  (long, needed as identifier)
    */

    end = gettimeofday_us()
    start_time = job_start[$arg2]
    if (start_time != NULL) {
        runtimes <<< end - start_time
        runtime_by_caller[job_caller[$arg2]] <<< end - start_time
    }
    printf("Job with id %i finished within %i μs\n", $arg1, end - job_start[$arg2]);
    delete job_start[$arg2]
    delete job_caller[$arg2]
}

// Print summary after run
probe end
{
    // Print histogram for every job caller
    foreach (caller in runtime_by_caller) {
        printf("\nJobs scheduled by: %s\n", caller)
        println("NOTE: value = time in μs")
        print(@hist_log(runtime_by_caller[caller]))
    }
    println("\nOverall summary:\n")
    println("NOTE: value = time in μs")
    print(@hist_log(runtimes))
}
