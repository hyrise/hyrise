#pragma once

#include <memory>
#include <vector>

#include "all_parameter_variant.hpp"
#include "operators/abstract_operator.hpp"
#include "scheduler/operator_task.hpp"

namespace opossum {

// Query plan that is generated by the SQLQueryTranslator.
class SQLQueryPlan {
 public:
  SQLQueryPlan();

  // Adds a new empty operator tree.
  // All subsequent calls to set_root will update that operator tree.
  void add_tree();

  // Sets the root node of the last operator tree in the plan.
  void set_root(std::shared_ptr<AbstractOperator> op);

  // Returns the root node of the last operator tree in the plan.
  const std::shared_ptr<AbstractOperator>& root() const;

  // Returns the number of trees in the plan.
  size_t num_trees() const;

  // Returns the number of operators in all trees in the plan.
  size_t num_operators() const;

  // Append all operator trees from the other plan.
  void append_plan(const SQLQueryPlan& other_plan);

  // Remove all trees from the current plan.
  void clear();

  // Wrap all operator trees in tasks and return them.
  std::vector<std::shared_ptr<OperatorTask>> tasks() const;

  // Returns the root nodes of all operator trees in the plan.
  const std::vector<std::shared_ptr<AbstractOperator>>& roots() const;

  // Recreates the query plan with a new and equivalent set of operator trees.
  // The given list of arguments is passed to the recreate method of all operators to replace ValuePlaceholders.
  SQLQueryPlan recreate(const std::vector<AllParameterVariant>& arguments = {}) const;

  // Set the number of parameters that this query plan contains.
  void set_num_parameters(uint16_t num_parameters);

  // Get the number of parameters that this query plan contains.
  uint16_t num_parameters() const;

 protected:
  // Root nodes of all operator trees that this plan contains.
  std::vector<std::shared_ptr<AbstractOperator>> _roots;

  // Number of PlaceholderValues within the plan's operators.
  uint16_t _num_parameters;
};

}  // namespace opossum
