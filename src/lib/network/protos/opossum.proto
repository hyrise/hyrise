syntax = "proto3";

package opossum.proto;

// gRPC service definition
service OpossumService {
  rpc Query (Request) returns (Response) {}
}

enum ScanType {
  OpEquals = 0;
  OpNotEquals = 1;
  OpLessThan = 2;
  OpLessThanEquals = 3;
  OpGreaterThan = 4;
  OpGreaterThanEquals = 5;
  OpBetween = 6;
  OpLike = 7;
}

// AllTypeVariant "union"
message Variant {
  oneof variant {
    int32 value_int = 1;
    float value_float = 2;
    string value_string = 3;
    double value_double = 4;
    int64 value_long = 5;
  };
}


// Request and Operators

message Request {
  OperatorVariant root_operator = 1;
}

// Add new operators to this "union"
message OperatorVariant {
  oneof operator {
    GetTableOperator get_table = 1;
    ProjectionOperator projection = 2;
    TableScanOperator table_scan = 3;
    ProductOperator product = 4;
    SortOperator sort = 5;
    UnionAllOperator union_all = 6;
    ImportCsvOperator import_csv = 7;
    PrintOperator print = 8;
    DifferenceOperator difference = 9;
    ExportCsvOperator export_csv = 10;
    ExportBinaryOperator export_binary = 11;
    IndexColumnScanOperator index_column_scan = 12;
    NestedLoopJoinOperator nested_loop_join = 13;
  }
}

// Has to be a message so that we can check if it is set or not (not supported on int32 in proto3).
// https://developers.google.com/protocol-buffers/docs/proto3#default
message OptionalColumnID {
  int32 value = 1;
}

message GetTableOperator {
  string table_name = 1;
}

message ProjectionOperator {
  OperatorVariant input_operator = 1;
  repeated int32 column_id = 2;
}

message TableScanOperator {
  OperatorVariant input_operator = 1;
  int32 column_id = 2;
  ScanType filter_operator = 3;
  Variant value = 4;
  Variant value2 = 5; // not explicitly specified as optional as everything is optional
}

message IndexColumnScanOperator {
  OperatorVariant input_operator = 1;
  int32 column_id = 2;
  ScanType filter_operator = 3;
  Variant value = 4;
  Variant value2 = 5; // not explicitly specified as optional as everything is optional
}

message NestedLoopJoinOperator {
  OperatorVariant left_operator = 1;
  OperatorVariant right_operator = 2;
  OptionalColumnID left_column_id = 3;
  OptionalColumnID right_column_id = 4;
  ScanType op = 5;
  enum JoinMode {
    Inner = 0;
    Left = 1;
    Right = 2;
    Outer = 3;
    Cross = 4;
    Natural = 5;
    Self = 6;
  }
  JoinMode mode = 6;
}

message ProductOperator { // 2 inputs
  OperatorVariant left_operator = 1;
  OperatorVariant right_operator = 2;
}

message SortOperator {
  OperatorVariant input_operator = 1;
  int32 column_id = 2;
  enum OrderByMode {
    Ascending = 0;
    Descending = 1;
  }
  OrderByMode order_by_mode = 3;
  int32 output_chunk_size = 4;
}

message UnionAllOperator { // 2 inputs
  OperatorVariant input_operator1 = 1;
  OperatorVariant input_operator2 = 2;
}

message ImportCsvOperator {
  OperatorVariant input_operator = 1;
  string directory = 2;
  string filename = 3;
}

message ExportCsvOperator {
  OperatorVariant input_operator = 1;
  string directory = 2;
  string filename = 3;
}

message ExportBinaryOperator {
  OperatorVariant input_operator = 1;
  string filename = 3;
}

message PrintOperator {
  OperatorVariant input_operator = 1;
}

message DifferenceOperator {
  OperatorVariant left_operator = 1;
  OperatorVariant right_operator = 2;
}


// Response

message Response {
  oneof result {
    Table response_table = 1;
    string error = 2;
  }
}

message Table {
  repeated string column_type = 1;
  repeated string column_name = 2;
  repeated Row row = 3;
}

message Row {
  repeated Variant value = 1;
}
