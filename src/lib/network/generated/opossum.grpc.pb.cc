// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: opossum.proto

#include "opossum.pb.h"
#include "opossum.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace opossum {
namespace proto {

static const char* OpossumService_method_names[] = {
  "/opossum.proto.OpossumService/Query",
};

std::unique_ptr< OpossumService::Stub> OpossumService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< OpossumService::Stub> stub(new OpossumService::Stub(channel));
  return stub;
}

OpossumService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Query_(OpossumService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OpossumService::Stub::Query(::grpc::ClientContext* context, const ::opossum::proto::Request& request, ::opossum::proto::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::opossum::proto::Response>* OpossumService::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::opossum::proto::Request& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::opossum::proto::Response>(channel_.get(), cq, rpcmethod_Query_, context, request);
}

OpossumService::Service::Service() {
  (void)OpossumService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      OpossumService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< OpossumService::Service, ::opossum::proto::Request, ::opossum::proto::Response>(
          std::mem_fn(&OpossumService::Service::Query), this)));
}

OpossumService::Service::~Service() {
}

::grpc::Status OpossumService::Service::Query(::grpc::ServerContext* context, const ::opossum::proto::Request* request, ::opossum::proto::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opossum
}  // namespace proto

