// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opossum.proto

#ifndef PROTOBUF_opossum_2eproto__INCLUDED
#define PROTOBUF_opossum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace opossum {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_opossum_2eproto();
void protobuf_AssignDesc_opossum_2eproto();
void protobuf_ShutdownFile_opossum_2eproto();

class DifferenceOperator;
class ExportBinaryOperator;
class ExportCsvOperator;
class GetTableOperator;
class ImportCsvOperator;
class IndexColumnScanOperator;
class NestedLoopJoinOperator;
class OperatorVariant;
class OptionalColumnID;
class PrintOperator;
class ProductOperator;
class ProjectionOperator;
class Request;
class Response;
class Row;
class SortOperator;
class Table;
class TableScanOperator;
class UnionAllOperator;
class Variant;

enum NestedLoopJoinOperator_JoinMode {
  NestedLoopJoinOperator_JoinMode_Inner = 0,
  NestedLoopJoinOperator_JoinMode_Left = 1,
  NestedLoopJoinOperator_JoinMode_Right = 2,
  NestedLoopJoinOperator_JoinMode_Outer = 3,
  NestedLoopJoinOperator_JoinMode_Cross = 4,
  NestedLoopJoinOperator_JoinMode_Natural = 5,
  NestedLoopJoinOperator_JoinMode_Self = 6,
  NestedLoopJoinOperator_JoinMode_NestedLoopJoinOperator_JoinMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NestedLoopJoinOperator_JoinMode_NestedLoopJoinOperator_JoinMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NestedLoopJoinOperator_JoinMode_IsValid(int value);
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator_JoinMode_JoinMode_MIN = NestedLoopJoinOperator_JoinMode_Inner;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator_JoinMode_JoinMode_MAX = NestedLoopJoinOperator_JoinMode_Self;
const int NestedLoopJoinOperator_JoinMode_JoinMode_ARRAYSIZE = NestedLoopJoinOperator_JoinMode_JoinMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* NestedLoopJoinOperator_JoinMode_descriptor();
inline const ::std::string& NestedLoopJoinOperator_JoinMode_Name(NestedLoopJoinOperator_JoinMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    NestedLoopJoinOperator_JoinMode_descriptor(), value);
}
inline bool NestedLoopJoinOperator_JoinMode_Parse(
    const ::std::string& name, NestedLoopJoinOperator_JoinMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NestedLoopJoinOperator_JoinMode>(
    NestedLoopJoinOperator_JoinMode_descriptor(), name, value);
}
enum SortOperator_OrderByMode {
  SortOperator_OrderByMode_Ascending = 0,
  SortOperator_OrderByMode_Descending = 1,
  SortOperator_OrderByMode_SortOperator_OrderByMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SortOperator_OrderByMode_SortOperator_OrderByMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SortOperator_OrderByMode_IsValid(int value);
const SortOperator_OrderByMode SortOperator_OrderByMode_OrderByMode_MIN = SortOperator_OrderByMode_Ascending;
const SortOperator_OrderByMode SortOperator_OrderByMode_OrderByMode_MAX = SortOperator_OrderByMode_Descending;
const int SortOperator_OrderByMode_OrderByMode_ARRAYSIZE = SortOperator_OrderByMode_OrderByMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SortOperator_OrderByMode_descriptor();
inline const ::std::string& SortOperator_OrderByMode_Name(SortOperator_OrderByMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SortOperator_OrderByMode_descriptor(), value);
}
inline bool SortOperator_OrderByMode_Parse(
    const ::std::string& name, SortOperator_OrderByMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SortOperator_OrderByMode>(
    SortOperator_OrderByMode_descriptor(), name, value);
}
enum ScanType {
  OpEquals = 0,
  OpNotEquals = 1,
  OpLessThan = 2,
  OpLessThanEquals = 3,
  OpGreaterThan = 4,
  OpGreaterThanEquals = 5,
  OpBetween = 6,
  OpLike = 7,
  ScanType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScanType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScanType_IsValid(int value);
const ScanType ScanType_MIN = OpEquals;
const ScanType ScanType_MAX = OpLike;
const int ScanType_ARRAYSIZE = ScanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScanType_descriptor();
inline const ::std::string& ScanType_Name(ScanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScanType_descriptor(), value);
}
inline bool ScanType_Parse(
    const ::std::string& name, ScanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScanType>(
    ScanType_descriptor(), name, value);
}
// ===================================================================

class Variant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.Variant) */ {
 public:
  Variant();
  virtual ~Variant();

  Variant(const Variant& from);

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Variant& default_instance();

  enum VariantCase {
    kValueInt = 1,
    kValueFloat = 2,
    kValueString = 3,
    kValueDouble = 4,
    kValueLong = 5,
    VARIANT_NOT_SET = 0,
  };

  void Swap(Variant* other);

  // implements Message ----------------------------------------------

  inline Variant* New() const { return New(NULL); }

  Variant* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Variant& from);
  void MergeFrom(const Variant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Variant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value_int = 1;
  private:
  bool has_value_int() const;
  public:
  void clear_value_int();
  static const int kValueIntFieldNumber = 1;
  ::google::protobuf::int32 value_int() const;
  void set_value_int(::google::protobuf::int32 value);

  // optional float value_float = 2;
  private:
  bool has_value_float() const;
  public:
  void clear_value_float();
  static const int kValueFloatFieldNumber = 2;
  float value_float() const;
  void set_value_float(float value);

  // optional string value_string = 3;
  private:
  bool has_value_string() const;
  public:
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  const ::std::string& value_string() const;
  void set_value_string(const ::std::string& value);
  void set_value_string(const char* value);
  void set_value_string(const char* value, size_t size);
  ::std::string* mutable_value_string();
  ::std::string* release_value_string();
  void set_allocated_value_string(::std::string* value_string);

  // optional double value_double = 4;
  private:
  bool has_value_double() const;
  public:
  void clear_value_double();
  static const int kValueDoubleFieldNumber = 4;
  double value_double() const;
  void set_value_double(double value);

  // optional int64 value_long = 5;
  private:
  bool has_value_long() const;
  public:
  void clear_value_long();
  static const int kValueLongFieldNumber = 5;
  ::google::protobuf::int64 value_long() const;
  void set_value_long(::google::protobuf::int64 value);

  VariantCase variant_case() const;
  // @@protoc_insertion_point(class_scope:opossum.proto.Variant)
 private:
  inline void set_has_value_int();
  inline void set_has_value_float();
  inline void set_has_value_string();
  inline void set_has_value_double();
  inline void set_has_value_long();

  inline bool has_variant() const;
  void clear_variant();
  inline void clear_has_variant();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union VariantUnion {
    VariantUnion() {}
    ::google::protobuf::int32 value_int_;
    float value_float_;
    ::google::protobuf::internal::ArenaStringPtr value_string_;
    double value_double_;
    ::google::protobuf::int64 value_long_;
  } variant_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static Variant* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant root_operator = 1;
  bool has_root_operator() const;
  void clear_root_operator();
  static const int kRootOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& root_operator() const;
  ::opossum::proto::OperatorVariant* mutable_root_operator();
  ::opossum::proto::OperatorVariant* release_root_operator();
  void set_allocated_root_operator(::opossum::proto::OperatorVariant* root_operator);

  // @@protoc_insertion_point(class_scope:opossum.proto.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* root_operator_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class OperatorVariant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.OperatorVariant) */ {
 public:
  OperatorVariant();
  virtual ~OperatorVariant();

  OperatorVariant(const OperatorVariant& from);

  inline OperatorVariant& operator=(const OperatorVariant& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorVariant& default_instance();

  enum OperatorCase {
    kGetTable = 1,
    kProjection = 2,
    kTableScan = 3,
    kProduct = 4,
    kSort = 5,
    kUnionAll = 6,
    kImportCsv = 7,
    kPrint = 8,
    kDifference = 9,
    kExportCsv = 10,
    kExportBinary = 11,
    kIndexColumnScan = 12,
    kNestedLoopJoin = 13,
    OPERATOR_NOT_SET = 0,
  };

  void Swap(OperatorVariant* other);

  // implements Message ----------------------------------------------

  inline OperatorVariant* New() const { return New(NULL); }

  OperatorVariant* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatorVariant& from);
  void MergeFrom(const OperatorVariant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OperatorVariant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.GetTableOperator get_table = 1;
  bool has_get_table() const;
  void clear_get_table();
  static const int kGetTableFieldNumber = 1;
  const ::opossum::proto::GetTableOperator& get_table() const;
  ::opossum::proto::GetTableOperator* mutable_get_table();
  ::opossum::proto::GetTableOperator* release_get_table();
  void set_allocated_get_table(::opossum::proto::GetTableOperator* get_table);

  // optional .opossum.proto.ProjectionOperator projection = 2;
  bool has_projection() const;
  void clear_projection();
  static const int kProjectionFieldNumber = 2;
  const ::opossum::proto::ProjectionOperator& projection() const;
  ::opossum::proto::ProjectionOperator* mutable_projection();
  ::opossum::proto::ProjectionOperator* release_projection();
  void set_allocated_projection(::opossum::proto::ProjectionOperator* projection);

  // optional .opossum.proto.TableScanOperator table_scan = 3;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 3;
  const ::opossum::proto::TableScanOperator& table_scan() const;
  ::opossum::proto::TableScanOperator* mutable_table_scan();
  ::opossum::proto::TableScanOperator* release_table_scan();
  void set_allocated_table_scan(::opossum::proto::TableScanOperator* table_scan);

  // optional .opossum.proto.ProductOperator product = 4;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 4;
  const ::opossum::proto::ProductOperator& product() const;
  ::opossum::proto::ProductOperator* mutable_product();
  ::opossum::proto::ProductOperator* release_product();
  void set_allocated_product(::opossum::proto::ProductOperator* product);

  // optional .opossum.proto.SortOperator sort = 5;
  bool has_sort() const;
  void clear_sort();
  static const int kSortFieldNumber = 5;
  const ::opossum::proto::SortOperator& sort() const;
  ::opossum::proto::SortOperator* mutable_sort();
  ::opossum::proto::SortOperator* release_sort();
  void set_allocated_sort(::opossum::proto::SortOperator* sort);

  // optional .opossum.proto.UnionAllOperator union_all = 6;
  bool has_union_all() const;
  void clear_union_all();
  static const int kUnionAllFieldNumber = 6;
  const ::opossum::proto::UnionAllOperator& union_all() const;
  ::opossum::proto::UnionAllOperator* mutable_union_all();
  ::opossum::proto::UnionAllOperator* release_union_all();
  void set_allocated_union_all(::opossum::proto::UnionAllOperator* union_all);

  // optional .opossum.proto.ImportCsvOperator import_csv = 7;
  bool has_import_csv() const;
  void clear_import_csv();
  static const int kImportCsvFieldNumber = 7;
  const ::opossum::proto::ImportCsvOperator& import_csv() const;
  ::opossum::proto::ImportCsvOperator* mutable_import_csv();
  ::opossum::proto::ImportCsvOperator* release_import_csv();
  void set_allocated_import_csv(::opossum::proto::ImportCsvOperator* import_csv);

  // optional .opossum.proto.PrintOperator print = 8;
  bool has_print() const;
  void clear_print();
  static const int kPrintFieldNumber = 8;
  const ::opossum::proto::PrintOperator& print() const;
  ::opossum::proto::PrintOperator* mutable_print();
  ::opossum::proto::PrintOperator* release_print();
  void set_allocated_print(::opossum::proto::PrintOperator* print);

  // optional .opossum.proto.DifferenceOperator difference = 9;
  bool has_difference() const;
  void clear_difference();
  static const int kDifferenceFieldNumber = 9;
  const ::opossum::proto::DifferenceOperator& difference() const;
  ::opossum::proto::DifferenceOperator* mutable_difference();
  ::opossum::proto::DifferenceOperator* release_difference();
  void set_allocated_difference(::opossum::proto::DifferenceOperator* difference);

  // optional .opossum.proto.ExportCsvOperator export_csv = 10;
  bool has_export_csv() const;
  void clear_export_csv();
  static const int kExportCsvFieldNumber = 10;
  const ::opossum::proto::ExportCsvOperator& export_csv() const;
  ::opossum::proto::ExportCsvOperator* mutable_export_csv();
  ::opossum::proto::ExportCsvOperator* release_export_csv();
  void set_allocated_export_csv(::opossum::proto::ExportCsvOperator* export_csv);

  // optional .opossum.proto.ExportBinaryOperator export_binary = 11;
  bool has_export_binary() const;
  void clear_export_binary();
  static const int kExportBinaryFieldNumber = 11;
  const ::opossum::proto::ExportBinaryOperator& export_binary() const;
  ::opossum::proto::ExportBinaryOperator* mutable_export_binary();
  ::opossum::proto::ExportBinaryOperator* release_export_binary();
  void set_allocated_export_binary(::opossum::proto::ExportBinaryOperator* export_binary);

  // optional .opossum.proto.IndexColumnScanOperator index_column_scan = 12;
  bool has_index_column_scan() const;
  void clear_index_column_scan();
  static const int kIndexColumnScanFieldNumber = 12;
  const ::opossum::proto::IndexColumnScanOperator& index_column_scan() const;
  ::opossum::proto::IndexColumnScanOperator* mutable_index_column_scan();
  ::opossum::proto::IndexColumnScanOperator* release_index_column_scan();
  void set_allocated_index_column_scan(::opossum::proto::IndexColumnScanOperator* index_column_scan);

  // optional .opossum.proto.NestedLoopJoinOperator nested_loop_join = 13;
  bool has_nested_loop_join() const;
  void clear_nested_loop_join();
  static const int kNestedLoopJoinFieldNumber = 13;
  const ::opossum::proto::NestedLoopJoinOperator& nested_loop_join() const;
  ::opossum::proto::NestedLoopJoinOperator* mutable_nested_loop_join();
  ::opossum::proto::NestedLoopJoinOperator* release_nested_loop_join();
  void set_allocated_nested_loop_join(::opossum::proto::NestedLoopJoinOperator* nested_loop_join);

  OperatorCase operator_case() const;
  // @@protoc_insertion_point(class_scope:opossum.proto.OperatorVariant)
 private:
  inline void set_has_get_table();
  inline void set_has_projection();
  inline void set_has_table_scan();
  inline void set_has_product();
  inline void set_has_sort();
  inline void set_has_union_all();
  inline void set_has_import_csv();
  inline void set_has_print();
  inline void set_has_difference();
  inline void set_has_export_csv();
  inline void set_has_export_binary();
  inline void set_has_index_column_scan();
  inline void set_has_nested_loop_join();

  inline bool has_operator() const;
  void clear_operator();
  inline void clear_has_operator();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union OperatorUnion {
    OperatorUnion() {}
    ::opossum::proto::GetTableOperator* get_table_;
    ::opossum::proto::ProjectionOperator* projection_;
    ::opossum::proto::TableScanOperator* table_scan_;
    ::opossum::proto::ProductOperator* product_;
    ::opossum::proto::SortOperator* sort_;
    ::opossum::proto::UnionAllOperator* union_all_;
    ::opossum::proto::ImportCsvOperator* import_csv_;
    ::opossum::proto::PrintOperator* print_;
    ::opossum::proto::DifferenceOperator* difference_;
    ::opossum::proto::ExportCsvOperator* export_csv_;
    ::opossum::proto::ExportBinaryOperator* export_binary_;
    ::opossum::proto::IndexColumnScanOperator* index_column_scan_;
    ::opossum::proto::NestedLoopJoinOperator* nested_loop_join_;
  } operator_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static OperatorVariant* default_instance_;
};
// -------------------------------------------------------------------

class OptionalColumnID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.OptionalColumnID) */ {
 public:
  OptionalColumnID();
  virtual ~OptionalColumnID();

  OptionalColumnID(const OptionalColumnID& from);

  inline OptionalColumnID& operator=(const OptionalColumnID& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionalColumnID& default_instance();

  void Swap(OptionalColumnID* other);

  // implements Message ----------------------------------------------

  inline OptionalColumnID* New() const { return New(NULL); }

  OptionalColumnID* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionalColumnID& from);
  void MergeFrom(const OptionalColumnID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionalColumnID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opossum.proto.OptionalColumnID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static OptionalColumnID* default_instance_;
};
// -------------------------------------------------------------------

class GetTableOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.GetTableOperator) */ {
 public:
  GetTableOperator();
  virtual ~GetTableOperator();

  GetTableOperator(const GetTableOperator& from);

  inline GetTableOperator& operator=(const GetTableOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTableOperator& default_instance();

  void Swap(GetTableOperator* other);

  // implements Message ----------------------------------------------

  inline GetTableOperator* New() const { return New(NULL); }

  GetTableOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTableOperator& from);
  void MergeFrom(const GetTableOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTableOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:opossum.proto.GetTableOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static GetTableOperator* default_instance_;
};
// -------------------------------------------------------------------

class ProjectionOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.ProjectionOperator) */ {
 public:
  ProjectionOperator();
  virtual ~ProjectionOperator();

  ProjectionOperator(const ProjectionOperator& from);

  inline ProjectionOperator& operator=(const ProjectionOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectionOperator& default_instance();

  void Swap(ProjectionOperator* other);

  // implements Message ----------------------------------------------

  inline ProjectionOperator* New() const { return New(NULL); }

  ProjectionOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjectionOperator& from);
  void MergeFrom(const ProjectionOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProjectionOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // repeated int32 column_id = 2;
  int column_id_size() const;
  void clear_column_id();
  static const int kColumnIdFieldNumber = 2;
  ::google::protobuf::int32 column_id(int index) const;
  void set_column_id(int index, ::google::protobuf::int32 value);
  void add_column_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      column_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_column_id();

  // @@protoc_insertion_point(class_scope:opossum.proto.ProjectionOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > column_id_;
  mutable int _column_id_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static ProjectionOperator* default_instance_;
};
// -------------------------------------------------------------------

class TableScanOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.TableScanOperator) */ {
 public:
  TableScanOperator();
  virtual ~TableScanOperator();

  TableScanOperator(const TableScanOperator& from);

  inline TableScanOperator& operator=(const TableScanOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableScanOperator& default_instance();

  void Swap(TableScanOperator* other);

  // implements Message ----------------------------------------------

  inline TableScanOperator* New() const { return New(NULL); }

  TableScanOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableScanOperator& from);
  void MergeFrom(const TableScanOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableScanOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // optional int32 column_id = 2;
  void clear_column_id();
  static const int kColumnIdFieldNumber = 2;
  ::google::protobuf::int32 column_id() const;
  void set_column_id(::google::protobuf::int32 value);

  // optional .opossum.proto.ScanType filter_operator = 3;
  void clear_filter_operator();
  static const int kFilterOperatorFieldNumber = 3;
  ::opossum::proto::ScanType filter_operator() const;
  void set_filter_operator(::opossum::proto::ScanType value);

  // optional .opossum.proto.Variant value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::opossum::proto::Variant& value() const;
  ::opossum::proto::Variant* mutable_value();
  ::opossum::proto::Variant* release_value();
  void set_allocated_value(::opossum::proto::Variant* value);

  // optional .opossum.proto.Variant value2 = 5;
  bool has_value2() const;
  void clear_value2();
  static const int kValue2FieldNumber = 5;
  const ::opossum::proto::Variant& value2() const;
  ::opossum::proto::Variant* mutable_value2();
  ::opossum::proto::Variant* release_value2();
  void set_allocated_value2(::opossum::proto::Variant* value2);

  // @@protoc_insertion_point(class_scope:opossum.proto.TableScanOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  ::google::protobuf::int32 column_id_;
  int filter_operator_;
  ::opossum::proto::Variant* value_;
  ::opossum::proto::Variant* value2_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static TableScanOperator* default_instance_;
};
// -------------------------------------------------------------------

class IndexColumnScanOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.IndexColumnScanOperator) */ {
 public:
  IndexColumnScanOperator();
  virtual ~IndexColumnScanOperator();

  IndexColumnScanOperator(const IndexColumnScanOperator& from);

  inline IndexColumnScanOperator& operator=(const IndexColumnScanOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexColumnScanOperator& default_instance();

  void Swap(IndexColumnScanOperator* other);

  // implements Message ----------------------------------------------

  inline IndexColumnScanOperator* New() const { return New(NULL); }

  IndexColumnScanOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexColumnScanOperator& from);
  void MergeFrom(const IndexColumnScanOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexColumnScanOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // optional int32 column_id = 2;
  void clear_column_id();
  static const int kColumnIdFieldNumber = 2;
  ::google::protobuf::int32 column_id() const;
  void set_column_id(::google::protobuf::int32 value);

  // optional .opossum.proto.ScanType filter_operator = 3;
  void clear_filter_operator();
  static const int kFilterOperatorFieldNumber = 3;
  ::opossum::proto::ScanType filter_operator() const;
  void set_filter_operator(::opossum::proto::ScanType value);

  // optional .opossum.proto.Variant value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::opossum::proto::Variant& value() const;
  ::opossum::proto::Variant* mutable_value();
  ::opossum::proto::Variant* release_value();
  void set_allocated_value(::opossum::proto::Variant* value);

  // optional .opossum.proto.Variant value2 = 5;
  bool has_value2() const;
  void clear_value2();
  static const int kValue2FieldNumber = 5;
  const ::opossum::proto::Variant& value2() const;
  ::opossum::proto::Variant* mutable_value2();
  ::opossum::proto::Variant* release_value2();
  void set_allocated_value2(::opossum::proto::Variant* value2);

  // @@protoc_insertion_point(class_scope:opossum.proto.IndexColumnScanOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  ::google::protobuf::int32 column_id_;
  int filter_operator_;
  ::opossum::proto::Variant* value_;
  ::opossum::proto::Variant* value2_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static IndexColumnScanOperator* default_instance_;
};
// -------------------------------------------------------------------

class NestedLoopJoinOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.NestedLoopJoinOperator) */ {
 public:
  NestedLoopJoinOperator();
  virtual ~NestedLoopJoinOperator();

  NestedLoopJoinOperator(const NestedLoopJoinOperator& from);

  inline NestedLoopJoinOperator& operator=(const NestedLoopJoinOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NestedLoopJoinOperator& default_instance();

  void Swap(NestedLoopJoinOperator* other);

  // implements Message ----------------------------------------------

  inline NestedLoopJoinOperator* New() const { return New(NULL); }

  NestedLoopJoinOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NestedLoopJoinOperator& from);
  void MergeFrom(const NestedLoopJoinOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NestedLoopJoinOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NestedLoopJoinOperator_JoinMode JoinMode;
  static const JoinMode Inner =
    NestedLoopJoinOperator_JoinMode_Inner;
  static const JoinMode Left =
    NestedLoopJoinOperator_JoinMode_Left;
  static const JoinMode Right =
    NestedLoopJoinOperator_JoinMode_Right;
  static const JoinMode Outer =
    NestedLoopJoinOperator_JoinMode_Outer;
  static const JoinMode Cross =
    NestedLoopJoinOperator_JoinMode_Cross;
  static const JoinMode Natural =
    NestedLoopJoinOperator_JoinMode_Natural;
  static const JoinMode Self =
    NestedLoopJoinOperator_JoinMode_Self;
  static inline bool JoinMode_IsValid(int value) {
    return NestedLoopJoinOperator_JoinMode_IsValid(value);
  }
  static const JoinMode JoinMode_MIN =
    NestedLoopJoinOperator_JoinMode_JoinMode_MIN;
  static const JoinMode JoinMode_MAX =
    NestedLoopJoinOperator_JoinMode_JoinMode_MAX;
  static const int JoinMode_ARRAYSIZE =
    NestedLoopJoinOperator_JoinMode_JoinMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  JoinMode_descriptor() {
    return NestedLoopJoinOperator_JoinMode_descriptor();
  }
  static inline const ::std::string& JoinMode_Name(JoinMode value) {
    return NestedLoopJoinOperator_JoinMode_Name(value);
  }
  static inline bool JoinMode_Parse(const ::std::string& name,
      JoinMode* value) {
    return NestedLoopJoinOperator_JoinMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant left_operator = 1;
  bool has_left_operator() const;
  void clear_left_operator();
  static const int kLeftOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& left_operator() const;
  ::opossum::proto::OperatorVariant* mutable_left_operator();
  ::opossum::proto::OperatorVariant* release_left_operator();
  void set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator);

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  bool has_right_operator() const;
  void clear_right_operator();
  static const int kRightOperatorFieldNumber = 2;
  const ::opossum::proto::OperatorVariant& right_operator() const;
  ::opossum::proto::OperatorVariant* mutable_right_operator();
  ::opossum::proto::OperatorVariant* release_right_operator();
  void set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator);

  // optional .opossum.proto.OptionalColumnID left_column_id = 3;
  bool has_left_column_id() const;
  void clear_left_column_id();
  static const int kLeftColumnIdFieldNumber = 3;
  const ::opossum::proto::OptionalColumnID& left_column_id() const;
  ::opossum::proto::OptionalColumnID* mutable_left_column_id();
  ::opossum::proto::OptionalColumnID* release_left_column_id();
  void set_allocated_left_column_id(::opossum::proto::OptionalColumnID* left_column_id);

  // optional .opossum.proto.OptionalColumnID right_column_id = 4;
  bool has_right_column_id() const;
  void clear_right_column_id();
  static const int kRightColumnIdFieldNumber = 4;
  const ::opossum::proto::OptionalColumnID& right_column_id() const;
  ::opossum::proto::OptionalColumnID* mutable_right_column_id();
  ::opossum::proto::OptionalColumnID* release_right_column_id();
  void set_allocated_right_column_id(::opossum::proto::OptionalColumnID* right_column_id);

  // optional .opossum.proto.ScanType op = 5;
  void clear_op();
  static const int kOpFieldNumber = 5;
  ::opossum::proto::ScanType op() const;
  void set_op(::opossum::proto::ScanType value);

  // optional .opossum.proto.NestedLoopJoinOperator.JoinMode mode = 6;
  void clear_mode();
  static const int kModeFieldNumber = 6;
  ::opossum::proto::NestedLoopJoinOperator_JoinMode mode() const;
  void set_mode(::opossum::proto::NestedLoopJoinOperator_JoinMode value);

  // @@protoc_insertion_point(class_scope:opossum.proto.NestedLoopJoinOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* left_operator_;
  ::opossum::proto::OperatorVariant* right_operator_;
  ::opossum::proto::OptionalColumnID* left_column_id_;
  ::opossum::proto::OptionalColumnID* right_column_id_;
  int op_;
  int mode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static NestedLoopJoinOperator* default_instance_;
};
// -------------------------------------------------------------------

class ProductOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.ProductOperator) */ {
 public:
  ProductOperator();
  virtual ~ProductOperator();

  ProductOperator(const ProductOperator& from);

  inline ProductOperator& operator=(const ProductOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductOperator& default_instance();

  void Swap(ProductOperator* other);

  // implements Message ----------------------------------------------

  inline ProductOperator* New() const { return New(NULL); }

  ProductOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductOperator& from);
  void MergeFrom(const ProductOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant left_operator = 1;
  bool has_left_operator() const;
  void clear_left_operator();
  static const int kLeftOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& left_operator() const;
  ::opossum::proto::OperatorVariant* mutable_left_operator();
  ::opossum::proto::OperatorVariant* release_left_operator();
  void set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator);

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  bool has_right_operator() const;
  void clear_right_operator();
  static const int kRightOperatorFieldNumber = 2;
  const ::opossum::proto::OperatorVariant& right_operator() const;
  ::opossum::proto::OperatorVariant* mutable_right_operator();
  ::opossum::proto::OperatorVariant* release_right_operator();
  void set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator);

  // @@protoc_insertion_point(class_scope:opossum.proto.ProductOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* left_operator_;
  ::opossum::proto::OperatorVariant* right_operator_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static ProductOperator* default_instance_;
};
// -------------------------------------------------------------------

class SortOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.SortOperator) */ {
 public:
  SortOperator();
  virtual ~SortOperator();

  SortOperator(const SortOperator& from);

  inline SortOperator& operator=(const SortOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SortOperator& default_instance();

  void Swap(SortOperator* other);

  // implements Message ----------------------------------------------

  inline SortOperator* New() const { return New(NULL); }

  SortOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SortOperator& from);
  void MergeFrom(const SortOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SortOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SortOperator_OrderByMode OrderByMode;
  static const OrderByMode Ascending =
    SortOperator_OrderByMode_Ascending;
  static const OrderByMode Descending =
    SortOperator_OrderByMode_Descending;
  static inline bool OrderByMode_IsValid(int value) {
    return SortOperator_OrderByMode_IsValid(value);
  }
  static const OrderByMode OrderByMode_MIN =
    SortOperator_OrderByMode_OrderByMode_MIN;
  static const OrderByMode OrderByMode_MAX =
    SortOperator_OrderByMode_OrderByMode_MAX;
  static const int OrderByMode_ARRAYSIZE =
    SortOperator_OrderByMode_OrderByMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OrderByMode_descriptor() {
    return SortOperator_OrderByMode_descriptor();
  }
  static inline const ::std::string& OrderByMode_Name(OrderByMode value) {
    return SortOperator_OrderByMode_Name(value);
  }
  static inline bool OrderByMode_Parse(const ::std::string& name,
      OrderByMode* value) {
    return SortOperator_OrderByMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // optional int32 column_id = 2;
  void clear_column_id();
  static const int kColumnIdFieldNumber = 2;
  ::google::protobuf::int32 column_id() const;
  void set_column_id(::google::protobuf::int32 value);

  // optional .opossum.proto.SortOperator.OrderByMode order_by_mode = 3;
  void clear_order_by_mode();
  static const int kOrderByModeFieldNumber = 3;
  ::opossum::proto::SortOperator_OrderByMode order_by_mode() const;
  void set_order_by_mode(::opossum::proto::SortOperator_OrderByMode value);

  // optional int32 output_chunk_size = 4;
  void clear_output_chunk_size();
  static const int kOutputChunkSizeFieldNumber = 4;
  ::google::protobuf::int32 output_chunk_size() const;
  void set_output_chunk_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opossum.proto.SortOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  ::google::protobuf::int32 column_id_;
  int order_by_mode_;
  ::google::protobuf::int32 output_chunk_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static SortOperator* default_instance_;
};
// -------------------------------------------------------------------

class UnionAllOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.UnionAllOperator) */ {
 public:
  UnionAllOperator();
  virtual ~UnionAllOperator();

  UnionAllOperator(const UnionAllOperator& from);

  inline UnionAllOperator& operator=(const UnionAllOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnionAllOperator& default_instance();

  void Swap(UnionAllOperator* other);

  // implements Message ----------------------------------------------

  inline UnionAllOperator* New() const { return New(NULL); }

  UnionAllOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnionAllOperator& from);
  void MergeFrom(const UnionAllOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnionAllOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator1 = 1;
  bool has_input_operator1() const;
  void clear_input_operator1();
  static const int kInputOperator1FieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator1() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator1();
  ::opossum::proto::OperatorVariant* release_input_operator1();
  void set_allocated_input_operator1(::opossum::proto::OperatorVariant* input_operator1);

  // optional .opossum.proto.OperatorVariant input_operator2 = 2;
  bool has_input_operator2() const;
  void clear_input_operator2();
  static const int kInputOperator2FieldNumber = 2;
  const ::opossum::proto::OperatorVariant& input_operator2() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator2();
  ::opossum::proto::OperatorVariant* release_input_operator2();
  void set_allocated_input_operator2(::opossum::proto::OperatorVariant* input_operator2);

  // @@protoc_insertion_point(class_scope:opossum.proto.UnionAllOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator1_;
  ::opossum::proto::OperatorVariant* input_operator2_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static UnionAllOperator* default_instance_;
};
// -------------------------------------------------------------------

class ImportCsvOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.ImportCsvOperator) */ {
 public:
  ImportCsvOperator();
  virtual ~ImportCsvOperator();

  ImportCsvOperator(const ImportCsvOperator& from);

  inline ImportCsvOperator& operator=(const ImportCsvOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportCsvOperator& default_instance();

  void Swap(ImportCsvOperator* other);

  // implements Message ----------------------------------------------

  inline ImportCsvOperator* New() const { return New(NULL); }

  ImportCsvOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportCsvOperator& from);
  void MergeFrom(const ImportCsvOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportCsvOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // optional string directory = 2;
  void clear_directory();
  static const int kDirectoryFieldNumber = 2;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // optional string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:opossum.proto.ImportCsvOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static ImportCsvOperator* default_instance_;
};
// -------------------------------------------------------------------

class ExportCsvOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.ExportCsvOperator) */ {
 public:
  ExportCsvOperator();
  virtual ~ExportCsvOperator();

  ExportCsvOperator(const ExportCsvOperator& from);

  inline ExportCsvOperator& operator=(const ExportCsvOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportCsvOperator& default_instance();

  void Swap(ExportCsvOperator* other);

  // implements Message ----------------------------------------------

  inline ExportCsvOperator* New() const { return New(NULL); }

  ExportCsvOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportCsvOperator& from);
  void MergeFrom(const ExportCsvOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportCsvOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // optional string directory = 2;
  void clear_directory();
  static const int kDirectoryFieldNumber = 2;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // optional string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:opossum.proto.ExportCsvOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static ExportCsvOperator* default_instance_;
};
// -------------------------------------------------------------------

class ExportBinaryOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.ExportBinaryOperator) */ {
 public:
  ExportBinaryOperator();
  virtual ~ExportBinaryOperator();

  ExportBinaryOperator(const ExportBinaryOperator& from);

  inline ExportBinaryOperator& operator=(const ExportBinaryOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportBinaryOperator& default_instance();

  void Swap(ExportBinaryOperator* other);

  // implements Message ----------------------------------------------

  inline ExportBinaryOperator* New() const { return New(NULL); }

  ExportBinaryOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportBinaryOperator& from);
  void MergeFrom(const ExportBinaryOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportBinaryOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // optional string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:opossum.proto.ExportBinaryOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static ExportBinaryOperator* default_instance_;
};
// -------------------------------------------------------------------

class PrintOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.PrintOperator) */ {
 public:
  PrintOperator();
  virtual ~PrintOperator();

  PrintOperator(const PrintOperator& from);

  inline PrintOperator& operator=(const PrintOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrintOperator& default_instance();

  void Swap(PrintOperator* other);

  // implements Message ----------------------------------------------

  inline PrintOperator* New() const { return New(NULL); }

  PrintOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrintOperator& from);
  void MergeFrom(const PrintOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrintOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  bool has_input_operator() const;
  void clear_input_operator();
  static const int kInputOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& input_operator() const;
  ::opossum::proto::OperatorVariant* mutable_input_operator();
  ::opossum::proto::OperatorVariant* release_input_operator();
  void set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator);

  // @@protoc_insertion_point(class_scope:opossum.proto.PrintOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* input_operator_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static PrintOperator* default_instance_;
};
// -------------------------------------------------------------------

class DifferenceOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.DifferenceOperator) */ {
 public:
  DifferenceOperator();
  virtual ~DifferenceOperator();

  DifferenceOperator(const DifferenceOperator& from);

  inline DifferenceOperator& operator=(const DifferenceOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DifferenceOperator& default_instance();

  void Swap(DifferenceOperator* other);

  // implements Message ----------------------------------------------

  inline DifferenceOperator* New() const { return New(NULL); }

  DifferenceOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DifferenceOperator& from);
  void MergeFrom(const DifferenceOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DifferenceOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.OperatorVariant left_operator = 1;
  bool has_left_operator() const;
  void clear_left_operator();
  static const int kLeftOperatorFieldNumber = 1;
  const ::opossum::proto::OperatorVariant& left_operator() const;
  ::opossum::proto::OperatorVariant* mutable_left_operator();
  ::opossum::proto::OperatorVariant* release_left_operator();
  void set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator);

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  bool has_right_operator() const;
  void clear_right_operator();
  static const int kRightOperatorFieldNumber = 2;
  const ::opossum::proto::OperatorVariant& right_operator() const;
  ::opossum::proto::OperatorVariant* mutable_right_operator();
  ::opossum::proto::OperatorVariant* release_right_operator();
  void set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator);

  // @@protoc_insertion_point(class_scope:opossum.proto.DifferenceOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::opossum::proto::OperatorVariant* left_operator_;
  ::opossum::proto::OperatorVariant* right_operator_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static DifferenceOperator* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum ResultCase {
    kResponseTable = 1,
    kError = 2,
    RESULT_NOT_SET = 0,
  };

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opossum.proto.Table response_table = 1;
  bool has_response_table() const;
  void clear_response_table();
  static const int kResponseTableFieldNumber = 1;
  const ::opossum::proto::Table& response_table() const;
  ::opossum::proto::Table* mutable_response_table();
  ::opossum::proto::Table* release_response_table();
  void set_allocated_response_table(::opossum::proto::Table* response_table);

  // optional string error = 2;
  private:
  bool has_error() const;
  public:
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:opossum.proto.Response)
 private:
  inline void set_has_response_table();
  inline void set_has_error();

  inline bool has_result() const;
  void clear_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ResultUnion {
    ResultUnion() {}
    ::opossum::proto::Table* response_table_;
    ::google::protobuf::internal::ArenaStringPtr error_;
  } result_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  inline Table* New() const { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string column_type = 1;
  int column_type_size() const;
  void clear_column_type();
  static const int kColumnTypeFieldNumber = 1;
  const ::std::string& column_type(int index) const;
  ::std::string* mutable_column_type(int index);
  void set_column_type(int index, const ::std::string& value);
  void set_column_type(int index, const char* value);
  void set_column_type(int index, const char* value, size_t size);
  ::std::string* add_column_type();
  void add_column_type(const ::std::string& value);
  void add_column_type(const char* value);
  void add_column_type(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& column_type() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column_type();

  // repeated string column_name = 2;
  int column_name_size() const;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 2;
  const ::std::string& column_name(int index) const;
  ::std::string* mutable_column_name(int index);
  void set_column_name(int index, const ::std::string& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  ::std::string* add_column_name();
  void add_column_name(const ::std::string& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& column_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column_name();

  // repeated .opossum.proto.Row row = 3;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 3;
  const ::opossum::proto::Row& row(int index) const;
  ::opossum::proto::Row* mutable_row(int index);
  ::opossum::proto::Row* add_row();
  ::google::protobuf::RepeatedPtrField< ::opossum::proto::Row >*
      mutable_row();
  const ::google::protobuf::RepeatedPtrField< ::opossum::proto::Row >&
      row() const;

  // @@protoc_insertion_point(class_scope:opossum.proto.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_name_;
  ::google::protobuf::RepeatedPtrField< ::opossum::proto::Row > row_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opossum.proto.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  void Swap(Row* other);

  // implements Message ----------------------------------------------

  inline Row* New() const { return New(NULL); }

  Row* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opossum.proto.Variant value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::opossum::proto::Variant& value(int index) const;
  ::opossum::proto::Variant* mutable_value(int index);
  ::opossum::proto::Variant* add_value();
  ::google::protobuf::RepeatedPtrField< ::opossum::proto::Variant >*
      mutable_value();
  const ::google::protobuf::RepeatedPtrField< ::opossum::proto::Variant >&
      value() const;

  // @@protoc_insertion_point(class_scope:opossum.proto.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::opossum::proto::Variant > value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_opossum_2eproto();
  friend void protobuf_AssignDesc_opossum_2eproto();
  friend void protobuf_ShutdownFile_opossum_2eproto();

  void InitAsDefaultInstance();
  static Row* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Variant

// optional int32 value_int = 1;
inline bool Variant::has_value_int() const {
  return variant_case() == kValueInt;
}
inline void Variant::set_has_value_int() {
  _oneof_case_[0] = kValueInt;
}
inline void Variant::clear_value_int() {
  if (has_value_int()) {
    variant_.value_int_ = 0;
    clear_has_variant();
  }
}
inline ::google::protobuf::int32 Variant::value_int() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_int)
  if (has_value_int()) {
    return variant_.value_int_;
  }
  return 0;
}
inline void Variant::set_value_int(::google::protobuf::int32 value) {
  if (!has_value_int()) {
    clear_variant();
    set_has_value_int();
  }
  variant_.value_int_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_int)
}

// optional float value_float = 2;
inline bool Variant::has_value_float() const {
  return variant_case() == kValueFloat;
}
inline void Variant::set_has_value_float() {
  _oneof_case_[0] = kValueFloat;
}
inline void Variant::clear_value_float() {
  if (has_value_float()) {
    variant_.value_float_ = 0;
    clear_has_variant();
  }
}
inline float Variant::value_float() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_float)
  if (has_value_float()) {
    return variant_.value_float_;
  }
  return 0;
}
inline void Variant::set_value_float(float value) {
  if (!has_value_float()) {
    clear_variant();
    set_has_value_float();
  }
  variant_.value_float_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_float)
}

// optional string value_string = 3;
inline bool Variant::has_value_string() const {
  return variant_case() == kValueString;
}
inline void Variant::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
inline void Variant::clear_value_string() {
  if (has_value_string()) {
    variant_.value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_variant();
  }
}
inline const ::std::string& Variant::value_string() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_string)
  if (has_value_string()) {
    return variant_.value_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Variant::set_value_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_string)
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  variant_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_string)
}
inline void Variant::set_value_string(const char* value) {
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  variant_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.Variant.value_string)
}
inline void Variant::set_value_string(const char* value, size_t size) {
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  variant_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Variant.value_string)
}
inline ::std::string* Variant::mutable_value_string() {
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Variant.value_string)
  return variant_.value_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variant::release_value_string() {
  // @@protoc_insertion_point(field_release:opossum.proto.Variant.value_string)
  if (has_value_string()) {
    clear_has_variant();
    return variant_.value_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Variant::set_allocated_value_string(::std::string* value_string) {
  if (!has_value_string()) {
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_variant();
  if (value_string != NULL) {
    set_has_value_string();
    variant_.value_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value_string);
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Variant.value_string)
}

// optional double value_double = 4;
inline bool Variant::has_value_double() const {
  return variant_case() == kValueDouble;
}
inline void Variant::set_has_value_double() {
  _oneof_case_[0] = kValueDouble;
}
inline void Variant::clear_value_double() {
  if (has_value_double()) {
    variant_.value_double_ = 0;
    clear_has_variant();
  }
}
inline double Variant::value_double() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_double)
  if (has_value_double()) {
    return variant_.value_double_;
  }
  return 0;
}
inline void Variant::set_value_double(double value) {
  if (!has_value_double()) {
    clear_variant();
    set_has_value_double();
  }
  variant_.value_double_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_double)
}

// optional int64 value_long = 5;
inline bool Variant::has_value_long() const {
  return variant_case() == kValueLong;
}
inline void Variant::set_has_value_long() {
  _oneof_case_[0] = kValueLong;
}
inline void Variant::clear_value_long() {
  if (has_value_long()) {
    variant_.value_long_ = GOOGLE_LONGLONG(0);
    clear_has_variant();
  }
}
inline ::google::protobuf::int64 Variant::value_long() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_long)
  if (has_value_long()) {
    return variant_.value_long_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Variant::set_value_long(::google::protobuf::int64 value) {
  if (!has_value_long()) {
    clear_variant();
    set_has_value_long();
  }
  variant_.value_long_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_long)
}

inline bool Variant::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
inline void Variant::clear_has_variant() {
  _oneof_case_[0] = VARIANT_NOT_SET;
}
inline Variant::VariantCase Variant::variant_case() const {
  return Variant::VariantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Request

// optional .opossum.proto.OperatorVariant root_operator = 1;
inline bool Request::has_root_operator() const {
  return !_is_default_instance_ && root_operator_ != NULL;
}
inline void Request::clear_root_operator() {
  if (GetArenaNoVirtual() == NULL && root_operator_ != NULL) delete root_operator_;
  root_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& Request::root_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Request.root_operator)
  return root_operator_ != NULL ? *root_operator_ : *default_instance_->root_operator_;
}
inline ::opossum::proto::OperatorVariant* Request::mutable_root_operator() {
  
  if (root_operator_ == NULL) {
    root_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Request.root_operator)
  return root_operator_;
}
inline ::opossum::proto::OperatorVariant* Request::release_root_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.Request.root_operator)
  
  ::opossum::proto::OperatorVariant* temp = root_operator_;
  root_operator_ = NULL;
  return temp;
}
inline void Request::set_allocated_root_operator(::opossum::proto::OperatorVariant* root_operator) {
  delete root_operator_;
  root_operator_ = root_operator;
  if (root_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Request.root_operator)
}

// -------------------------------------------------------------------

// OperatorVariant

// optional .opossum.proto.GetTableOperator get_table = 1;
inline bool OperatorVariant::has_get_table() const {
  return operator_case() == kGetTable;
}
inline void OperatorVariant::set_has_get_table() {
  _oneof_case_[0] = kGetTable;
}
inline void OperatorVariant::clear_get_table() {
  if (has_get_table()) {
    delete operator_.get_table_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::GetTableOperator& OperatorVariant::get_table() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.get_table)
  return has_get_table()
      ? *operator_.get_table_
      : ::opossum::proto::GetTableOperator::default_instance();
}
inline ::opossum::proto::GetTableOperator* OperatorVariant::mutable_get_table() {
  if (!has_get_table()) {
    clear_operator();
    set_has_get_table();
    operator_.get_table_ = new ::opossum::proto::GetTableOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.get_table)
  return operator_.get_table_;
}
inline ::opossum::proto::GetTableOperator* OperatorVariant::release_get_table() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.get_table)
  if (has_get_table()) {
    clear_has_operator();
    ::opossum::proto::GetTableOperator* temp = operator_.get_table_;
    operator_.get_table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_get_table(::opossum::proto::GetTableOperator* get_table) {
  clear_operator();
  if (get_table) {
    set_has_get_table();
    operator_.get_table_ = get_table;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.get_table)
}

// optional .opossum.proto.ProjectionOperator projection = 2;
inline bool OperatorVariant::has_projection() const {
  return operator_case() == kProjection;
}
inline void OperatorVariant::set_has_projection() {
  _oneof_case_[0] = kProjection;
}
inline void OperatorVariant::clear_projection() {
  if (has_projection()) {
    delete operator_.projection_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::ProjectionOperator& OperatorVariant::projection() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.projection)
  return has_projection()
      ? *operator_.projection_
      : ::opossum::proto::ProjectionOperator::default_instance();
}
inline ::opossum::proto::ProjectionOperator* OperatorVariant::mutable_projection() {
  if (!has_projection()) {
    clear_operator();
    set_has_projection();
    operator_.projection_ = new ::opossum::proto::ProjectionOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.projection)
  return operator_.projection_;
}
inline ::opossum::proto::ProjectionOperator* OperatorVariant::release_projection() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.projection)
  if (has_projection()) {
    clear_has_operator();
    ::opossum::proto::ProjectionOperator* temp = operator_.projection_;
    operator_.projection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_projection(::opossum::proto::ProjectionOperator* projection) {
  clear_operator();
  if (projection) {
    set_has_projection();
    operator_.projection_ = projection;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.projection)
}

// optional .opossum.proto.TableScanOperator table_scan = 3;
inline bool OperatorVariant::has_table_scan() const {
  return operator_case() == kTableScan;
}
inline void OperatorVariant::set_has_table_scan() {
  _oneof_case_[0] = kTableScan;
}
inline void OperatorVariant::clear_table_scan() {
  if (has_table_scan()) {
    delete operator_.table_scan_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::TableScanOperator& OperatorVariant::table_scan() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.table_scan)
  return has_table_scan()
      ? *operator_.table_scan_
      : ::opossum::proto::TableScanOperator::default_instance();
}
inline ::opossum::proto::TableScanOperator* OperatorVariant::mutable_table_scan() {
  if (!has_table_scan()) {
    clear_operator();
    set_has_table_scan();
    operator_.table_scan_ = new ::opossum::proto::TableScanOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.table_scan)
  return operator_.table_scan_;
}
inline ::opossum::proto::TableScanOperator* OperatorVariant::release_table_scan() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.table_scan)
  if (has_table_scan()) {
    clear_has_operator();
    ::opossum::proto::TableScanOperator* temp = operator_.table_scan_;
    operator_.table_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_table_scan(::opossum::proto::TableScanOperator* table_scan) {
  clear_operator();
  if (table_scan) {
    set_has_table_scan();
    operator_.table_scan_ = table_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.table_scan)
}

// optional .opossum.proto.ProductOperator product = 4;
inline bool OperatorVariant::has_product() const {
  return operator_case() == kProduct;
}
inline void OperatorVariant::set_has_product() {
  _oneof_case_[0] = kProduct;
}
inline void OperatorVariant::clear_product() {
  if (has_product()) {
    delete operator_.product_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::ProductOperator& OperatorVariant::product() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.product)
  return has_product()
      ? *operator_.product_
      : ::opossum::proto::ProductOperator::default_instance();
}
inline ::opossum::proto::ProductOperator* OperatorVariant::mutable_product() {
  if (!has_product()) {
    clear_operator();
    set_has_product();
    operator_.product_ = new ::opossum::proto::ProductOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.product)
  return operator_.product_;
}
inline ::opossum::proto::ProductOperator* OperatorVariant::release_product() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.product)
  if (has_product()) {
    clear_has_operator();
    ::opossum::proto::ProductOperator* temp = operator_.product_;
    operator_.product_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_product(::opossum::proto::ProductOperator* product) {
  clear_operator();
  if (product) {
    set_has_product();
    operator_.product_ = product;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.product)
}

// optional .opossum.proto.SortOperator sort = 5;
inline bool OperatorVariant::has_sort() const {
  return operator_case() == kSort;
}
inline void OperatorVariant::set_has_sort() {
  _oneof_case_[0] = kSort;
}
inline void OperatorVariant::clear_sort() {
  if (has_sort()) {
    delete operator_.sort_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::SortOperator& OperatorVariant::sort() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.sort)
  return has_sort()
      ? *operator_.sort_
      : ::opossum::proto::SortOperator::default_instance();
}
inline ::opossum::proto::SortOperator* OperatorVariant::mutable_sort() {
  if (!has_sort()) {
    clear_operator();
    set_has_sort();
    operator_.sort_ = new ::opossum::proto::SortOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.sort)
  return operator_.sort_;
}
inline ::opossum::proto::SortOperator* OperatorVariant::release_sort() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.sort)
  if (has_sort()) {
    clear_has_operator();
    ::opossum::proto::SortOperator* temp = operator_.sort_;
    operator_.sort_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_sort(::opossum::proto::SortOperator* sort) {
  clear_operator();
  if (sort) {
    set_has_sort();
    operator_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.sort)
}

// optional .opossum.proto.UnionAllOperator union_all = 6;
inline bool OperatorVariant::has_union_all() const {
  return operator_case() == kUnionAll;
}
inline void OperatorVariant::set_has_union_all() {
  _oneof_case_[0] = kUnionAll;
}
inline void OperatorVariant::clear_union_all() {
  if (has_union_all()) {
    delete operator_.union_all_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::UnionAllOperator& OperatorVariant::union_all() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.union_all)
  return has_union_all()
      ? *operator_.union_all_
      : ::opossum::proto::UnionAllOperator::default_instance();
}
inline ::opossum::proto::UnionAllOperator* OperatorVariant::mutable_union_all() {
  if (!has_union_all()) {
    clear_operator();
    set_has_union_all();
    operator_.union_all_ = new ::opossum::proto::UnionAllOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.union_all)
  return operator_.union_all_;
}
inline ::opossum::proto::UnionAllOperator* OperatorVariant::release_union_all() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.union_all)
  if (has_union_all()) {
    clear_has_operator();
    ::opossum::proto::UnionAllOperator* temp = operator_.union_all_;
    operator_.union_all_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_union_all(::opossum::proto::UnionAllOperator* union_all) {
  clear_operator();
  if (union_all) {
    set_has_union_all();
    operator_.union_all_ = union_all;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.union_all)
}

// optional .opossum.proto.ImportCsvOperator import_csv = 7;
inline bool OperatorVariant::has_import_csv() const {
  return operator_case() == kImportCsv;
}
inline void OperatorVariant::set_has_import_csv() {
  _oneof_case_[0] = kImportCsv;
}
inline void OperatorVariant::clear_import_csv() {
  if (has_import_csv()) {
    delete operator_.import_csv_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::ImportCsvOperator& OperatorVariant::import_csv() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.import_csv)
  return has_import_csv()
      ? *operator_.import_csv_
      : ::opossum::proto::ImportCsvOperator::default_instance();
}
inline ::opossum::proto::ImportCsvOperator* OperatorVariant::mutable_import_csv() {
  if (!has_import_csv()) {
    clear_operator();
    set_has_import_csv();
    operator_.import_csv_ = new ::opossum::proto::ImportCsvOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.import_csv)
  return operator_.import_csv_;
}
inline ::opossum::proto::ImportCsvOperator* OperatorVariant::release_import_csv() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.import_csv)
  if (has_import_csv()) {
    clear_has_operator();
    ::opossum::proto::ImportCsvOperator* temp = operator_.import_csv_;
    operator_.import_csv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_import_csv(::opossum::proto::ImportCsvOperator* import_csv) {
  clear_operator();
  if (import_csv) {
    set_has_import_csv();
    operator_.import_csv_ = import_csv;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.import_csv)
}

// optional .opossum.proto.PrintOperator print = 8;
inline bool OperatorVariant::has_print() const {
  return operator_case() == kPrint;
}
inline void OperatorVariant::set_has_print() {
  _oneof_case_[0] = kPrint;
}
inline void OperatorVariant::clear_print() {
  if (has_print()) {
    delete operator_.print_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::PrintOperator& OperatorVariant::print() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.print)
  return has_print()
      ? *operator_.print_
      : ::opossum::proto::PrintOperator::default_instance();
}
inline ::opossum::proto::PrintOperator* OperatorVariant::mutable_print() {
  if (!has_print()) {
    clear_operator();
    set_has_print();
    operator_.print_ = new ::opossum::proto::PrintOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.print)
  return operator_.print_;
}
inline ::opossum::proto::PrintOperator* OperatorVariant::release_print() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.print)
  if (has_print()) {
    clear_has_operator();
    ::opossum::proto::PrintOperator* temp = operator_.print_;
    operator_.print_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_print(::opossum::proto::PrintOperator* print) {
  clear_operator();
  if (print) {
    set_has_print();
    operator_.print_ = print;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.print)
}

// optional .opossum.proto.DifferenceOperator difference = 9;
inline bool OperatorVariant::has_difference() const {
  return operator_case() == kDifference;
}
inline void OperatorVariant::set_has_difference() {
  _oneof_case_[0] = kDifference;
}
inline void OperatorVariant::clear_difference() {
  if (has_difference()) {
    delete operator_.difference_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::DifferenceOperator& OperatorVariant::difference() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.difference)
  return has_difference()
      ? *operator_.difference_
      : ::opossum::proto::DifferenceOperator::default_instance();
}
inline ::opossum::proto::DifferenceOperator* OperatorVariant::mutable_difference() {
  if (!has_difference()) {
    clear_operator();
    set_has_difference();
    operator_.difference_ = new ::opossum::proto::DifferenceOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.difference)
  return operator_.difference_;
}
inline ::opossum::proto::DifferenceOperator* OperatorVariant::release_difference() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.difference)
  if (has_difference()) {
    clear_has_operator();
    ::opossum::proto::DifferenceOperator* temp = operator_.difference_;
    operator_.difference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_difference(::opossum::proto::DifferenceOperator* difference) {
  clear_operator();
  if (difference) {
    set_has_difference();
    operator_.difference_ = difference;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.difference)
}

// optional .opossum.proto.ExportCsvOperator export_csv = 10;
inline bool OperatorVariant::has_export_csv() const {
  return operator_case() == kExportCsv;
}
inline void OperatorVariant::set_has_export_csv() {
  _oneof_case_[0] = kExportCsv;
}
inline void OperatorVariant::clear_export_csv() {
  if (has_export_csv()) {
    delete operator_.export_csv_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::ExportCsvOperator& OperatorVariant::export_csv() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.export_csv)
  return has_export_csv()
      ? *operator_.export_csv_
      : ::opossum::proto::ExportCsvOperator::default_instance();
}
inline ::opossum::proto::ExportCsvOperator* OperatorVariant::mutable_export_csv() {
  if (!has_export_csv()) {
    clear_operator();
    set_has_export_csv();
    operator_.export_csv_ = new ::opossum::proto::ExportCsvOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.export_csv)
  return operator_.export_csv_;
}
inline ::opossum::proto::ExportCsvOperator* OperatorVariant::release_export_csv() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.export_csv)
  if (has_export_csv()) {
    clear_has_operator();
    ::opossum::proto::ExportCsvOperator* temp = operator_.export_csv_;
    operator_.export_csv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_export_csv(::opossum::proto::ExportCsvOperator* export_csv) {
  clear_operator();
  if (export_csv) {
    set_has_export_csv();
    operator_.export_csv_ = export_csv;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.export_csv)
}

// optional .opossum.proto.ExportBinaryOperator export_binary = 11;
inline bool OperatorVariant::has_export_binary() const {
  return operator_case() == kExportBinary;
}
inline void OperatorVariant::set_has_export_binary() {
  _oneof_case_[0] = kExportBinary;
}
inline void OperatorVariant::clear_export_binary() {
  if (has_export_binary()) {
    delete operator_.export_binary_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::ExportBinaryOperator& OperatorVariant::export_binary() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.export_binary)
  return has_export_binary()
      ? *operator_.export_binary_
      : ::opossum::proto::ExportBinaryOperator::default_instance();
}
inline ::opossum::proto::ExportBinaryOperator* OperatorVariant::mutable_export_binary() {
  if (!has_export_binary()) {
    clear_operator();
    set_has_export_binary();
    operator_.export_binary_ = new ::opossum::proto::ExportBinaryOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.export_binary)
  return operator_.export_binary_;
}
inline ::opossum::proto::ExportBinaryOperator* OperatorVariant::release_export_binary() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.export_binary)
  if (has_export_binary()) {
    clear_has_operator();
    ::opossum::proto::ExportBinaryOperator* temp = operator_.export_binary_;
    operator_.export_binary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_export_binary(::opossum::proto::ExportBinaryOperator* export_binary) {
  clear_operator();
  if (export_binary) {
    set_has_export_binary();
    operator_.export_binary_ = export_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.export_binary)
}

// optional .opossum.proto.IndexColumnScanOperator index_column_scan = 12;
inline bool OperatorVariant::has_index_column_scan() const {
  return operator_case() == kIndexColumnScan;
}
inline void OperatorVariant::set_has_index_column_scan() {
  _oneof_case_[0] = kIndexColumnScan;
}
inline void OperatorVariant::clear_index_column_scan() {
  if (has_index_column_scan()) {
    delete operator_.index_column_scan_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::IndexColumnScanOperator& OperatorVariant::index_column_scan() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.index_column_scan)
  return has_index_column_scan()
      ? *operator_.index_column_scan_
      : ::opossum::proto::IndexColumnScanOperator::default_instance();
}
inline ::opossum::proto::IndexColumnScanOperator* OperatorVariant::mutable_index_column_scan() {
  if (!has_index_column_scan()) {
    clear_operator();
    set_has_index_column_scan();
    operator_.index_column_scan_ = new ::opossum::proto::IndexColumnScanOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.index_column_scan)
  return operator_.index_column_scan_;
}
inline ::opossum::proto::IndexColumnScanOperator* OperatorVariant::release_index_column_scan() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.index_column_scan)
  if (has_index_column_scan()) {
    clear_has_operator();
    ::opossum::proto::IndexColumnScanOperator* temp = operator_.index_column_scan_;
    operator_.index_column_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_index_column_scan(::opossum::proto::IndexColumnScanOperator* index_column_scan) {
  clear_operator();
  if (index_column_scan) {
    set_has_index_column_scan();
    operator_.index_column_scan_ = index_column_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.index_column_scan)
}

// optional .opossum.proto.NestedLoopJoinOperator nested_loop_join = 13;
inline bool OperatorVariant::has_nested_loop_join() const {
  return operator_case() == kNestedLoopJoin;
}
inline void OperatorVariant::set_has_nested_loop_join() {
  _oneof_case_[0] = kNestedLoopJoin;
}
inline void OperatorVariant::clear_nested_loop_join() {
  if (has_nested_loop_join()) {
    delete operator_.nested_loop_join_;
    clear_has_operator();
  }
}
inline  const ::opossum::proto::NestedLoopJoinOperator& OperatorVariant::nested_loop_join() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.nested_loop_join)
  return has_nested_loop_join()
      ? *operator_.nested_loop_join_
      : ::opossum::proto::NestedLoopJoinOperator::default_instance();
}
inline ::opossum::proto::NestedLoopJoinOperator* OperatorVariant::mutable_nested_loop_join() {
  if (!has_nested_loop_join()) {
    clear_operator();
    set_has_nested_loop_join();
    operator_.nested_loop_join_ = new ::opossum::proto::NestedLoopJoinOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.nested_loop_join)
  return operator_.nested_loop_join_;
}
inline ::opossum::proto::NestedLoopJoinOperator* OperatorVariant::release_nested_loop_join() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.nested_loop_join)
  if (has_nested_loop_join()) {
    clear_has_operator();
    ::opossum::proto::NestedLoopJoinOperator* temp = operator_.nested_loop_join_;
    operator_.nested_loop_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OperatorVariant::set_allocated_nested_loop_join(::opossum::proto::NestedLoopJoinOperator* nested_loop_join) {
  clear_operator();
  if (nested_loop_join) {
    set_has_nested_loop_join();
    operator_.nested_loop_join_ = nested_loop_join;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.nested_loop_join)
}

inline bool OperatorVariant::has_operator() const {
  return operator_case() != OPERATOR_NOT_SET;
}
inline void OperatorVariant::clear_has_operator() {
  _oneof_case_[0] = OPERATOR_NOT_SET;
}
inline OperatorVariant::OperatorCase OperatorVariant::operator_case() const {
  return OperatorVariant::OperatorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OptionalColumnID

// optional int32 value = 1;
inline void OptionalColumnID::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 OptionalColumnID::value() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OptionalColumnID.value)
  return value_;
}
inline void OptionalColumnID::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.OptionalColumnID.value)
}

// -------------------------------------------------------------------

// GetTableOperator

// optional string table_name = 1;
inline void GetTableOperator::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTableOperator::table_name() const {
  // @@protoc_insertion_point(field_get:opossum.proto.GetTableOperator.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTableOperator::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.GetTableOperator.table_name)
}
inline void GetTableOperator::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.GetTableOperator.table_name)
}
inline void GetTableOperator::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.GetTableOperator.table_name)
}
inline ::std::string* GetTableOperator::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.GetTableOperator.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTableOperator::release_table_name() {
  // @@protoc_insertion_point(field_release:opossum.proto.GetTableOperator.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTableOperator::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.GetTableOperator.table_name)
}

// -------------------------------------------------------------------

// ProjectionOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool ProjectionOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void ProjectionOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& ProjectionOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProjectionOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* ProjectionOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ProjectionOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* ProjectionOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ProjectionOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void ProjectionOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ProjectionOperator.input_operator)
}

// repeated int32 column_id = 2;
inline int ProjectionOperator::column_id_size() const {
  return column_id_.size();
}
inline void ProjectionOperator::clear_column_id() {
  column_id_.Clear();
}
inline ::google::protobuf::int32 ProjectionOperator::column_id(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProjectionOperator.column_id)
  return column_id_.Get(index);
}
inline void ProjectionOperator::set_column_id(int index, ::google::protobuf::int32 value) {
  column_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:opossum.proto.ProjectionOperator.column_id)
}
inline void ProjectionOperator::add_column_id(::google::protobuf::int32 value) {
  column_id_.Add(value);
  // @@protoc_insertion_point(field_add:opossum.proto.ProjectionOperator.column_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProjectionOperator::column_id() const {
  // @@protoc_insertion_point(field_list:opossum.proto.ProjectionOperator.column_id)
  return column_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProjectionOperator::mutable_column_id() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.ProjectionOperator.column_id)
  return &column_id_;
}

// -------------------------------------------------------------------

// TableScanOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool TableScanOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void TableScanOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& TableScanOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* TableScanOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.TableScanOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* TableScanOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.TableScanOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void TableScanOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.TableScanOperator.input_operator)
}

// optional int32 column_id = 2;
inline void TableScanOperator::clear_column_id() {
  column_id_ = 0;
}
inline ::google::protobuf::int32 TableScanOperator::column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.column_id)
  return column_id_;
}
inline void TableScanOperator::set_column_id(::google::protobuf::int32 value) {
  
  column_id_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.TableScanOperator.column_id)
}

// optional .opossum.proto.ScanType filter_operator = 3;
inline void TableScanOperator::clear_filter_operator() {
  filter_operator_ = 0;
}
inline ::opossum::proto::ScanType TableScanOperator::filter_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.filter_operator)
  return static_cast< ::opossum::proto::ScanType >(filter_operator_);
}
inline void TableScanOperator::set_filter_operator(::opossum::proto::ScanType value) {
  
  filter_operator_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.TableScanOperator.filter_operator)
}

// optional .opossum.proto.Variant value = 4;
inline bool TableScanOperator::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void TableScanOperator::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::opossum::proto::Variant& TableScanOperator::value() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::opossum::proto::Variant* TableScanOperator::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.TableScanOperator.value)
  return value_;
}
inline ::opossum::proto::Variant* TableScanOperator::release_value() {
  // @@protoc_insertion_point(field_release:opossum.proto.TableScanOperator.value)
  
  ::opossum::proto::Variant* temp = value_;
  value_ = NULL;
  return temp;
}
inline void TableScanOperator::set_allocated_value(::opossum::proto::Variant* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.TableScanOperator.value)
}

// optional .opossum.proto.Variant value2 = 5;
inline bool TableScanOperator::has_value2() const {
  return !_is_default_instance_ && value2_ != NULL;
}
inline void TableScanOperator::clear_value2() {
  if (GetArenaNoVirtual() == NULL && value2_ != NULL) delete value2_;
  value2_ = NULL;
}
inline const ::opossum::proto::Variant& TableScanOperator::value2() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.value2)
  return value2_ != NULL ? *value2_ : *default_instance_->value2_;
}
inline ::opossum::proto::Variant* TableScanOperator::mutable_value2() {
  
  if (value2_ == NULL) {
    value2_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.TableScanOperator.value2)
  return value2_;
}
inline ::opossum::proto::Variant* TableScanOperator::release_value2() {
  // @@protoc_insertion_point(field_release:opossum.proto.TableScanOperator.value2)
  
  ::opossum::proto::Variant* temp = value2_;
  value2_ = NULL;
  return temp;
}
inline void TableScanOperator::set_allocated_value2(::opossum::proto::Variant* value2) {
  delete value2_;
  value2_ = value2;
  if (value2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.TableScanOperator.value2)
}

// -------------------------------------------------------------------

// IndexColumnScanOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool IndexColumnScanOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void IndexColumnScanOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& IndexColumnScanOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* IndexColumnScanOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.IndexColumnScanOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* IndexColumnScanOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.IndexColumnScanOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void IndexColumnScanOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.IndexColumnScanOperator.input_operator)
}

// optional int32 column_id = 2;
inline void IndexColumnScanOperator::clear_column_id() {
  column_id_ = 0;
}
inline ::google::protobuf::int32 IndexColumnScanOperator::column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.column_id)
  return column_id_;
}
inline void IndexColumnScanOperator::set_column_id(::google::protobuf::int32 value) {
  
  column_id_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.IndexColumnScanOperator.column_id)
}

// optional .opossum.proto.ScanType filter_operator = 3;
inline void IndexColumnScanOperator::clear_filter_operator() {
  filter_operator_ = 0;
}
inline ::opossum::proto::ScanType IndexColumnScanOperator::filter_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.filter_operator)
  return static_cast< ::opossum::proto::ScanType >(filter_operator_);
}
inline void IndexColumnScanOperator::set_filter_operator(::opossum::proto::ScanType value) {
  
  filter_operator_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.IndexColumnScanOperator.filter_operator)
}

// optional .opossum.proto.Variant value = 4;
inline bool IndexColumnScanOperator::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void IndexColumnScanOperator::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::opossum::proto::Variant& IndexColumnScanOperator::value() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::opossum::proto::Variant* IndexColumnScanOperator::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.IndexColumnScanOperator.value)
  return value_;
}
inline ::opossum::proto::Variant* IndexColumnScanOperator::release_value() {
  // @@protoc_insertion_point(field_release:opossum.proto.IndexColumnScanOperator.value)
  
  ::opossum::proto::Variant* temp = value_;
  value_ = NULL;
  return temp;
}
inline void IndexColumnScanOperator::set_allocated_value(::opossum::proto::Variant* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.IndexColumnScanOperator.value)
}

// optional .opossum.proto.Variant value2 = 5;
inline bool IndexColumnScanOperator::has_value2() const {
  return !_is_default_instance_ && value2_ != NULL;
}
inline void IndexColumnScanOperator::clear_value2() {
  if (GetArenaNoVirtual() == NULL && value2_ != NULL) delete value2_;
  value2_ = NULL;
}
inline const ::opossum::proto::Variant& IndexColumnScanOperator::value2() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.value2)
  return value2_ != NULL ? *value2_ : *default_instance_->value2_;
}
inline ::opossum::proto::Variant* IndexColumnScanOperator::mutable_value2() {
  
  if (value2_ == NULL) {
    value2_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.IndexColumnScanOperator.value2)
  return value2_;
}
inline ::opossum::proto::Variant* IndexColumnScanOperator::release_value2() {
  // @@protoc_insertion_point(field_release:opossum.proto.IndexColumnScanOperator.value2)
  
  ::opossum::proto::Variant* temp = value2_;
  value2_ = NULL;
  return temp;
}
inline void IndexColumnScanOperator::set_allocated_value2(::opossum::proto::Variant* value2) {
  delete value2_;
  value2_ = value2;
  if (value2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.IndexColumnScanOperator.value2)
}

// -------------------------------------------------------------------

// NestedLoopJoinOperator

// optional .opossum.proto.OperatorVariant left_operator = 1;
inline bool NestedLoopJoinOperator::has_left_operator() const {
  return !_is_default_instance_ && left_operator_ != NULL;
}
inline void NestedLoopJoinOperator::clear_left_operator() {
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& NestedLoopJoinOperator::left_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.left_operator)
  return left_operator_ != NULL ? *left_operator_ : *default_instance_->left_operator_;
}
inline ::opossum::proto::OperatorVariant* NestedLoopJoinOperator::mutable_left_operator() {
  
  if (left_operator_ == NULL) {
    left_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.left_operator)
  return left_operator_;
}
inline ::opossum::proto::OperatorVariant* NestedLoopJoinOperator::release_left_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.left_operator)
  
  ::opossum::proto::OperatorVariant* temp = left_operator_;
  left_operator_ = NULL;
  return temp;
}
inline void NestedLoopJoinOperator::set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator) {
  delete left_operator_;
  left_operator_ = left_operator;
  if (left_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.left_operator)
}

// optional .opossum.proto.OperatorVariant right_operator = 2;
inline bool NestedLoopJoinOperator::has_right_operator() const {
  return !_is_default_instance_ && right_operator_ != NULL;
}
inline void NestedLoopJoinOperator::clear_right_operator() {
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& NestedLoopJoinOperator::right_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.right_operator)
  return right_operator_ != NULL ? *right_operator_ : *default_instance_->right_operator_;
}
inline ::opossum::proto::OperatorVariant* NestedLoopJoinOperator::mutable_right_operator() {
  
  if (right_operator_ == NULL) {
    right_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.right_operator)
  return right_operator_;
}
inline ::opossum::proto::OperatorVariant* NestedLoopJoinOperator::release_right_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.right_operator)
  
  ::opossum::proto::OperatorVariant* temp = right_operator_;
  right_operator_ = NULL;
  return temp;
}
inline void NestedLoopJoinOperator::set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator) {
  delete right_operator_;
  right_operator_ = right_operator;
  if (right_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.right_operator)
}

// optional .opossum.proto.OptionalColumnID left_column_id = 3;
inline bool NestedLoopJoinOperator::has_left_column_id() const {
  return !_is_default_instance_ && left_column_id_ != NULL;
}
inline void NestedLoopJoinOperator::clear_left_column_id() {
  if (GetArenaNoVirtual() == NULL && left_column_id_ != NULL) delete left_column_id_;
  left_column_id_ = NULL;
}
inline const ::opossum::proto::OptionalColumnID& NestedLoopJoinOperator::left_column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.left_column_id)
  return left_column_id_ != NULL ? *left_column_id_ : *default_instance_->left_column_id_;
}
inline ::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::mutable_left_column_id() {
  
  if (left_column_id_ == NULL) {
    left_column_id_ = new ::opossum::proto::OptionalColumnID;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.left_column_id)
  return left_column_id_;
}
inline ::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::release_left_column_id() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.left_column_id)
  
  ::opossum::proto::OptionalColumnID* temp = left_column_id_;
  left_column_id_ = NULL;
  return temp;
}
inline void NestedLoopJoinOperator::set_allocated_left_column_id(::opossum::proto::OptionalColumnID* left_column_id) {
  delete left_column_id_;
  left_column_id_ = left_column_id;
  if (left_column_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.left_column_id)
}

// optional .opossum.proto.OptionalColumnID right_column_id = 4;
inline bool NestedLoopJoinOperator::has_right_column_id() const {
  return !_is_default_instance_ && right_column_id_ != NULL;
}
inline void NestedLoopJoinOperator::clear_right_column_id() {
  if (GetArenaNoVirtual() == NULL && right_column_id_ != NULL) delete right_column_id_;
  right_column_id_ = NULL;
}
inline const ::opossum::proto::OptionalColumnID& NestedLoopJoinOperator::right_column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.right_column_id)
  return right_column_id_ != NULL ? *right_column_id_ : *default_instance_->right_column_id_;
}
inline ::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::mutable_right_column_id() {
  
  if (right_column_id_ == NULL) {
    right_column_id_ = new ::opossum::proto::OptionalColumnID;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.right_column_id)
  return right_column_id_;
}
inline ::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::release_right_column_id() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.right_column_id)
  
  ::opossum::proto::OptionalColumnID* temp = right_column_id_;
  right_column_id_ = NULL;
  return temp;
}
inline void NestedLoopJoinOperator::set_allocated_right_column_id(::opossum::proto::OptionalColumnID* right_column_id) {
  delete right_column_id_;
  right_column_id_ = right_column_id;
  if (right_column_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.right_column_id)
}

// optional .opossum.proto.ScanType op = 5;
inline void NestedLoopJoinOperator::clear_op() {
  op_ = 0;
}
inline ::opossum::proto::ScanType NestedLoopJoinOperator::op() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.op)
  return static_cast< ::opossum::proto::ScanType >(op_);
}
inline void NestedLoopJoinOperator::set_op(::opossum::proto::ScanType value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.NestedLoopJoinOperator.op)
}

// optional .opossum.proto.NestedLoopJoinOperator.JoinMode mode = 6;
inline void NestedLoopJoinOperator::clear_mode() {
  mode_ = 0;
}
inline ::opossum::proto::NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::mode() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.mode)
  return static_cast< ::opossum::proto::NestedLoopJoinOperator_JoinMode >(mode_);
}
inline void NestedLoopJoinOperator::set_mode(::opossum::proto::NestedLoopJoinOperator_JoinMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.NestedLoopJoinOperator.mode)
}

// -------------------------------------------------------------------

// ProductOperator

// optional .opossum.proto.OperatorVariant left_operator = 1;
inline bool ProductOperator::has_left_operator() const {
  return !_is_default_instance_ && left_operator_ != NULL;
}
inline void ProductOperator::clear_left_operator() {
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& ProductOperator::left_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProductOperator.left_operator)
  return left_operator_ != NULL ? *left_operator_ : *default_instance_->left_operator_;
}
inline ::opossum::proto::OperatorVariant* ProductOperator::mutable_left_operator() {
  
  if (left_operator_ == NULL) {
    left_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ProductOperator.left_operator)
  return left_operator_;
}
inline ::opossum::proto::OperatorVariant* ProductOperator::release_left_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ProductOperator.left_operator)
  
  ::opossum::proto::OperatorVariant* temp = left_operator_;
  left_operator_ = NULL;
  return temp;
}
inline void ProductOperator::set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator) {
  delete left_operator_;
  left_operator_ = left_operator;
  if (left_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ProductOperator.left_operator)
}

// optional .opossum.proto.OperatorVariant right_operator = 2;
inline bool ProductOperator::has_right_operator() const {
  return !_is_default_instance_ && right_operator_ != NULL;
}
inline void ProductOperator::clear_right_operator() {
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& ProductOperator::right_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProductOperator.right_operator)
  return right_operator_ != NULL ? *right_operator_ : *default_instance_->right_operator_;
}
inline ::opossum::proto::OperatorVariant* ProductOperator::mutable_right_operator() {
  
  if (right_operator_ == NULL) {
    right_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ProductOperator.right_operator)
  return right_operator_;
}
inline ::opossum::proto::OperatorVariant* ProductOperator::release_right_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ProductOperator.right_operator)
  
  ::opossum::proto::OperatorVariant* temp = right_operator_;
  right_operator_ = NULL;
  return temp;
}
inline void ProductOperator::set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator) {
  delete right_operator_;
  right_operator_ = right_operator;
  if (right_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ProductOperator.right_operator)
}

// -------------------------------------------------------------------

// SortOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool SortOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void SortOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& SortOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* SortOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.SortOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* SortOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.SortOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void SortOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.SortOperator.input_operator)
}

// optional int32 column_id = 2;
inline void SortOperator::clear_column_id() {
  column_id_ = 0;
}
inline ::google::protobuf::int32 SortOperator::column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.column_id)
  return column_id_;
}
inline void SortOperator::set_column_id(::google::protobuf::int32 value) {
  
  column_id_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.SortOperator.column_id)
}

// optional .opossum.proto.SortOperator.OrderByMode order_by_mode = 3;
inline void SortOperator::clear_order_by_mode() {
  order_by_mode_ = 0;
}
inline ::opossum::proto::SortOperator_OrderByMode SortOperator::order_by_mode() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.order_by_mode)
  return static_cast< ::opossum::proto::SortOperator_OrderByMode >(order_by_mode_);
}
inline void SortOperator::set_order_by_mode(::opossum::proto::SortOperator_OrderByMode value) {
  
  order_by_mode_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.SortOperator.order_by_mode)
}

// optional int32 output_chunk_size = 4;
inline void SortOperator::clear_output_chunk_size() {
  output_chunk_size_ = 0;
}
inline ::google::protobuf::int32 SortOperator::output_chunk_size() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.output_chunk_size)
  return output_chunk_size_;
}
inline void SortOperator::set_output_chunk_size(::google::protobuf::int32 value) {
  
  output_chunk_size_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.SortOperator.output_chunk_size)
}

// -------------------------------------------------------------------

// UnionAllOperator

// optional .opossum.proto.OperatorVariant input_operator1 = 1;
inline bool UnionAllOperator::has_input_operator1() const {
  return !_is_default_instance_ && input_operator1_ != NULL;
}
inline void UnionAllOperator::clear_input_operator1() {
  if (GetArenaNoVirtual() == NULL && input_operator1_ != NULL) delete input_operator1_;
  input_operator1_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& UnionAllOperator::input_operator1() const {
  // @@protoc_insertion_point(field_get:opossum.proto.UnionAllOperator.input_operator1)
  return input_operator1_ != NULL ? *input_operator1_ : *default_instance_->input_operator1_;
}
inline ::opossum::proto::OperatorVariant* UnionAllOperator::mutable_input_operator1() {
  
  if (input_operator1_ == NULL) {
    input_operator1_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.UnionAllOperator.input_operator1)
  return input_operator1_;
}
inline ::opossum::proto::OperatorVariant* UnionAllOperator::release_input_operator1() {
  // @@protoc_insertion_point(field_release:opossum.proto.UnionAllOperator.input_operator1)
  
  ::opossum::proto::OperatorVariant* temp = input_operator1_;
  input_operator1_ = NULL;
  return temp;
}
inline void UnionAllOperator::set_allocated_input_operator1(::opossum::proto::OperatorVariant* input_operator1) {
  delete input_operator1_;
  input_operator1_ = input_operator1;
  if (input_operator1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.UnionAllOperator.input_operator1)
}

// optional .opossum.proto.OperatorVariant input_operator2 = 2;
inline bool UnionAllOperator::has_input_operator2() const {
  return !_is_default_instance_ && input_operator2_ != NULL;
}
inline void UnionAllOperator::clear_input_operator2() {
  if (GetArenaNoVirtual() == NULL && input_operator2_ != NULL) delete input_operator2_;
  input_operator2_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& UnionAllOperator::input_operator2() const {
  // @@protoc_insertion_point(field_get:opossum.proto.UnionAllOperator.input_operator2)
  return input_operator2_ != NULL ? *input_operator2_ : *default_instance_->input_operator2_;
}
inline ::opossum::proto::OperatorVariant* UnionAllOperator::mutable_input_operator2() {
  
  if (input_operator2_ == NULL) {
    input_operator2_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.UnionAllOperator.input_operator2)
  return input_operator2_;
}
inline ::opossum::proto::OperatorVariant* UnionAllOperator::release_input_operator2() {
  // @@protoc_insertion_point(field_release:opossum.proto.UnionAllOperator.input_operator2)
  
  ::opossum::proto::OperatorVariant* temp = input_operator2_;
  input_operator2_ = NULL;
  return temp;
}
inline void UnionAllOperator::set_allocated_input_operator2(::opossum::proto::OperatorVariant* input_operator2) {
  delete input_operator2_;
  input_operator2_ = input_operator2;
  if (input_operator2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.UnionAllOperator.input_operator2)
}

// -------------------------------------------------------------------

// ImportCsvOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool ImportCsvOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void ImportCsvOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& ImportCsvOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ImportCsvOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* ImportCsvOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ImportCsvOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* ImportCsvOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ImportCsvOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void ImportCsvOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ImportCsvOperator.input_operator)
}

// optional string directory = 2;
inline void ImportCsvOperator::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImportCsvOperator::directory() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ImportCsvOperator.directory)
  return directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportCsvOperator::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ImportCsvOperator.directory)
}
inline void ImportCsvOperator::set_directory(const char* value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ImportCsvOperator.directory)
}
inline void ImportCsvOperator::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ImportCsvOperator.directory)
}
inline ::std::string* ImportCsvOperator::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ImportCsvOperator.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportCsvOperator::release_directory() {
  // @@protoc_insertion_point(field_release:opossum.proto.ImportCsvOperator.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportCsvOperator::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ImportCsvOperator.directory)
}

// optional string filename = 3;
inline void ImportCsvOperator::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImportCsvOperator::filename() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ImportCsvOperator.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportCsvOperator::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ImportCsvOperator.filename)
}
inline void ImportCsvOperator::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ImportCsvOperator.filename)
}
inline void ImportCsvOperator::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ImportCsvOperator.filename)
}
inline ::std::string* ImportCsvOperator::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ImportCsvOperator.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportCsvOperator::release_filename() {
  // @@protoc_insertion_point(field_release:opossum.proto.ImportCsvOperator.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportCsvOperator::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ImportCsvOperator.filename)
}

// -------------------------------------------------------------------

// ExportCsvOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool ExportCsvOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void ExportCsvOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& ExportCsvOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportCsvOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* ExportCsvOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportCsvOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* ExportCsvOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportCsvOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void ExportCsvOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportCsvOperator.input_operator)
}

// optional string directory = 2;
inline void ExportCsvOperator::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportCsvOperator::directory() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportCsvOperator.directory)
  return directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportCsvOperator::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ExportCsvOperator.directory)
}
inline void ExportCsvOperator::set_directory(const char* value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ExportCsvOperator.directory)
}
inline void ExportCsvOperator::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ExportCsvOperator.directory)
}
inline ::std::string* ExportCsvOperator::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportCsvOperator.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportCsvOperator::release_directory() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportCsvOperator.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportCsvOperator::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportCsvOperator.directory)
}

// optional string filename = 3;
inline void ExportCsvOperator::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportCsvOperator::filename() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportCsvOperator.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportCsvOperator::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ExportCsvOperator.filename)
}
inline void ExportCsvOperator::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ExportCsvOperator.filename)
}
inline void ExportCsvOperator::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ExportCsvOperator.filename)
}
inline ::std::string* ExportCsvOperator::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportCsvOperator.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportCsvOperator::release_filename() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportCsvOperator.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportCsvOperator::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportCsvOperator.filename)
}

// -------------------------------------------------------------------

// ExportBinaryOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool ExportBinaryOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void ExportBinaryOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& ExportBinaryOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportBinaryOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* ExportBinaryOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportBinaryOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* ExportBinaryOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportBinaryOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void ExportBinaryOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportBinaryOperator.input_operator)
}

// optional string filename = 3;
inline void ExportBinaryOperator::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportBinaryOperator::filename() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportBinaryOperator.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportBinaryOperator::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ExportBinaryOperator.filename)
}
inline void ExportBinaryOperator::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ExportBinaryOperator.filename)
}
inline void ExportBinaryOperator::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ExportBinaryOperator.filename)
}
inline ::std::string* ExportBinaryOperator::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportBinaryOperator.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportBinaryOperator::release_filename() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportBinaryOperator.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportBinaryOperator::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportBinaryOperator.filename)
}

// -------------------------------------------------------------------

// PrintOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
inline bool PrintOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
inline void PrintOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& PrintOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.PrintOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
inline ::opossum::proto::OperatorVariant* PrintOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.PrintOperator.input_operator)
  return input_operator_;
}
inline ::opossum::proto::OperatorVariant* PrintOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.PrintOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
inline void PrintOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.PrintOperator.input_operator)
}

// -------------------------------------------------------------------

// DifferenceOperator

// optional .opossum.proto.OperatorVariant left_operator = 1;
inline bool DifferenceOperator::has_left_operator() const {
  return !_is_default_instance_ && left_operator_ != NULL;
}
inline void DifferenceOperator::clear_left_operator() {
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& DifferenceOperator::left_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.DifferenceOperator.left_operator)
  return left_operator_ != NULL ? *left_operator_ : *default_instance_->left_operator_;
}
inline ::opossum::proto::OperatorVariant* DifferenceOperator::mutable_left_operator() {
  
  if (left_operator_ == NULL) {
    left_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.DifferenceOperator.left_operator)
  return left_operator_;
}
inline ::opossum::proto::OperatorVariant* DifferenceOperator::release_left_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.DifferenceOperator.left_operator)
  
  ::opossum::proto::OperatorVariant* temp = left_operator_;
  left_operator_ = NULL;
  return temp;
}
inline void DifferenceOperator::set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator) {
  delete left_operator_;
  left_operator_ = left_operator;
  if (left_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.DifferenceOperator.left_operator)
}

// optional .opossum.proto.OperatorVariant right_operator = 2;
inline bool DifferenceOperator::has_right_operator() const {
  return !_is_default_instance_ && right_operator_ != NULL;
}
inline void DifferenceOperator::clear_right_operator() {
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}
inline const ::opossum::proto::OperatorVariant& DifferenceOperator::right_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.DifferenceOperator.right_operator)
  return right_operator_ != NULL ? *right_operator_ : *default_instance_->right_operator_;
}
inline ::opossum::proto::OperatorVariant* DifferenceOperator::mutable_right_operator() {
  
  if (right_operator_ == NULL) {
    right_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.DifferenceOperator.right_operator)
  return right_operator_;
}
inline ::opossum::proto::OperatorVariant* DifferenceOperator::release_right_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.DifferenceOperator.right_operator)
  
  ::opossum::proto::OperatorVariant* temp = right_operator_;
  right_operator_ = NULL;
  return temp;
}
inline void DifferenceOperator::set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator) {
  delete right_operator_;
  right_operator_ = right_operator;
  if (right_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.DifferenceOperator.right_operator)
}

// -------------------------------------------------------------------

// Response

// optional .opossum.proto.Table response_table = 1;
inline bool Response::has_response_table() const {
  return result_case() == kResponseTable;
}
inline void Response::set_has_response_table() {
  _oneof_case_[0] = kResponseTable;
}
inline void Response::clear_response_table() {
  if (has_response_table()) {
    delete result_.response_table_;
    clear_has_result();
  }
}
inline  const ::opossum::proto::Table& Response::response_table() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Response.response_table)
  return has_response_table()
      ? *result_.response_table_
      : ::opossum::proto::Table::default_instance();
}
inline ::opossum::proto::Table* Response::mutable_response_table() {
  if (!has_response_table()) {
    clear_result();
    set_has_response_table();
    result_.response_table_ = new ::opossum::proto::Table;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Response.response_table)
  return result_.response_table_;
}
inline ::opossum::proto::Table* Response::release_response_table() {
  // @@protoc_insertion_point(field_release:opossum.proto.Response.response_table)
  if (has_response_table()) {
    clear_has_result();
    ::opossum::proto::Table* temp = result_.response_table_;
    result_.response_table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_response_table(::opossum::proto::Table* response_table) {
  clear_result();
  if (response_table) {
    set_has_response_table();
    result_.response_table_ = response_table;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Response.response_table)
}

// optional string error = 2;
inline bool Response::has_error() const {
  return result_case() == kError;
}
inline void Response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Response::clear_error() {
  if (has_error()) {
    result_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_result();
  }
}
inline const ::std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Response.error)
  if (has_error()) {
    return result_.error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Response::set_error(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Response.error)
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.Response.error)
}
inline void Response::set_error(const char* value) {
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.Response.error)
}
inline void Response::set_error(const char* value, size_t size) {
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Response.error)
}
inline ::std::string* Response::mutable_error() {
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Response.error)
  return result_.error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_error() {
  // @@protoc_insertion_point(field_release:opossum.proto.Response.error)
  if (has_error()) {
    clear_has_result();
    return result_.error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_error(::std::string* error) {
  if (!has_error()) {
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_result();
  if (error != NULL) {
    set_has_error();
    result_.error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        error);
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Response.error)
}

inline bool Response::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void Response::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline Response::ResultCase Response::result_case() const {
  return Response::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Table

// repeated string column_type = 1;
inline int Table::column_type_size() const {
  return column_type_.size();
}
inline void Table::clear_column_type() {
  column_type_.Clear();
}
inline const ::std::string& Table::column_type(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Table.column_type)
  return column_type_.Get(index);
}
inline ::std::string* Table::mutable_column_type(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Table.column_type)
  return column_type_.Mutable(index);
}
inline void Table::set_column_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Table.column_type)
  column_type_.Mutable(index)->assign(value);
}
inline void Table::set_column_type(int index, const char* value) {
  column_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opossum.proto.Table.column_type)
}
inline void Table::set_column_type(int index, const char* value, size_t size) {
  column_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Table.column_type)
}
inline ::std::string* Table::add_column_type() {
  // @@protoc_insertion_point(field_add_mutable:opossum.proto.Table.column_type)
  return column_type_.Add();
}
inline void Table::add_column_type(const ::std::string& value) {
  column_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opossum.proto.Table.column_type)
}
inline void Table::add_column_type(const char* value) {
  column_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opossum.proto.Table.column_type)
}
inline void Table::add_column_type(const char* value, size_t size) {
  column_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opossum.proto.Table.column_type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Table::column_type() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Table.column_type)
  return column_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Table::mutable_column_type() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Table.column_type)
  return &column_type_;
}

// repeated string column_name = 2;
inline int Table::column_name_size() const {
  return column_name_.size();
}
inline void Table::clear_column_name() {
  column_name_.Clear();
}
inline const ::std::string& Table::column_name(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Table.column_name)
  return column_name_.Get(index);
}
inline ::std::string* Table::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Table.column_name)
  return column_name_.Mutable(index);
}
inline void Table::set_column_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Table.column_name)
  column_name_.Mutable(index)->assign(value);
}
inline void Table::set_column_name(int index, const char* value) {
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opossum.proto.Table.column_name)
}
inline void Table::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Table.column_name)
}
inline ::std::string* Table::add_column_name() {
  // @@protoc_insertion_point(field_add_mutable:opossum.proto.Table.column_name)
  return column_name_.Add();
}
inline void Table::add_column_name(const ::std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opossum.proto.Table.column_name)
}
inline void Table::add_column_name(const char* value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opossum.proto.Table.column_name)
}
inline void Table::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opossum.proto.Table.column_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Table::column_name() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Table.column_name)
  return column_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Table::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Table.column_name)
  return &column_name_;
}

// repeated .opossum.proto.Row row = 3;
inline int Table::row_size() const {
  return row_.size();
}
inline void Table::clear_row() {
  row_.Clear();
}
inline const ::opossum::proto::Row& Table::row(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Table.row)
  return row_.Get(index);
}
inline ::opossum::proto::Row* Table::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Table.row)
  return row_.Mutable(index);
}
inline ::opossum::proto::Row* Table::add_row() {
  // @@protoc_insertion_point(field_add:opossum.proto.Table.row)
  return row_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opossum::proto::Row >*
Table::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Table.row)
  return &row_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opossum::proto::Row >&
Table::row() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Table.row)
  return row_;
}

// -------------------------------------------------------------------

// Row

// repeated .opossum.proto.Variant value = 1;
inline int Row::value_size() const {
  return value_.size();
}
inline void Row::clear_value() {
  value_.Clear();
}
inline const ::opossum::proto::Variant& Row::value(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Row.value)
  return value_.Get(index);
}
inline ::opossum::proto::Variant* Row::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Row.value)
  return value_.Mutable(index);
}
inline ::opossum::proto::Variant* Row::add_value() {
  // @@protoc_insertion_point(field_add:opossum.proto.Row.value)
  return value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opossum::proto::Variant >*
Row::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Row.value)
  return &value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opossum::proto::Variant >&
Row::value() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Row.value)
  return value_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opossum

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opossum::proto::NestedLoopJoinOperator_JoinMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opossum::proto::NestedLoopJoinOperator_JoinMode>() {
  return ::opossum::proto::NestedLoopJoinOperator_JoinMode_descriptor();
}
template <> struct is_proto_enum< ::opossum::proto::SortOperator_OrderByMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opossum::proto::SortOperator_OrderByMode>() {
  return ::opossum::proto::SortOperator_OrderByMode_descriptor();
}
template <> struct is_proto_enum< ::opossum::proto::ScanType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opossum::proto::ScanType>() {
  return ::opossum::proto::ScanType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_opossum_2eproto__INCLUDED
