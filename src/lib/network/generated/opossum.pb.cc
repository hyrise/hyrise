// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opossum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "opossum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opossum {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Variant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Variant_reflection_ = NULL;
struct VariantOneofInstance {
  ::google::protobuf::int32 value_int_;
  float value_float_;
  ::google::protobuf::internal::ArenaStringPtr value_string_;
  double value_double_;
  ::google::protobuf::int64 value_long_;
}* Variant_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperatorVariant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperatorVariant_reflection_ = NULL;
struct OperatorVariantOneofInstance {
  const ::opossum::proto::GetTableOperator* get_table_;
  const ::opossum::proto::ProjectionOperator* projection_;
  const ::opossum::proto::TableScanOperator* table_scan_;
  const ::opossum::proto::ProductOperator* product_;
  const ::opossum::proto::SortOperator* sort_;
  const ::opossum::proto::UnionAllOperator* union_all_;
  const ::opossum::proto::ImportCsvOperator* import_csv_;
  const ::opossum::proto::PrintOperator* print_;
  const ::opossum::proto::DifferenceOperator* difference_;
  const ::opossum::proto::ExportCsvOperator* export_csv_;
  const ::opossum::proto::ExportBinaryOperator* export_binary_;
  const ::opossum::proto::IndexColumnScanOperator* index_column_scan_;
  const ::opossum::proto::NestedLoopJoinOperator* nested_loop_join_;
}* OperatorVariant_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* OptionalColumnID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionalColumnID_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjectionOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectionOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableScanOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableScanOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexColumnScanOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexColumnScanOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* NestedLoopJoinOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NestedLoopJoinOperator_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NestedLoopJoinOperator_JoinMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProductOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortOperator_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SortOperator_OrderByMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UnionAllOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnionAllOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportCsvOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportCsvOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportCsvOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportCsvOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportBinaryOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportBinaryOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* DifferenceOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DifferenceOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::opossum::proto::Table* response_table_;
  ::google::protobuf::internal::ArenaStringPtr error_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* Row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Row_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScanType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_opossum_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_opossum_2eproto() {
  protobuf_AddDesc_opossum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "opossum.proto");
  GOOGLE_CHECK(file != NULL);
  Variant_descriptor_ = file->message_type(0);
  static const int Variant_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Variant_default_oneof_instance_, value_int_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Variant_default_oneof_instance_, value_float_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Variant_default_oneof_instance_, value_string_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Variant_default_oneof_instance_, value_double_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Variant_default_oneof_instance_, value_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, variant_),
  };
  Variant_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Variant_descriptor_,
      Variant::default_instance_,
      Variant_offsets_,
      -1,
      -1,
      -1,
      Variant_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, _oneof_case_[0]),
      sizeof(Variant),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, _is_default_instance_));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, root_operator_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  OperatorVariant_descriptor_ = file->message_type(2);
  static const int OperatorVariant_offsets_[14] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, get_table_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, projection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, table_scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, product_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, sort_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, union_all_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, import_csv_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, print_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, difference_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, export_csv_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, export_binary_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, index_column_scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperatorVariant_default_oneof_instance_, nested_loop_join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorVariant, operator_),
  };
  OperatorVariant_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OperatorVariant_descriptor_,
      OperatorVariant::default_instance_,
      OperatorVariant_offsets_,
      -1,
      -1,
      -1,
      OperatorVariant_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorVariant, _oneof_case_[0]),
      sizeof(OperatorVariant),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorVariant, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorVariant, _is_default_instance_));
  OptionalColumnID_descriptor_ = file->message_type(3);
  static const int OptionalColumnID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalColumnID, value_),
  };
  OptionalColumnID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionalColumnID_descriptor_,
      OptionalColumnID::default_instance_,
      OptionalColumnID_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptionalColumnID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalColumnID, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalColumnID, _is_default_instance_));
  GetTableOperator_descriptor_ = file->message_type(4);
  static const int GetTableOperator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableOperator, table_name_),
  };
  GetTableOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTableOperator_descriptor_,
      GetTableOperator::default_instance_,
      GetTableOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetTableOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableOperator, _is_default_instance_));
  ProjectionOperator_descriptor_ = file->message_type(5);
  static const int ProjectionOperator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionOperator, input_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionOperator, column_id_),
  };
  ProjectionOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProjectionOperator_descriptor_,
      ProjectionOperator::default_instance_,
      ProjectionOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProjectionOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionOperator, _is_default_instance_));
  TableScanOperator_descriptor_ = file->message_type(6);
  static const int TableScanOperator_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableScanOperator, input_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableScanOperator, column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableScanOperator, filter_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableScanOperator, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableScanOperator, value2_),
  };
  TableScanOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableScanOperator_descriptor_,
      TableScanOperator::default_instance_,
      TableScanOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(TableScanOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableScanOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableScanOperator, _is_default_instance_));
  IndexColumnScanOperator_descriptor_ = file->message_type(7);
  static const int IndexColumnScanOperator_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexColumnScanOperator, input_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexColumnScanOperator, column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexColumnScanOperator, filter_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexColumnScanOperator, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexColumnScanOperator, value2_),
  };
  IndexColumnScanOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexColumnScanOperator_descriptor_,
      IndexColumnScanOperator::default_instance_,
      IndexColumnScanOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(IndexColumnScanOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexColumnScanOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexColumnScanOperator, _is_default_instance_));
  NestedLoopJoinOperator_descriptor_ = file->message_type(8);
  static const int NestedLoopJoinOperator_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, left_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, right_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, left_column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, right_column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, mode_),
  };
  NestedLoopJoinOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NestedLoopJoinOperator_descriptor_,
      NestedLoopJoinOperator::default_instance_,
      NestedLoopJoinOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(NestedLoopJoinOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedLoopJoinOperator, _is_default_instance_));
  NestedLoopJoinOperator_JoinMode_descriptor_ = NestedLoopJoinOperator_descriptor_->enum_type(0);
  ProductOperator_descriptor_ = file->message_type(9);
  static const int ProductOperator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductOperator, left_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductOperator, right_operator_),
  };
  ProductOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProductOperator_descriptor_,
      ProductOperator::default_instance_,
      ProductOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProductOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductOperator, _is_default_instance_));
  SortOperator_descriptor_ = file->message_type(10);
  static const int SortOperator_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortOperator, input_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortOperator, column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortOperator, order_by_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortOperator, output_chunk_size_),
  };
  SortOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SortOperator_descriptor_,
      SortOperator::default_instance_,
      SortOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(SortOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortOperator, _is_default_instance_));
  SortOperator_OrderByMode_descriptor_ = SortOperator_descriptor_->enum_type(0);
  UnionAllOperator_descriptor_ = file->message_type(11);
  static const int UnionAllOperator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnionAllOperator, input_operator1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnionAllOperator, input_operator2_),
  };
  UnionAllOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnionAllOperator_descriptor_,
      UnionAllOperator::default_instance_,
      UnionAllOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnionAllOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnionAllOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnionAllOperator, _is_default_instance_));
  ImportCsvOperator_descriptor_ = file->message_type(12);
  static const int ImportCsvOperator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCsvOperator, input_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCsvOperator, directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCsvOperator, filename_),
  };
  ImportCsvOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportCsvOperator_descriptor_,
      ImportCsvOperator::default_instance_,
      ImportCsvOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImportCsvOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCsvOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCsvOperator, _is_default_instance_));
  ExportCsvOperator_descriptor_ = file->message_type(13);
  static const int ExportCsvOperator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCsvOperator, input_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCsvOperator, directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCsvOperator, filename_),
  };
  ExportCsvOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportCsvOperator_descriptor_,
      ExportCsvOperator::default_instance_,
      ExportCsvOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExportCsvOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCsvOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCsvOperator, _is_default_instance_));
  ExportBinaryOperator_descriptor_ = file->message_type(14);
  static const int ExportBinaryOperator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportBinaryOperator, input_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportBinaryOperator, filename_),
  };
  ExportBinaryOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportBinaryOperator_descriptor_,
      ExportBinaryOperator::default_instance_,
      ExportBinaryOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExportBinaryOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportBinaryOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportBinaryOperator, _is_default_instance_));
  PrintOperator_descriptor_ = file->message_type(15);
  static const int PrintOperator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintOperator, input_operator_),
  };
  PrintOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrintOperator_descriptor_,
      PrintOperator::default_instance_,
      PrintOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrintOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintOperator, _is_default_instance_));
  DifferenceOperator_descriptor_ = file->message_type(16);
  static const int DifferenceOperator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceOperator, left_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceOperator, right_operator_),
  };
  DifferenceOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DifferenceOperator_descriptor_,
      DifferenceOperator::default_instance_,
      DifferenceOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(DifferenceOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceOperator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceOperator, _is_default_instance_));
  Response_descriptor_ = file->message_type(17);
  static const int Response_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, response_table_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, result_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Table_descriptor_ = file->message_type(18);
  static const int Table_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, column_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, row_),
  };
  Table_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_descriptor_,
      Table::default_instance_,
      Table_offsets_,
      -1,
      -1,
      -1,
      sizeof(Table),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _is_default_instance_));
  Row_descriptor_ = file->message_type(19);
  static const int Row_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, value_),
  };
  Row_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Row_descriptor_,
      Row::default_instance_,
      Row_offsets_,
      -1,
      -1,
      -1,
      sizeof(Row),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _is_default_instance_));
  ScanType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_opossum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Variant_descriptor_, &Variant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OperatorVariant_descriptor_, &OperatorVariant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionalColumnID_descriptor_, &OptionalColumnID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTableOperator_descriptor_, &GetTableOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProjectionOperator_descriptor_, &ProjectionOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableScanOperator_descriptor_, &TableScanOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexColumnScanOperator_descriptor_, &IndexColumnScanOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NestedLoopJoinOperator_descriptor_, &NestedLoopJoinOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProductOperator_descriptor_, &ProductOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SortOperator_descriptor_, &SortOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnionAllOperator_descriptor_, &UnionAllOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportCsvOperator_descriptor_, &ImportCsvOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportCsvOperator_descriptor_, &ExportCsvOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportBinaryOperator_descriptor_, &ExportBinaryOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrintOperator_descriptor_, &PrintOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DifferenceOperator_descriptor_, &DifferenceOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_descriptor_, &Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Row_descriptor_, &Row::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_opossum_2eproto() {
  delete Variant::default_instance_;
  delete Variant_default_oneof_instance_;
  delete Variant_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete OperatorVariant::default_instance_;
  delete OperatorVariant_default_oneof_instance_;
  delete OperatorVariant_reflection_;
  delete OptionalColumnID::default_instance_;
  delete OptionalColumnID_reflection_;
  delete GetTableOperator::default_instance_;
  delete GetTableOperator_reflection_;
  delete ProjectionOperator::default_instance_;
  delete ProjectionOperator_reflection_;
  delete TableScanOperator::default_instance_;
  delete TableScanOperator_reflection_;
  delete IndexColumnScanOperator::default_instance_;
  delete IndexColumnScanOperator_reflection_;
  delete NestedLoopJoinOperator::default_instance_;
  delete NestedLoopJoinOperator_reflection_;
  delete ProductOperator::default_instance_;
  delete ProductOperator_reflection_;
  delete SortOperator::default_instance_;
  delete SortOperator_reflection_;
  delete UnionAllOperator::default_instance_;
  delete UnionAllOperator_reflection_;
  delete ImportCsvOperator::default_instance_;
  delete ImportCsvOperator_reflection_;
  delete ExportCsvOperator::default_instance_;
  delete ExportCsvOperator_reflection_;
  delete ExportBinaryOperator::default_instance_;
  delete ExportBinaryOperator_reflection_;
  delete PrintOperator::default_instance_;
  delete PrintOperator_reflection_;
  delete DifferenceOperator::default_instance_;
  delete DifferenceOperator_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  delete Table::default_instance_;
  delete Table_reflection_;
  delete Row::default_instance_;
  delete Row_reflection_;
}

void protobuf_AddDesc_opossum_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_opossum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ropossum.proto\022\ropossum.proto\"\206\001\n\007Varia"
    "nt\022\023\n\tvalue_int\030\001 \001(\005H\000\022\025\n\013value_float\030\002"
    " \001(\002H\000\022\026\n\014value_string\030\003 \001(\tH\000\022\026\n\014value_"
    "double\030\004 \001(\001H\000\022\024\n\nvalue_long\030\005 \001(\003H\000B\t\n\007"
    "variant\"@\n\007Request\0225\n\rroot_operator\030\001 \001("
    "\0132\036.opossum.proto.OperatorVariant\"\370\005\n\017Op"
    "eratorVariant\0224\n\tget_table\030\001 \001(\0132\037.oposs"
    "um.proto.GetTableOperatorH\000\0227\n\nprojectio"
    "n\030\002 \001(\0132!.opossum.proto.ProjectionOperat"
    "orH\000\0226\n\ntable_scan\030\003 \001(\0132 .opossum.proto"
    ".TableScanOperatorH\000\0221\n\007product\030\004 \001(\0132\036."
    "opossum.proto.ProductOperatorH\000\022+\n\004sort\030"
    "\005 \001(\0132\033.opossum.proto.SortOperatorH\000\0224\n\t"
    "union_all\030\006 \001(\0132\037.opossum.proto.UnionAll"
    "OperatorH\000\0226\n\nimport_csv\030\007 \001(\0132 .opossum"
    ".proto.ImportCsvOperatorH\000\022-\n\005print\030\010 \001("
    "\0132\034.opossum.proto.PrintOperatorH\000\0227\n\ndif"
    "ference\030\t \001(\0132!.opossum.proto.Difference"
    "OperatorH\000\0226\n\nexport_csv\030\n \001(\0132 .opossum"
    ".proto.ExportCsvOperatorH\000\022<\n\rexport_bin"
    "ary\030\013 \001(\0132#.opossum.proto.ExportBinaryOp"
    "eratorH\000\022C\n\021index_column_scan\030\014 \001(\0132&.op"
    "ossum.proto.IndexColumnScanOperatorH\000\022A\n"
    "\020nested_loop_join\030\r \001(\0132%.opossum.proto."
    "NestedLoopJoinOperatorH\000B\n\n\010operator\"!\n\020"
    "OptionalColumnID\022\r\n\005value\030\001 \001(\005\"&\n\020GetTa"
    "bleOperator\022\022\n\ntable_name\030\001 \001(\t\"_\n\022Proje"
    "ctionOperator\0226\n\016input_operator\030\001 \001(\0132\036."
    "opossum.proto.OperatorVariant\022\021\n\tcolumn_"
    "id\030\002 \003(\005\"\337\001\n\021TableScanOperator\0226\n\016input_"
    "operator\030\001 \001(\0132\036.opossum.proto.OperatorV"
    "ariant\022\021\n\tcolumn_id\030\002 \001(\005\0220\n\017filter_oper"
    "ator\030\003 \001(\0162\027.opossum.proto.ScanType\022%\n\005v"
    "alue\030\004 \001(\0132\026.opossum.proto.Variant\022&\n\006va"
    "lue2\030\005 \001(\0132\026.opossum.proto.Variant\"\345\001\n\027I"
    "ndexColumnScanOperator\0226\n\016input_operator"
    "\030\001 \001(\0132\036.opossum.proto.OperatorVariant\022\021"
    "\n\tcolumn_id\030\002 \001(\005\0220\n\017filter_operator\030\003 \001"
    "(\0162\027.opossum.proto.ScanType\022%\n\005value\030\004 \001"
    "(\0132\026.opossum.proto.Variant\022&\n\006value2\030\005 \001"
    "(\0132\026.opossum.proto.Variant\"\266\003\n\026NestedLoo"
    "pJoinOperator\0225\n\rleft_operator\030\001 \001(\0132\036.o"
    "possum.proto.OperatorVariant\0226\n\016right_op"
    "erator\030\002 \001(\0132\036.opossum.proto.OperatorVar"
    "iant\0227\n\016left_column_id\030\003 \001(\0132\037.opossum.p"
    "roto.OptionalColumnID\0228\n\017right_column_id"
    "\030\004 \001(\0132\037.opossum.proto.OptionalColumnID\022"
    "#\n\002op\030\005 \001(\0162\027.opossum.proto.ScanType\022<\n\004"
    "mode\030\006 \001(\0162..opossum.proto.NestedLoopJoi"
    "nOperator.JoinMode\"W\n\010JoinMode\022\t\n\005Inner\020"
    "\000\022\010\n\004Left\020\001\022\t\n\005Right\020\002\022\t\n\005Outer\020\003\022\t\n\005Cro"
    "ss\020\004\022\013\n\007Natural\020\005\022\010\n\004Self\020\006\"\200\001\n\017ProductO"
    "perator\0225\n\rleft_operator\030\001 \001(\0132\036.opossum"
    ".proto.OperatorVariant\0226\n\016right_operator"
    "\030\002 \001(\0132\036.opossum.proto.OperatorVariant\"\342"
    "\001\n\014SortOperator\0226\n\016input_operator\030\001 \001(\0132"
    "\036.opossum.proto.OperatorVariant\022\021\n\tcolum"
    "n_id\030\002 \001(\005\022>\n\rorder_by_mode\030\003 \001(\0162\'.opos"
    "sum.proto.SortOperator.OrderByMode\022\031\n\021ou"
    "tput_chunk_size\030\004 \001(\005\",\n\013OrderByMode\022\r\n\t"
    "Ascending\020\000\022\016\n\nDescending\020\001\"\204\001\n\020UnionAll"
    "Operator\0227\n\017input_operator1\030\001 \001(\0132\036.opos"
    "sum.proto.OperatorVariant\0227\n\017input_opera"
    "tor2\030\002 \001(\0132\036.opossum.proto.OperatorVaria"
    "nt\"p\n\021ImportCsvOperator\0226\n\016input_operato"
    "r\030\001 \001(\0132\036.opossum.proto.OperatorVariant\022"
    "\021\n\tdirectory\030\002 \001(\t\022\020\n\010filename\030\003 \001(\t\"p\n\021"
    "ExportCsvOperator\0226\n\016input_operator\030\001 \001("
    "\0132\036.opossum.proto.OperatorVariant\022\021\n\tdir"
    "ectory\030\002 \001(\t\022\020\n\010filename\030\003 \001(\t\"`\n\024Export"
    "BinaryOperator\0226\n\016input_operator\030\001 \001(\0132\036"
    ".opossum.proto.OperatorVariant\022\020\n\010filena"
    "me\030\003 \001(\t\"G\n\rPrintOperator\0226\n\016input_opera"
    "tor\030\001 \001(\0132\036.opossum.proto.OperatorVarian"
    "t\"\203\001\n\022DifferenceOperator\0225\n\rleft_operato"
    "r\030\001 \001(\0132\036.opossum.proto.OperatorVariant\022"
    "6\n\016right_operator\030\002 \001(\0132\036.opossum.proto."
    "OperatorVariant\"U\n\010Response\022.\n\016response_"
    "table\030\001 \001(\0132\024.opossum.proto.TableH\000\022\017\n\005e"
    "rror\030\002 \001(\tH\000B\010\n\006result\"R\n\005Table\022\023\n\013colum"
    "n_type\030\001 \003(\t\022\023\n\013column_name\030\002 \003(\t\022\037\n\003row"
    "\030\003 \003(\0132\022.opossum.proto.Row\",\n\003Row\022%\n\005val"
    "ue\030\001 \003(\0132\026.opossum.proto.Variant*\226\001\n\010Sca"
    "nType\022\014\n\010OpEquals\020\000\022\017\n\013OpNotEquals\020\001\022\016\n\n"
    "OpLessThan\020\002\022\024\n\020OpLessThanEquals\020\003\022\021\n\rOp"
    "GreaterThan\020\004\022\027\n\023OpGreaterThanEquals\020\005\022\r"
    "\n\tOpBetween\020\006\022\n\n\006OpLike\020\0072L\n\016OpossumServ"
    "ice\022:\n\005Query\022\026.opossum.proto.Request\032\027.o"
    "possum.proto.Response\"\000b\006proto3", 3551);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "opossum.proto", &protobuf_RegisterTypes);
  Variant::default_instance_ = new Variant();
  Variant_default_oneof_instance_ = new VariantOneofInstance();
  Request::default_instance_ = new Request();
  OperatorVariant::default_instance_ = new OperatorVariant();
  OperatorVariant_default_oneof_instance_ = new OperatorVariantOneofInstance();
  OptionalColumnID::default_instance_ = new OptionalColumnID();
  GetTableOperator::default_instance_ = new GetTableOperator();
  ProjectionOperator::default_instance_ = new ProjectionOperator();
  TableScanOperator::default_instance_ = new TableScanOperator();
  IndexColumnScanOperator::default_instance_ = new IndexColumnScanOperator();
  NestedLoopJoinOperator::default_instance_ = new NestedLoopJoinOperator();
  ProductOperator::default_instance_ = new ProductOperator();
  SortOperator::default_instance_ = new SortOperator();
  UnionAllOperator::default_instance_ = new UnionAllOperator();
  ImportCsvOperator::default_instance_ = new ImportCsvOperator();
  ExportCsvOperator::default_instance_ = new ExportCsvOperator();
  ExportBinaryOperator::default_instance_ = new ExportBinaryOperator();
  PrintOperator::default_instance_ = new PrintOperator();
  DifferenceOperator::default_instance_ = new DifferenceOperator();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  Table::default_instance_ = new Table();
  Row::default_instance_ = new Row();
  Variant::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  OperatorVariant::default_instance_->InitAsDefaultInstance();
  OptionalColumnID::default_instance_->InitAsDefaultInstance();
  GetTableOperator::default_instance_->InitAsDefaultInstance();
  ProjectionOperator::default_instance_->InitAsDefaultInstance();
  TableScanOperator::default_instance_->InitAsDefaultInstance();
  IndexColumnScanOperator::default_instance_->InitAsDefaultInstance();
  NestedLoopJoinOperator::default_instance_->InitAsDefaultInstance();
  ProductOperator::default_instance_->InitAsDefaultInstance();
  SortOperator::default_instance_->InitAsDefaultInstance();
  UnionAllOperator::default_instance_->InitAsDefaultInstance();
  ImportCsvOperator::default_instance_->InitAsDefaultInstance();
  ExportCsvOperator::default_instance_->InitAsDefaultInstance();
  ExportBinaryOperator::default_instance_->InitAsDefaultInstance();
  PrintOperator::default_instance_->InitAsDefaultInstance();
  DifferenceOperator::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Table::default_instance_->InitAsDefaultInstance();
  Row::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_opossum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_opossum_2eproto {
  StaticDescriptorInitializer_opossum_2eproto() {
    protobuf_AddDesc_opossum_2eproto();
  }
} static_descriptor_initializer_opossum_2eproto_;
const ::google::protobuf::EnumDescriptor* ScanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanType_descriptor_;
}
bool ScanType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variant::kValueIntFieldNumber;
const int Variant::kValueFloatFieldNumber;
const int Variant::kValueStringFieldNumber;
const int Variant::kValueDoubleFieldNumber;
const int Variant::kValueLongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variant::Variant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.Variant)
}

void Variant::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Variant_default_oneof_instance_->value_int_ = 0;
  Variant_default_oneof_instance_->value_float_ = 0;
  Variant_default_oneof_instance_->value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Variant_default_oneof_instance_->value_double_ = 0;
  Variant_default_oneof_instance_->value_long_ = GOOGLE_LONGLONG(0);
}

Variant::Variant(const Variant& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.Variant)
}

void Variant::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_variant();
}

Variant::~Variant() {
  // @@protoc_insertion_point(destructor:opossum.proto.Variant)
  SharedDtor();
}

void Variant::SharedDtor() {
  if (has_variant()) {
    clear_variant();
  }
  if (this != default_instance_) {
  }
}

void Variant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Variant_descriptor_;
}

const Variant& Variant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

Variant* Variant::default_instance_ = NULL;

Variant* Variant::New(::google::protobuf::Arena* arena) const {
  Variant* n = new Variant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Variant::clear_variant() {
// @@protoc_insertion_point(one_of_clear_start:opossum.proto.Variant)
  switch(variant_case()) {
    case kValueInt: {
      // No need to clear
      break;
    }
    case kValueFloat: {
      // No need to clear
      break;
    }
    case kValueString: {
      variant_.value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValueDouble: {
      // No need to clear
      break;
    }
    case kValueLong: {
      // No need to clear
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VARIANT_NOT_SET;
}


void Variant::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.Variant)
  clear_variant();
}

bool Variant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.Variant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value_int = 1;
      case 1: {
        if (tag == 8) {
          clear_variant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &variant_.value_int_)));
          set_has_value_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value_float;
        break;
      }

      // optional float value_float = 2;
      case 2: {
        if (tag == 21) {
         parse_value_float:
          clear_variant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &variant_.value_float_)));
          set_has_value_float();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value_string;
        break;
      }

      // optional string value_string = 3;
      case 3: {
        if (tag == 26) {
         parse_value_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value_string().data(), this->value_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.Variant.value_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_value_double;
        break;
      }

      // optional double value_double = 4;
      case 4: {
        if (tag == 33) {
         parse_value_double:
          clear_variant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &variant_.value_double_)));
          set_has_value_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value_long;
        break;
      }

      // optional int64 value_long = 5;
      case 5: {
        if (tag == 40) {
         parse_value_long:
          clear_variant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &variant_.value_long_)));
          set_has_value_long();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.Variant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.Variant)
  return false;
#undef DO_
}

void Variant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.Variant)
  // optional int32 value_int = 1;
  if (has_value_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value_int(), output);
  }

  // optional float value_float = 2;
  if (has_value_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value_float(), output);
  }

  // optional string value_string = 3;
  if (has_value_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_string().data(), this->value_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Variant.value_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value_string(), output);
  }

  // optional double value_double = 4;
  if (has_value_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value_double(), output);
  }

  // optional int64 value_long = 5;
  if (has_value_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->value_long(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.Variant)
}

::google::protobuf::uint8* Variant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.Variant)
  // optional int32 value_int = 1;
  if (has_value_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value_int(), target);
  }

  // optional float value_float = 2;
  if (has_value_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value_float(), target);
  }

  // optional string value_string = 3;
  if (has_value_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_string().data(), this->value_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Variant.value_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value_string(), target);
  }

  // optional double value_double = 4;
  if (has_value_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value_double(), target);
  }

  // optional int64 value_long = 5;
  if (has_value_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->value_long(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.Variant)
  return target;
}

int Variant::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.Variant)
  int total_size = 0;

  switch (variant_case()) {
    // optional int32 value_int = 1;
    case kValueInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_int());
      break;
    }
    // optional float value_float = 2;
    case kValueFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional string value_string = 3;
    case kValueString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_string());
      break;
    }
    // optional double value_double = 4;
    case kValueDouble: {
      total_size += 1 + 8;
      break;
    }
    // optional int64 value_long = 5;
    case kValueLong: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value_long());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.Variant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Variant* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Variant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.Variant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.Variant)
    MergeFrom(*source);
  }
}

void Variant::MergeFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.Variant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.variant_case()) {
    case kValueInt: {
      set_value_int(from.value_int());
      break;
    }
    case kValueFloat: {
      set_value_float(from.value_float());
      break;
    }
    case kValueString: {
      set_value_string(from.value_string());
      break;
    }
    case kValueDouble: {
      set_value_double(from.value_double());
      break;
    }
    case kValueLong: {
      set_value_long(from.value_long());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
}

void Variant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variant::CopyFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variant::IsInitialized() const {

  return true;
}

void Variant::Swap(Variant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Variant::InternalSwap(Variant* other) {
  std::swap(variant_, other->variant_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Variant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Variant_descriptor_;
  metadata.reflection = Variant_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Variant

// optional int32 value_int = 1;
bool Variant::has_value_int() const {
  return variant_case() == kValueInt;
}
void Variant::set_has_value_int() {
  _oneof_case_[0] = kValueInt;
}
void Variant::clear_value_int() {
  if (has_value_int()) {
    variant_.value_int_ = 0;
    clear_has_variant();
  }
}
 ::google::protobuf::int32 Variant::value_int() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_int)
  if (has_value_int()) {
    return variant_.value_int_;
  }
  return 0;
}
 void Variant::set_value_int(::google::protobuf::int32 value) {
  if (!has_value_int()) {
    clear_variant();
    set_has_value_int();
  }
  variant_.value_int_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_int)
}

// optional float value_float = 2;
bool Variant::has_value_float() const {
  return variant_case() == kValueFloat;
}
void Variant::set_has_value_float() {
  _oneof_case_[0] = kValueFloat;
}
void Variant::clear_value_float() {
  if (has_value_float()) {
    variant_.value_float_ = 0;
    clear_has_variant();
  }
}
 float Variant::value_float() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_float)
  if (has_value_float()) {
    return variant_.value_float_;
  }
  return 0;
}
 void Variant::set_value_float(float value) {
  if (!has_value_float()) {
    clear_variant();
    set_has_value_float();
  }
  variant_.value_float_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_float)
}

// optional string value_string = 3;
bool Variant::has_value_string() const {
  return variant_case() == kValueString;
}
void Variant::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
void Variant::clear_value_string() {
  if (has_value_string()) {
    variant_.value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_variant();
  }
}
 const ::std::string& Variant::value_string() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_string)
  if (has_value_string()) {
    return variant_.value_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Variant::set_value_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_string)
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  variant_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_string)
}
 void Variant::set_value_string(const char* value) {
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  variant_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.Variant.value_string)
}
 void Variant::set_value_string(const char* value, size_t size) {
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  variant_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Variant.value_string)
}
 ::std::string* Variant::mutable_value_string() {
  if (!has_value_string()) {
    clear_variant();
    set_has_value_string();
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Variant.value_string)
  return variant_.value_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Variant::release_value_string() {
  // @@protoc_insertion_point(field_release:opossum.proto.Variant.value_string)
  if (has_value_string()) {
    clear_has_variant();
    return variant_.value_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Variant::set_allocated_value_string(::std::string* value_string) {
  if (!has_value_string()) {
    variant_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_variant();
  if (value_string != NULL) {
    set_has_value_string();
    variant_.value_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value_string);
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Variant.value_string)
}

// optional double value_double = 4;
bool Variant::has_value_double() const {
  return variant_case() == kValueDouble;
}
void Variant::set_has_value_double() {
  _oneof_case_[0] = kValueDouble;
}
void Variant::clear_value_double() {
  if (has_value_double()) {
    variant_.value_double_ = 0;
    clear_has_variant();
  }
}
 double Variant::value_double() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_double)
  if (has_value_double()) {
    return variant_.value_double_;
  }
  return 0;
}
 void Variant::set_value_double(double value) {
  if (!has_value_double()) {
    clear_variant();
    set_has_value_double();
  }
  variant_.value_double_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_double)
}

// optional int64 value_long = 5;
bool Variant::has_value_long() const {
  return variant_case() == kValueLong;
}
void Variant::set_has_value_long() {
  _oneof_case_[0] = kValueLong;
}
void Variant::clear_value_long() {
  if (has_value_long()) {
    variant_.value_long_ = GOOGLE_LONGLONG(0);
    clear_has_variant();
  }
}
 ::google::protobuf::int64 Variant::value_long() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Variant.value_long)
  if (has_value_long()) {
    return variant_.value_long_;
  }
  return GOOGLE_LONGLONG(0);
}
 void Variant::set_value_long(::google::protobuf::int64 value) {
  if (!has_value_long()) {
    clear_variant();
    set_has_value_long();
  }
  variant_.value_long_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.Variant.value_long)
}

bool Variant::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
void Variant::clear_has_variant() {
  _oneof_case_[0] = VARIANT_NOT_SET;
}
Variant::VariantCase Variant::variant_case() const {
  return Variant::VariantCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kRootOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  root_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  root_operator_ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:opossum.proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete root_operator_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.Request)
  if (GetArenaNoVirtual() == NULL && root_operator_ != NULL) delete root_operator_;
  root_operator_ = NULL;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant root_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.Request)
  // optional .opossum.proto.OperatorVariant root_operator = 1;
  if (this->has_root_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->root_operator_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.Request)
  // optional .opossum.proto.OperatorVariant root_operator = 1;
  if (this->has_root_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->root_operator_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.Request)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant root_operator = 1;
  if (this->has_root_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->root_operator_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_root_operator()) {
    mutable_root_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.root_operator());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(root_operator_, other->root_operator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .opossum.proto.OperatorVariant root_operator = 1;
bool Request::has_root_operator() const {
  return !_is_default_instance_ && root_operator_ != NULL;
}
void Request::clear_root_operator() {
  if (GetArenaNoVirtual() == NULL && root_operator_ != NULL) delete root_operator_;
  root_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& Request::root_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Request.root_operator)
  return root_operator_ != NULL ? *root_operator_ : *default_instance_->root_operator_;
}
::opossum::proto::OperatorVariant* Request::mutable_root_operator() {
  
  if (root_operator_ == NULL) {
    root_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Request.root_operator)
  return root_operator_;
}
::opossum::proto::OperatorVariant* Request::release_root_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.Request.root_operator)
  
  ::opossum::proto::OperatorVariant* temp = root_operator_;
  root_operator_ = NULL;
  return temp;
}
void Request::set_allocated_root_operator(::opossum::proto::OperatorVariant* root_operator) {
  delete root_operator_;
  root_operator_ = root_operator;
  if (root_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Request.root_operator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatorVariant::kGetTableFieldNumber;
const int OperatorVariant::kProjectionFieldNumber;
const int OperatorVariant::kTableScanFieldNumber;
const int OperatorVariant::kProductFieldNumber;
const int OperatorVariant::kSortFieldNumber;
const int OperatorVariant::kUnionAllFieldNumber;
const int OperatorVariant::kImportCsvFieldNumber;
const int OperatorVariant::kPrintFieldNumber;
const int OperatorVariant::kDifferenceFieldNumber;
const int OperatorVariant::kExportCsvFieldNumber;
const int OperatorVariant::kExportBinaryFieldNumber;
const int OperatorVariant::kIndexColumnScanFieldNumber;
const int OperatorVariant::kNestedLoopJoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatorVariant::OperatorVariant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.OperatorVariant)
}

void OperatorVariant::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  OperatorVariant_default_oneof_instance_->get_table_ = const_cast< ::opossum::proto::GetTableOperator*>(&::opossum::proto::GetTableOperator::default_instance());
  OperatorVariant_default_oneof_instance_->projection_ = const_cast< ::opossum::proto::ProjectionOperator*>(&::opossum::proto::ProjectionOperator::default_instance());
  OperatorVariant_default_oneof_instance_->table_scan_ = const_cast< ::opossum::proto::TableScanOperator*>(&::opossum::proto::TableScanOperator::default_instance());
  OperatorVariant_default_oneof_instance_->product_ = const_cast< ::opossum::proto::ProductOperator*>(&::opossum::proto::ProductOperator::default_instance());
  OperatorVariant_default_oneof_instance_->sort_ = const_cast< ::opossum::proto::SortOperator*>(&::opossum::proto::SortOperator::default_instance());
  OperatorVariant_default_oneof_instance_->union_all_ = const_cast< ::opossum::proto::UnionAllOperator*>(&::opossum::proto::UnionAllOperator::default_instance());
  OperatorVariant_default_oneof_instance_->import_csv_ = const_cast< ::opossum::proto::ImportCsvOperator*>(&::opossum::proto::ImportCsvOperator::default_instance());
  OperatorVariant_default_oneof_instance_->print_ = const_cast< ::opossum::proto::PrintOperator*>(&::opossum::proto::PrintOperator::default_instance());
  OperatorVariant_default_oneof_instance_->difference_ = const_cast< ::opossum::proto::DifferenceOperator*>(&::opossum::proto::DifferenceOperator::default_instance());
  OperatorVariant_default_oneof_instance_->export_csv_ = const_cast< ::opossum::proto::ExportCsvOperator*>(&::opossum::proto::ExportCsvOperator::default_instance());
  OperatorVariant_default_oneof_instance_->export_binary_ = const_cast< ::opossum::proto::ExportBinaryOperator*>(&::opossum::proto::ExportBinaryOperator::default_instance());
  OperatorVariant_default_oneof_instance_->index_column_scan_ = const_cast< ::opossum::proto::IndexColumnScanOperator*>(&::opossum::proto::IndexColumnScanOperator::default_instance());
  OperatorVariant_default_oneof_instance_->nested_loop_join_ = const_cast< ::opossum::proto::NestedLoopJoinOperator*>(&::opossum::proto::NestedLoopJoinOperator::default_instance());
}

OperatorVariant::OperatorVariant(const OperatorVariant& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.OperatorVariant)
}

void OperatorVariant::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_operator();
}

OperatorVariant::~OperatorVariant() {
  // @@protoc_insertion_point(destructor:opossum.proto.OperatorVariant)
  SharedDtor();
}

void OperatorVariant::SharedDtor() {
  if (has_operator()) {
    clear_operator();
  }
  if (this != default_instance_) {
  }
}

void OperatorVariant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperatorVariant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperatorVariant_descriptor_;
}

const OperatorVariant& OperatorVariant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

OperatorVariant* OperatorVariant::default_instance_ = NULL;

OperatorVariant* OperatorVariant::New(::google::protobuf::Arena* arena) const {
  OperatorVariant* n = new OperatorVariant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperatorVariant::clear_operator() {
// @@protoc_insertion_point(one_of_clear_start:opossum.proto.OperatorVariant)
  switch(operator_case()) {
    case kGetTable: {
      delete operator_.get_table_;
      break;
    }
    case kProjection: {
      delete operator_.projection_;
      break;
    }
    case kTableScan: {
      delete operator_.table_scan_;
      break;
    }
    case kProduct: {
      delete operator_.product_;
      break;
    }
    case kSort: {
      delete operator_.sort_;
      break;
    }
    case kUnionAll: {
      delete operator_.union_all_;
      break;
    }
    case kImportCsv: {
      delete operator_.import_csv_;
      break;
    }
    case kPrint: {
      delete operator_.print_;
      break;
    }
    case kDifference: {
      delete operator_.difference_;
      break;
    }
    case kExportCsv: {
      delete operator_.export_csv_;
      break;
    }
    case kExportBinary: {
      delete operator_.export_binary_;
      break;
    }
    case kIndexColumnScan: {
      delete operator_.index_column_scan_;
      break;
    }
    case kNestedLoopJoin: {
      delete operator_.nested_loop_join_;
      break;
    }
    case OPERATOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATOR_NOT_SET;
}


void OperatorVariant::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.OperatorVariant)
  clear_operator();
}

bool OperatorVariant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.OperatorVariant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.GetTableOperator get_table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_projection;
        break;
      }

      // optional .opossum.proto.ProjectionOperator projection = 2;
      case 2: {
        if (tag == 18) {
         parse_projection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table_scan;
        break;
      }

      // optional .opossum.proto.TableScanOperator table_scan = 3;
      case 3: {
        if (tag == 26) {
         parse_table_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_product;
        break;
      }

      // optional .opossum.proto.ProductOperator product = 4;
      case 4: {
        if (tag == 34) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sort;
        break;
      }

      // optional .opossum.proto.SortOperator sort = 5;
      case 5: {
        if (tag == 42) {
         parse_sort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sort()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_union_all;
        break;
      }

      // optional .opossum.proto.UnionAllOperator union_all = 6;
      case 6: {
        if (tag == 50) {
         parse_union_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_union_all()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_import_csv;
        break;
      }

      // optional .opossum.proto.ImportCsvOperator import_csv = 7;
      case 7: {
        if (tag == 58) {
         parse_import_csv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_import_csv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_print;
        break;
      }

      // optional .opossum.proto.PrintOperator print = 8;
      case 8: {
        if (tag == 66) {
         parse_print:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_print()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_difference;
        break;
      }

      // optional .opossum.proto.DifferenceOperator difference = 9;
      case 9: {
        if (tag == 74) {
         parse_difference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_difference()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_export_csv;
        break;
      }

      // optional .opossum.proto.ExportCsvOperator export_csv = 10;
      case 10: {
        if (tag == 82) {
         parse_export_csv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_export_csv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_export_binary;
        break;
      }

      // optional .opossum.proto.ExportBinaryOperator export_binary = 11;
      case 11: {
        if (tag == 90) {
         parse_export_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_export_binary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_index_column_scan;
        break;
      }

      // optional .opossum.proto.IndexColumnScanOperator index_column_scan = 12;
      case 12: {
        if (tag == 98) {
         parse_index_column_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_column_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_nested_loop_join;
        break;
      }

      // optional .opossum.proto.NestedLoopJoinOperator nested_loop_join = 13;
      case 13: {
        if (tag == 106) {
         parse_nested_loop_join:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nested_loop_join()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.OperatorVariant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.OperatorVariant)
  return false;
#undef DO_
}

void OperatorVariant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.OperatorVariant)
  // optional .opossum.proto.GetTableOperator get_table = 1;
  if (has_get_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *operator_.get_table_, output);
  }

  // optional .opossum.proto.ProjectionOperator projection = 2;
  if (has_projection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *operator_.projection_, output);
  }

  // optional .opossum.proto.TableScanOperator table_scan = 3;
  if (has_table_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *operator_.table_scan_, output);
  }

  // optional .opossum.proto.ProductOperator product = 4;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *operator_.product_, output);
  }

  // optional .opossum.proto.SortOperator sort = 5;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *operator_.sort_, output);
  }

  // optional .opossum.proto.UnionAllOperator union_all = 6;
  if (has_union_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *operator_.union_all_, output);
  }

  // optional .opossum.proto.ImportCsvOperator import_csv = 7;
  if (has_import_csv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *operator_.import_csv_, output);
  }

  // optional .opossum.proto.PrintOperator print = 8;
  if (has_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *operator_.print_, output);
  }

  // optional .opossum.proto.DifferenceOperator difference = 9;
  if (has_difference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *operator_.difference_, output);
  }

  // optional .opossum.proto.ExportCsvOperator export_csv = 10;
  if (has_export_csv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *operator_.export_csv_, output);
  }

  // optional .opossum.proto.ExportBinaryOperator export_binary = 11;
  if (has_export_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *operator_.export_binary_, output);
  }

  // optional .opossum.proto.IndexColumnScanOperator index_column_scan = 12;
  if (has_index_column_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *operator_.index_column_scan_, output);
  }

  // optional .opossum.proto.NestedLoopJoinOperator nested_loop_join = 13;
  if (has_nested_loop_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *operator_.nested_loop_join_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.OperatorVariant)
}

::google::protobuf::uint8* OperatorVariant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.OperatorVariant)
  // optional .opossum.proto.GetTableOperator get_table = 1;
  if (has_get_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *operator_.get_table_, false, target);
  }

  // optional .opossum.proto.ProjectionOperator projection = 2;
  if (has_projection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *operator_.projection_, false, target);
  }

  // optional .opossum.proto.TableScanOperator table_scan = 3;
  if (has_table_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *operator_.table_scan_, false, target);
  }

  // optional .opossum.proto.ProductOperator product = 4;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *operator_.product_, false, target);
  }

  // optional .opossum.proto.SortOperator sort = 5;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *operator_.sort_, false, target);
  }

  // optional .opossum.proto.UnionAllOperator union_all = 6;
  if (has_union_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *operator_.union_all_, false, target);
  }

  // optional .opossum.proto.ImportCsvOperator import_csv = 7;
  if (has_import_csv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *operator_.import_csv_, false, target);
  }

  // optional .opossum.proto.PrintOperator print = 8;
  if (has_print()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *operator_.print_, false, target);
  }

  // optional .opossum.proto.DifferenceOperator difference = 9;
  if (has_difference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *operator_.difference_, false, target);
  }

  // optional .opossum.proto.ExportCsvOperator export_csv = 10;
  if (has_export_csv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *operator_.export_csv_, false, target);
  }

  // optional .opossum.proto.ExportBinaryOperator export_binary = 11;
  if (has_export_binary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *operator_.export_binary_, false, target);
  }

  // optional .opossum.proto.IndexColumnScanOperator index_column_scan = 12;
  if (has_index_column_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *operator_.index_column_scan_, false, target);
  }

  // optional .opossum.proto.NestedLoopJoinOperator nested_loop_join = 13;
  if (has_nested_loop_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *operator_.nested_loop_join_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.OperatorVariant)
  return target;
}

int OperatorVariant::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.OperatorVariant)
  int total_size = 0;

  switch (operator_case()) {
    // optional .opossum.proto.GetTableOperator get_table = 1;
    case kGetTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.get_table_);
      break;
    }
    // optional .opossum.proto.ProjectionOperator projection = 2;
    case kProjection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.projection_);
      break;
    }
    // optional .opossum.proto.TableScanOperator table_scan = 3;
    case kTableScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.table_scan_);
      break;
    }
    // optional .opossum.proto.ProductOperator product = 4;
    case kProduct: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.product_);
      break;
    }
    // optional .opossum.proto.SortOperator sort = 5;
    case kSort: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.sort_);
      break;
    }
    // optional .opossum.proto.UnionAllOperator union_all = 6;
    case kUnionAll: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.union_all_);
      break;
    }
    // optional .opossum.proto.ImportCsvOperator import_csv = 7;
    case kImportCsv: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.import_csv_);
      break;
    }
    // optional .opossum.proto.PrintOperator print = 8;
    case kPrint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.print_);
      break;
    }
    // optional .opossum.proto.DifferenceOperator difference = 9;
    case kDifference: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.difference_);
      break;
    }
    // optional .opossum.proto.ExportCsvOperator export_csv = 10;
    case kExportCsv: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.export_csv_);
      break;
    }
    // optional .opossum.proto.ExportBinaryOperator export_binary = 11;
    case kExportBinary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.export_binary_);
      break;
    }
    // optional .opossum.proto.IndexColumnScanOperator index_column_scan = 12;
    case kIndexColumnScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.index_column_scan_);
      break;
    }
    // optional .opossum.proto.NestedLoopJoinOperator nested_loop_join = 13;
    case kNestedLoopJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operator_.nested_loop_join_);
      break;
    }
    case OPERATOR_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatorVariant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.OperatorVariant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OperatorVariant* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatorVariant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.OperatorVariant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.OperatorVariant)
    MergeFrom(*source);
  }
}

void OperatorVariant::MergeFrom(const OperatorVariant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.OperatorVariant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.operator_case()) {
    case kGetTable: {
      mutable_get_table()->::opossum::proto::GetTableOperator::MergeFrom(from.get_table());
      break;
    }
    case kProjection: {
      mutable_projection()->::opossum::proto::ProjectionOperator::MergeFrom(from.projection());
      break;
    }
    case kTableScan: {
      mutable_table_scan()->::opossum::proto::TableScanOperator::MergeFrom(from.table_scan());
      break;
    }
    case kProduct: {
      mutable_product()->::opossum::proto::ProductOperator::MergeFrom(from.product());
      break;
    }
    case kSort: {
      mutable_sort()->::opossum::proto::SortOperator::MergeFrom(from.sort());
      break;
    }
    case kUnionAll: {
      mutable_union_all()->::opossum::proto::UnionAllOperator::MergeFrom(from.union_all());
      break;
    }
    case kImportCsv: {
      mutable_import_csv()->::opossum::proto::ImportCsvOperator::MergeFrom(from.import_csv());
      break;
    }
    case kPrint: {
      mutable_print()->::opossum::proto::PrintOperator::MergeFrom(from.print());
      break;
    }
    case kDifference: {
      mutable_difference()->::opossum::proto::DifferenceOperator::MergeFrom(from.difference());
      break;
    }
    case kExportCsv: {
      mutable_export_csv()->::opossum::proto::ExportCsvOperator::MergeFrom(from.export_csv());
      break;
    }
    case kExportBinary: {
      mutable_export_binary()->::opossum::proto::ExportBinaryOperator::MergeFrom(from.export_binary());
      break;
    }
    case kIndexColumnScan: {
      mutable_index_column_scan()->::opossum::proto::IndexColumnScanOperator::MergeFrom(from.index_column_scan());
      break;
    }
    case kNestedLoopJoin: {
      mutable_nested_loop_join()->::opossum::proto::NestedLoopJoinOperator::MergeFrom(from.nested_loop_join());
      break;
    }
    case OPERATOR_NOT_SET: {
      break;
    }
  }
}

void OperatorVariant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.OperatorVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorVariant::CopyFrom(const OperatorVariant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.OperatorVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorVariant::IsInitialized() const {

  return true;
}

void OperatorVariant::Swap(OperatorVariant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatorVariant::InternalSwap(OperatorVariant* other) {
  std::swap(operator_, other->operator_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperatorVariant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperatorVariant_descriptor_;
  metadata.reflection = OperatorVariant_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperatorVariant

// optional .opossum.proto.GetTableOperator get_table = 1;
bool OperatorVariant::has_get_table() const {
  return operator_case() == kGetTable;
}
void OperatorVariant::set_has_get_table() {
  _oneof_case_[0] = kGetTable;
}
void OperatorVariant::clear_get_table() {
  if (has_get_table()) {
    delete operator_.get_table_;
    clear_has_operator();
  }
}
 const ::opossum::proto::GetTableOperator& OperatorVariant::get_table() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.get_table)
  return has_get_table()
      ? *operator_.get_table_
      : ::opossum::proto::GetTableOperator::default_instance();
}
::opossum::proto::GetTableOperator* OperatorVariant::mutable_get_table() {
  if (!has_get_table()) {
    clear_operator();
    set_has_get_table();
    operator_.get_table_ = new ::opossum::proto::GetTableOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.get_table)
  return operator_.get_table_;
}
::opossum::proto::GetTableOperator* OperatorVariant::release_get_table() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.get_table)
  if (has_get_table()) {
    clear_has_operator();
    ::opossum::proto::GetTableOperator* temp = operator_.get_table_;
    operator_.get_table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_get_table(::opossum::proto::GetTableOperator* get_table) {
  clear_operator();
  if (get_table) {
    set_has_get_table();
    operator_.get_table_ = get_table;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.get_table)
}

// optional .opossum.proto.ProjectionOperator projection = 2;
bool OperatorVariant::has_projection() const {
  return operator_case() == kProjection;
}
void OperatorVariant::set_has_projection() {
  _oneof_case_[0] = kProjection;
}
void OperatorVariant::clear_projection() {
  if (has_projection()) {
    delete operator_.projection_;
    clear_has_operator();
  }
}
 const ::opossum::proto::ProjectionOperator& OperatorVariant::projection() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.projection)
  return has_projection()
      ? *operator_.projection_
      : ::opossum::proto::ProjectionOperator::default_instance();
}
::opossum::proto::ProjectionOperator* OperatorVariant::mutable_projection() {
  if (!has_projection()) {
    clear_operator();
    set_has_projection();
    operator_.projection_ = new ::opossum::proto::ProjectionOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.projection)
  return operator_.projection_;
}
::opossum::proto::ProjectionOperator* OperatorVariant::release_projection() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.projection)
  if (has_projection()) {
    clear_has_operator();
    ::opossum::proto::ProjectionOperator* temp = operator_.projection_;
    operator_.projection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_projection(::opossum::proto::ProjectionOperator* projection) {
  clear_operator();
  if (projection) {
    set_has_projection();
    operator_.projection_ = projection;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.projection)
}

// optional .opossum.proto.TableScanOperator table_scan = 3;
bool OperatorVariant::has_table_scan() const {
  return operator_case() == kTableScan;
}
void OperatorVariant::set_has_table_scan() {
  _oneof_case_[0] = kTableScan;
}
void OperatorVariant::clear_table_scan() {
  if (has_table_scan()) {
    delete operator_.table_scan_;
    clear_has_operator();
  }
}
 const ::opossum::proto::TableScanOperator& OperatorVariant::table_scan() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.table_scan)
  return has_table_scan()
      ? *operator_.table_scan_
      : ::opossum::proto::TableScanOperator::default_instance();
}
::opossum::proto::TableScanOperator* OperatorVariant::mutable_table_scan() {
  if (!has_table_scan()) {
    clear_operator();
    set_has_table_scan();
    operator_.table_scan_ = new ::opossum::proto::TableScanOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.table_scan)
  return operator_.table_scan_;
}
::opossum::proto::TableScanOperator* OperatorVariant::release_table_scan() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.table_scan)
  if (has_table_scan()) {
    clear_has_operator();
    ::opossum::proto::TableScanOperator* temp = operator_.table_scan_;
    operator_.table_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_table_scan(::opossum::proto::TableScanOperator* table_scan) {
  clear_operator();
  if (table_scan) {
    set_has_table_scan();
    operator_.table_scan_ = table_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.table_scan)
}

// optional .opossum.proto.ProductOperator product = 4;
bool OperatorVariant::has_product() const {
  return operator_case() == kProduct;
}
void OperatorVariant::set_has_product() {
  _oneof_case_[0] = kProduct;
}
void OperatorVariant::clear_product() {
  if (has_product()) {
    delete operator_.product_;
    clear_has_operator();
  }
}
 const ::opossum::proto::ProductOperator& OperatorVariant::product() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.product)
  return has_product()
      ? *operator_.product_
      : ::opossum::proto::ProductOperator::default_instance();
}
::opossum::proto::ProductOperator* OperatorVariant::mutable_product() {
  if (!has_product()) {
    clear_operator();
    set_has_product();
    operator_.product_ = new ::opossum::proto::ProductOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.product)
  return operator_.product_;
}
::opossum::proto::ProductOperator* OperatorVariant::release_product() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.product)
  if (has_product()) {
    clear_has_operator();
    ::opossum::proto::ProductOperator* temp = operator_.product_;
    operator_.product_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_product(::opossum::proto::ProductOperator* product) {
  clear_operator();
  if (product) {
    set_has_product();
    operator_.product_ = product;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.product)
}

// optional .opossum.proto.SortOperator sort = 5;
bool OperatorVariant::has_sort() const {
  return operator_case() == kSort;
}
void OperatorVariant::set_has_sort() {
  _oneof_case_[0] = kSort;
}
void OperatorVariant::clear_sort() {
  if (has_sort()) {
    delete operator_.sort_;
    clear_has_operator();
  }
}
 const ::opossum::proto::SortOperator& OperatorVariant::sort() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.sort)
  return has_sort()
      ? *operator_.sort_
      : ::opossum::proto::SortOperator::default_instance();
}
::opossum::proto::SortOperator* OperatorVariant::mutable_sort() {
  if (!has_sort()) {
    clear_operator();
    set_has_sort();
    operator_.sort_ = new ::opossum::proto::SortOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.sort)
  return operator_.sort_;
}
::opossum::proto::SortOperator* OperatorVariant::release_sort() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.sort)
  if (has_sort()) {
    clear_has_operator();
    ::opossum::proto::SortOperator* temp = operator_.sort_;
    operator_.sort_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_sort(::opossum::proto::SortOperator* sort) {
  clear_operator();
  if (sort) {
    set_has_sort();
    operator_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.sort)
}

// optional .opossum.proto.UnionAllOperator union_all = 6;
bool OperatorVariant::has_union_all() const {
  return operator_case() == kUnionAll;
}
void OperatorVariant::set_has_union_all() {
  _oneof_case_[0] = kUnionAll;
}
void OperatorVariant::clear_union_all() {
  if (has_union_all()) {
    delete operator_.union_all_;
    clear_has_operator();
  }
}
 const ::opossum::proto::UnionAllOperator& OperatorVariant::union_all() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.union_all)
  return has_union_all()
      ? *operator_.union_all_
      : ::opossum::proto::UnionAllOperator::default_instance();
}
::opossum::proto::UnionAllOperator* OperatorVariant::mutable_union_all() {
  if (!has_union_all()) {
    clear_operator();
    set_has_union_all();
    operator_.union_all_ = new ::opossum::proto::UnionAllOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.union_all)
  return operator_.union_all_;
}
::opossum::proto::UnionAllOperator* OperatorVariant::release_union_all() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.union_all)
  if (has_union_all()) {
    clear_has_operator();
    ::opossum::proto::UnionAllOperator* temp = operator_.union_all_;
    operator_.union_all_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_union_all(::opossum::proto::UnionAllOperator* union_all) {
  clear_operator();
  if (union_all) {
    set_has_union_all();
    operator_.union_all_ = union_all;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.union_all)
}

// optional .opossum.proto.ImportCsvOperator import_csv = 7;
bool OperatorVariant::has_import_csv() const {
  return operator_case() == kImportCsv;
}
void OperatorVariant::set_has_import_csv() {
  _oneof_case_[0] = kImportCsv;
}
void OperatorVariant::clear_import_csv() {
  if (has_import_csv()) {
    delete operator_.import_csv_;
    clear_has_operator();
  }
}
 const ::opossum::proto::ImportCsvOperator& OperatorVariant::import_csv() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.import_csv)
  return has_import_csv()
      ? *operator_.import_csv_
      : ::opossum::proto::ImportCsvOperator::default_instance();
}
::opossum::proto::ImportCsvOperator* OperatorVariant::mutable_import_csv() {
  if (!has_import_csv()) {
    clear_operator();
    set_has_import_csv();
    operator_.import_csv_ = new ::opossum::proto::ImportCsvOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.import_csv)
  return operator_.import_csv_;
}
::opossum::proto::ImportCsvOperator* OperatorVariant::release_import_csv() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.import_csv)
  if (has_import_csv()) {
    clear_has_operator();
    ::opossum::proto::ImportCsvOperator* temp = operator_.import_csv_;
    operator_.import_csv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_import_csv(::opossum::proto::ImportCsvOperator* import_csv) {
  clear_operator();
  if (import_csv) {
    set_has_import_csv();
    operator_.import_csv_ = import_csv;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.import_csv)
}

// optional .opossum.proto.PrintOperator print = 8;
bool OperatorVariant::has_print() const {
  return operator_case() == kPrint;
}
void OperatorVariant::set_has_print() {
  _oneof_case_[0] = kPrint;
}
void OperatorVariant::clear_print() {
  if (has_print()) {
    delete operator_.print_;
    clear_has_operator();
  }
}
 const ::opossum::proto::PrintOperator& OperatorVariant::print() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.print)
  return has_print()
      ? *operator_.print_
      : ::opossum::proto::PrintOperator::default_instance();
}
::opossum::proto::PrintOperator* OperatorVariant::mutable_print() {
  if (!has_print()) {
    clear_operator();
    set_has_print();
    operator_.print_ = new ::opossum::proto::PrintOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.print)
  return operator_.print_;
}
::opossum::proto::PrintOperator* OperatorVariant::release_print() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.print)
  if (has_print()) {
    clear_has_operator();
    ::opossum::proto::PrintOperator* temp = operator_.print_;
    operator_.print_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_print(::opossum::proto::PrintOperator* print) {
  clear_operator();
  if (print) {
    set_has_print();
    operator_.print_ = print;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.print)
}

// optional .opossum.proto.DifferenceOperator difference = 9;
bool OperatorVariant::has_difference() const {
  return operator_case() == kDifference;
}
void OperatorVariant::set_has_difference() {
  _oneof_case_[0] = kDifference;
}
void OperatorVariant::clear_difference() {
  if (has_difference()) {
    delete operator_.difference_;
    clear_has_operator();
  }
}
 const ::opossum::proto::DifferenceOperator& OperatorVariant::difference() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.difference)
  return has_difference()
      ? *operator_.difference_
      : ::opossum::proto::DifferenceOperator::default_instance();
}
::opossum::proto::DifferenceOperator* OperatorVariant::mutable_difference() {
  if (!has_difference()) {
    clear_operator();
    set_has_difference();
    operator_.difference_ = new ::opossum::proto::DifferenceOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.difference)
  return operator_.difference_;
}
::opossum::proto::DifferenceOperator* OperatorVariant::release_difference() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.difference)
  if (has_difference()) {
    clear_has_operator();
    ::opossum::proto::DifferenceOperator* temp = operator_.difference_;
    operator_.difference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_difference(::opossum::proto::DifferenceOperator* difference) {
  clear_operator();
  if (difference) {
    set_has_difference();
    operator_.difference_ = difference;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.difference)
}

// optional .opossum.proto.ExportCsvOperator export_csv = 10;
bool OperatorVariant::has_export_csv() const {
  return operator_case() == kExportCsv;
}
void OperatorVariant::set_has_export_csv() {
  _oneof_case_[0] = kExportCsv;
}
void OperatorVariant::clear_export_csv() {
  if (has_export_csv()) {
    delete operator_.export_csv_;
    clear_has_operator();
  }
}
 const ::opossum::proto::ExportCsvOperator& OperatorVariant::export_csv() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.export_csv)
  return has_export_csv()
      ? *operator_.export_csv_
      : ::opossum::proto::ExportCsvOperator::default_instance();
}
::opossum::proto::ExportCsvOperator* OperatorVariant::mutable_export_csv() {
  if (!has_export_csv()) {
    clear_operator();
    set_has_export_csv();
    operator_.export_csv_ = new ::opossum::proto::ExportCsvOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.export_csv)
  return operator_.export_csv_;
}
::opossum::proto::ExportCsvOperator* OperatorVariant::release_export_csv() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.export_csv)
  if (has_export_csv()) {
    clear_has_operator();
    ::opossum::proto::ExportCsvOperator* temp = operator_.export_csv_;
    operator_.export_csv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_export_csv(::opossum::proto::ExportCsvOperator* export_csv) {
  clear_operator();
  if (export_csv) {
    set_has_export_csv();
    operator_.export_csv_ = export_csv;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.export_csv)
}

// optional .opossum.proto.ExportBinaryOperator export_binary = 11;
bool OperatorVariant::has_export_binary() const {
  return operator_case() == kExportBinary;
}
void OperatorVariant::set_has_export_binary() {
  _oneof_case_[0] = kExportBinary;
}
void OperatorVariant::clear_export_binary() {
  if (has_export_binary()) {
    delete operator_.export_binary_;
    clear_has_operator();
  }
}
 const ::opossum::proto::ExportBinaryOperator& OperatorVariant::export_binary() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.export_binary)
  return has_export_binary()
      ? *operator_.export_binary_
      : ::opossum::proto::ExportBinaryOperator::default_instance();
}
::opossum::proto::ExportBinaryOperator* OperatorVariant::mutable_export_binary() {
  if (!has_export_binary()) {
    clear_operator();
    set_has_export_binary();
    operator_.export_binary_ = new ::opossum::proto::ExportBinaryOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.export_binary)
  return operator_.export_binary_;
}
::opossum::proto::ExportBinaryOperator* OperatorVariant::release_export_binary() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.export_binary)
  if (has_export_binary()) {
    clear_has_operator();
    ::opossum::proto::ExportBinaryOperator* temp = operator_.export_binary_;
    operator_.export_binary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_export_binary(::opossum::proto::ExportBinaryOperator* export_binary) {
  clear_operator();
  if (export_binary) {
    set_has_export_binary();
    operator_.export_binary_ = export_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.export_binary)
}

// optional .opossum.proto.IndexColumnScanOperator index_column_scan = 12;
bool OperatorVariant::has_index_column_scan() const {
  return operator_case() == kIndexColumnScan;
}
void OperatorVariant::set_has_index_column_scan() {
  _oneof_case_[0] = kIndexColumnScan;
}
void OperatorVariant::clear_index_column_scan() {
  if (has_index_column_scan()) {
    delete operator_.index_column_scan_;
    clear_has_operator();
  }
}
 const ::opossum::proto::IndexColumnScanOperator& OperatorVariant::index_column_scan() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.index_column_scan)
  return has_index_column_scan()
      ? *operator_.index_column_scan_
      : ::opossum::proto::IndexColumnScanOperator::default_instance();
}
::opossum::proto::IndexColumnScanOperator* OperatorVariant::mutable_index_column_scan() {
  if (!has_index_column_scan()) {
    clear_operator();
    set_has_index_column_scan();
    operator_.index_column_scan_ = new ::opossum::proto::IndexColumnScanOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.index_column_scan)
  return operator_.index_column_scan_;
}
::opossum::proto::IndexColumnScanOperator* OperatorVariant::release_index_column_scan() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.index_column_scan)
  if (has_index_column_scan()) {
    clear_has_operator();
    ::opossum::proto::IndexColumnScanOperator* temp = operator_.index_column_scan_;
    operator_.index_column_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_index_column_scan(::opossum::proto::IndexColumnScanOperator* index_column_scan) {
  clear_operator();
  if (index_column_scan) {
    set_has_index_column_scan();
    operator_.index_column_scan_ = index_column_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.index_column_scan)
}

// optional .opossum.proto.NestedLoopJoinOperator nested_loop_join = 13;
bool OperatorVariant::has_nested_loop_join() const {
  return operator_case() == kNestedLoopJoin;
}
void OperatorVariant::set_has_nested_loop_join() {
  _oneof_case_[0] = kNestedLoopJoin;
}
void OperatorVariant::clear_nested_loop_join() {
  if (has_nested_loop_join()) {
    delete operator_.nested_loop_join_;
    clear_has_operator();
  }
}
 const ::opossum::proto::NestedLoopJoinOperator& OperatorVariant::nested_loop_join() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OperatorVariant.nested_loop_join)
  return has_nested_loop_join()
      ? *operator_.nested_loop_join_
      : ::opossum::proto::NestedLoopJoinOperator::default_instance();
}
::opossum::proto::NestedLoopJoinOperator* OperatorVariant::mutable_nested_loop_join() {
  if (!has_nested_loop_join()) {
    clear_operator();
    set_has_nested_loop_join();
    operator_.nested_loop_join_ = new ::opossum::proto::NestedLoopJoinOperator;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.OperatorVariant.nested_loop_join)
  return operator_.nested_loop_join_;
}
::opossum::proto::NestedLoopJoinOperator* OperatorVariant::release_nested_loop_join() {
  // @@protoc_insertion_point(field_release:opossum.proto.OperatorVariant.nested_loop_join)
  if (has_nested_loop_join()) {
    clear_has_operator();
    ::opossum::proto::NestedLoopJoinOperator* temp = operator_.nested_loop_join_;
    operator_.nested_loop_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OperatorVariant::set_allocated_nested_loop_join(::opossum::proto::NestedLoopJoinOperator* nested_loop_join) {
  clear_operator();
  if (nested_loop_join) {
    set_has_nested_loop_join();
    operator_.nested_loop_join_ = nested_loop_join;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.OperatorVariant.nested_loop_join)
}

bool OperatorVariant::has_operator() const {
  return operator_case() != OPERATOR_NOT_SET;
}
void OperatorVariant::clear_has_operator() {
  _oneof_case_[0] = OPERATOR_NOT_SET;
}
OperatorVariant::OperatorCase OperatorVariant::operator_case() const {
  return OperatorVariant::OperatorCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionalColumnID::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionalColumnID::OptionalColumnID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.OptionalColumnID)
}

void OptionalColumnID::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OptionalColumnID::OptionalColumnID(const OptionalColumnID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.OptionalColumnID)
}

void OptionalColumnID::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

OptionalColumnID::~OptionalColumnID() {
  // @@protoc_insertion_point(destructor:opossum.proto.OptionalColumnID)
  SharedDtor();
}

void OptionalColumnID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptionalColumnID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionalColumnID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionalColumnID_descriptor_;
}

const OptionalColumnID& OptionalColumnID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

OptionalColumnID* OptionalColumnID::default_instance_ = NULL;

OptionalColumnID* OptionalColumnID::New(::google::protobuf::Arena* arena) const {
  OptionalColumnID* n = new OptionalColumnID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionalColumnID::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.OptionalColumnID)
  value_ = 0;
}

bool OptionalColumnID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.OptionalColumnID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.OptionalColumnID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.OptionalColumnID)
  return false;
#undef DO_
}

void OptionalColumnID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.OptionalColumnID)
  // optional int32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.OptionalColumnID)
}

::google::protobuf::uint8* OptionalColumnID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.OptionalColumnID)
  // optional int32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.OptionalColumnID)
  return target;
}

int OptionalColumnID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.OptionalColumnID)
  int total_size = 0;

  // optional int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionalColumnID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.OptionalColumnID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OptionalColumnID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionalColumnID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.OptionalColumnID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.OptionalColumnID)
    MergeFrom(*source);
  }
}

void OptionalColumnID::MergeFrom(const OptionalColumnID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.OptionalColumnID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void OptionalColumnID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.OptionalColumnID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalColumnID::CopyFrom(const OptionalColumnID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.OptionalColumnID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalColumnID::IsInitialized() const {

  return true;
}

void OptionalColumnID::Swap(OptionalColumnID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionalColumnID::InternalSwap(OptionalColumnID* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionalColumnID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionalColumnID_descriptor_;
  metadata.reflection = OptionalColumnID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionalColumnID

// optional int32 value = 1;
void OptionalColumnID::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 OptionalColumnID::value() const {
  // @@protoc_insertion_point(field_get:opossum.proto.OptionalColumnID.value)
  return value_;
}
 void OptionalColumnID::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.OptionalColumnID.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableOperator::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableOperator::GetTableOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.GetTableOperator)
}

void GetTableOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetTableOperator::GetTableOperator(const GetTableOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.GetTableOperator)
}

void GetTableOperator::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTableOperator::~GetTableOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.GetTableOperator)
  SharedDtor();
}

void GetTableOperator::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetTableOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableOperator_descriptor_;
}

const GetTableOperator& GetTableOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

GetTableOperator* GetTableOperator::default_instance_ = NULL;

GetTableOperator* GetTableOperator::New(::google::protobuf::Arena* arena) const {
  GetTableOperator* n = new GetTableOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.GetTableOperator)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetTableOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.GetTableOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.GetTableOperator.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.GetTableOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.GetTableOperator)
  return false;
#undef DO_
}

void GetTableOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.GetTableOperator)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.GetTableOperator.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.GetTableOperator)
}

::google::protobuf::uint8* GetTableOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.GetTableOperator)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.GetTableOperator.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.GetTableOperator)
  return target;
}

int GetTableOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.GetTableOperator)
  int total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.GetTableOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetTableOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.GetTableOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.GetTableOperator)
    MergeFrom(*source);
  }
}

void GetTableOperator::MergeFrom(const GetTableOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.GetTableOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void GetTableOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.GetTableOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableOperator::CopyFrom(const GetTableOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.GetTableOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableOperator::IsInitialized() const {

  return true;
}

void GetTableOperator::Swap(GetTableOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableOperator::InternalSwap(GetTableOperator* other) {
  table_name_.Swap(&other->table_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableOperator_descriptor_;
  metadata.reflection = GetTableOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableOperator

// optional string table_name = 1;
void GetTableOperator::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetTableOperator::table_name() const {
  // @@protoc_insertion_point(field_get:opossum.proto.GetTableOperator.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetTableOperator::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.GetTableOperator.table_name)
}
 void GetTableOperator::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.GetTableOperator.table_name)
}
 void GetTableOperator::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.GetTableOperator.table_name)
}
 ::std::string* GetTableOperator::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.GetTableOperator.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetTableOperator::release_table_name() {
  // @@protoc_insertion_point(field_release:opossum.proto.GetTableOperator.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetTableOperator::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.GetTableOperator.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectionOperator::kInputOperatorFieldNumber;
const int ProjectionOperator::kColumnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectionOperator::ProjectionOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.ProjectionOperator)
}

void ProjectionOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

ProjectionOperator::ProjectionOperator(const ProjectionOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.ProjectionOperator)
}

void ProjectionOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_operator_ = NULL;
}

ProjectionOperator::~ProjectionOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.ProjectionOperator)
  SharedDtor();
}

void ProjectionOperator::SharedDtor() {
  if (this != default_instance_) {
    delete input_operator_;
  }
}

void ProjectionOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectionOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectionOperator_descriptor_;
}

const ProjectionOperator& ProjectionOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

ProjectionOperator* ProjectionOperator::default_instance_ = NULL;

ProjectionOperator* ProjectionOperator::New(::google::protobuf::Arena* arena) const {
  ProjectionOperator* n = new ProjectionOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjectionOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.ProjectionOperator)
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
  column_id_.Clear();
}

bool ProjectionOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.ProjectionOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column_id;
        break;
      }

      // repeated int32 column_id = 2;
      case 2: {
        if (tag == 18) {
         parse_column_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_column_id())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_column_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.ProjectionOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.ProjectionOperator)
  return false;
#undef DO_
}

void ProjectionOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.ProjectionOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // repeated int32 column_id = 2;
  if (this->column_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_column_id_cached_byte_size_);
  }
  for (int i = 0; i < this->column_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->column_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.ProjectionOperator)
}

::google::protobuf::uint8* ProjectionOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.ProjectionOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // repeated int32 column_id = 2;
  if (this->column_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _column_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->column_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->column_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.ProjectionOperator)
  return target;
}

int ProjectionOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.ProjectionOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  // repeated int32 column_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->column_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->column_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _column_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectionOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.ProjectionOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProjectionOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectionOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.ProjectionOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.ProjectionOperator)
    MergeFrom(*source);
  }
}

void ProjectionOperator::MergeFrom(const ProjectionOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.ProjectionOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  column_id_.MergeFrom(from.column_id_);
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
}

void ProjectionOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.ProjectionOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionOperator::CopyFrom(const ProjectionOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.ProjectionOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionOperator::IsInitialized() const {

  return true;
}

void ProjectionOperator::Swap(ProjectionOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectionOperator::InternalSwap(ProjectionOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  column_id_.UnsafeArenaSwap(&other->column_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjectionOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectionOperator_descriptor_;
  metadata.reflection = ProjectionOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProjectionOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool ProjectionOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void ProjectionOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& ProjectionOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProjectionOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* ProjectionOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ProjectionOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* ProjectionOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ProjectionOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void ProjectionOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ProjectionOperator.input_operator)
}

// repeated int32 column_id = 2;
int ProjectionOperator::column_id_size() const {
  return column_id_.size();
}
void ProjectionOperator::clear_column_id() {
  column_id_.Clear();
}
 ::google::protobuf::int32 ProjectionOperator::column_id(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProjectionOperator.column_id)
  return column_id_.Get(index);
}
 void ProjectionOperator::set_column_id(int index, ::google::protobuf::int32 value) {
  column_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:opossum.proto.ProjectionOperator.column_id)
}
 void ProjectionOperator::add_column_id(::google::protobuf::int32 value) {
  column_id_.Add(value);
  // @@protoc_insertion_point(field_add:opossum.proto.ProjectionOperator.column_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProjectionOperator::column_id() const {
  // @@protoc_insertion_point(field_list:opossum.proto.ProjectionOperator.column_id)
  return column_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProjectionOperator::mutable_column_id() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.ProjectionOperator.column_id)
  return &column_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableScanOperator::kInputOperatorFieldNumber;
const int TableScanOperator::kColumnIdFieldNumber;
const int TableScanOperator::kFilterOperatorFieldNumber;
const int TableScanOperator::kValueFieldNumber;
const int TableScanOperator::kValue2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableScanOperator::TableScanOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.TableScanOperator)
}

void TableScanOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
  value_ = const_cast< ::opossum::proto::Variant*>(&::opossum::proto::Variant::default_instance());
  value2_ = const_cast< ::opossum::proto::Variant*>(&::opossum::proto::Variant::default_instance());
}

TableScanOperator::TableScanOperator(const TableScanOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.TableScanOperator)
}

void TableScanOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_operator_ = NULL;
  column_id_ = 0;
  filter_operator_ = 0;
  value_ = NULL;
  value2_ = NULL;
}

TableScanOperator::~TableScanOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.TableScanOperator)
  SharedDtor();
}

void TableScanOperator::SharedDtor() {
  if (this != default_instance_) {
    delete input_operator_;
    delete value_;
    delete value2_;
  }
}

void TableScanOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableScanOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableScanOperator_descriptor_;
}

const TableScanOperator& TableScanOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

TableScanOperator* TableScanOperator::default_instance_ = NULL;

TableScanOperator* TableScanOperator::New(::google::protobuf::Arena* arena) const {
  TableScanOperator* n = new TableScanOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableScanOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.TableScanOperator)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TableScanOperator, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TableScanOperator*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(column_id_, filter_operator_);
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && value2_ != NULL) delete value2_;
  value2_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TableScanOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.TableScanOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column_id;
        break;
      }

      // optional int32 column_id = 2;
      case 2: {
        if (tag == 16) {
         parse_column_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_filter_operator;
        break;
      }

      // optional .opossum.proto.ScanType filter_operator = 3;
      case 3: {
        if (tag == 24) {
         parse_filter_operator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_operator(static_cast< ::opossum::proto::ScanType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional .opossum.proto.Variant value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value2;
        break;
      }

      // optional .opossum.proto.Variant value2 = 5;
      case 5: {
        if (tag == 42) {
         parse_value2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.TableScanOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.TableScanOperator)
  return false;
#undef DO_
}

void TableScanOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.TableScanOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->column_id(), output);
  }

  // optional .opossum.proto.ScanType filter_operator = 3;
  if (this->filter_operator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filter_operator(), output);
  }

  // optional .opossum.proto.Variant value = 4;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  // optional .opossum.proto.Variant value2 = 5;
  if (this->has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->value2_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.TableScanOperator)
}

::google::protobuf::uint8* TableScanOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.TableScanOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->column_id(), target);
  }

  // optional .opossum.proto.ScanType filter_operator = 3;
  if (this->filter_operator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filter_operator(), target);
  }

  // optional .opossum.proto.Variant value = 4;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->value_, false, target);
  }

  // optional .opossum.proto.Variant value2 = 5;
  if (this->has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->value2_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.TableScanOperator)
  return target;
}

int TableScanOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.TableScanOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->column_id());
  }

  // optional .opossum.proto.ScanType filter_operator = 3;
  if (this->filter_operator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_operator());
  }

  // optional .opossum.proto.Variant value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // optional .opossum.proto.Variant value2 = 5;
  if (this->has_value2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value2_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableScanOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.TableScanOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TableScanOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableScanOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.TableScanOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.TableScanOperator)
    MergeFrom(*source);
  }
}

void TableScanOperator::MergeFrom(const TableScanOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.TableScanOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
  if (from.column_id() != 0) {
    set_column_id(from.column_id());
  }
  if (from.filter_operator() != 0) {
    set_filter_operator(from.filter_operator());
  }
  if (from.has_value()) {
    mutable_value()->::opossum::proto::Variant::MergeFrom(from.value());
  }
  if (from.has_value2()) {
    mutable_value2()->::opossum::proto::Variant::MergeFrom(from.value2());
  }
}

void TableScanOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.TableScanOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableScanOperator::CopyFrom(const TableScanOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.TableScanOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableScanOperator::IsInitialized() const {

  return true;
}

void TableScanOperator::Swap(TableScanOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableScanOperator::InternalSwap(TableScanOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  std::swap(column_id_, other->column_id_);
  std::swap(filter_operator_, other->filter_operator_);
  std::swap(value_, other->value_);
  std::swap(value2_, other->value2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableScanOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableScanOperator_descriptor_;
  metadata.reflection = TableScanOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableScanOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool TableScanOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void TableScanOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& TableScanOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* TableScanOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.TableScanOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* TableScanOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.TableScanOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void TableScanOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.TableScanOperator.input_operator)
}

// optional int32 column_id = 2;
void TableScanOperator::clear_column_id() {
  column_id_ = 0;
}
 ::google::protobuf::int32 TableScanOperator::column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.column_id)
  return column_id_;
}
 void TableScanOperator::set_column_id(::google::protobuf::int32 value) {
  
  column_id_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.TableScanOperator.column_id)
}

// optional .opossum.proto.ScanType filter_operator = 3;
void TableScanOperator::clear_filter_operator() {
  filter_operator_ = 0;
}
 ::opossum::proto::ScanType TableScanOperator::filter_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.filter_operator)
  return static_cast< ::opossum::proto::ScanType >(filter_operator_);
}
 void TableScanOperator::set_filter_operator(::opossum::proto::ScanType value) {
  
  filter_operator_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.TableScanOperator.filter_operator)
}

// optional .opossum.proto.Variant value = 4;
bool TableScanOperator::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void TableScanOperator::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::opossum::proto::Variant& TableScanOperator::value() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::opossum::proto::Variant* TableScanOperator::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.TableScanOperator.value)
  return value_;
}
::opossum::proto::Variant* TableScanOperator::release_value() {
  // @@protoc_insertion_point(field_release:opossum.proto.TableScanOperator.value)
  
  ::opossum::proto::Variant* temp = value_;
  value_ = NULL;
  return temp;
}
void TableScanOperator::set_allocated_value(::opossum::proto::Variant* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.TableScanOperator.value)
}

// optional .opossum.proto.Variant value2 = 5;
bool TableScanOperator::has_value2() const {
  return !_is_default_instance_ && value2_ != NULL;
}
void TableScanOperator::clear_value2() {
  if (GetArenaNoVirtual() == NULL && value2_ != NULL) delete value2_;
  value2_ = NULL;
}
const ::opossum::proto::Variant& TableScanOperator::value2() const {
  // @@protoc_insertion_point(field_get:opossum.proto.TableScanOperator.value2)
  return value2_ != NULL ? *value2_ : *default_instance_->value2_;
}
::opossum::proto::Variant* TableScanOperator::mutable_value2() {
  
  if (value2_ == NULL) {
    value2_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.TableScanOperator.value2)
  return value2_;
}
::opossum::proto::Variant* TableScanOperator::release_value2() {
  // @@protoc_insertion_point(field_release:opossum.proto.TableScanOperator.value2)
  
  ::opossum::proto::Variant* temp = value2_;
  value2_ = NULL;
  return temp;
}
void TableScanOperator::set_allocated_value2(::opossum::proto::Variant* value2) {
  delete value2_;
  value2_ = value2;
  if (value2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.TableScanOperator.value2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexColumnScanOperator::kInputOperatorFieldNumber;
const int IndexColumnScanOperator::kColumnIdFieldNumber;
const int IndexColumnScanOperator::kFilterOperatorFieldNumber;
const int IndexColumnScanOperator::kValueFieldNumber;
const int IndexColumnScanOperator::kValue2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexColumnScanOperator::IndexColumnScanOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.IndexColumnScanOperator)
}

void IndexColumnScanOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
  value_ = const_cast< ::opossum::proto::Variant*>(&::opossum::proto::Variant::default_instance());
  value2_ = const_cast< ::opossum::proto::Variant*>(&::opossum::proto::Variant::default_instance());
}

IndexColumnScanOperator::IndexColumnScanOperator(const IndexColumnScanOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.IndexColumnScanOperator)
}

void IndexColumnScanOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_operator_ = NULL;
  column_id_ = 0;
  filter_operator_ = 0;
  value_ = NULL;
  value2_ = NULL;
}

IndexColumnScanOperator::~IndexColumnScanOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.IndexColumnScanOperator)
  SharedDtor();
}

void IndexColumnScanOperator::SharedDtor() {
  if (this != default_instance_) {
    delete input_operator_;
    delete value_;
    delete value2_;
  }
}

void IndexColumnScanOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexColumnScanOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexColumnScanOperator_descriptor_;
}

const IndexColumnScanOperator& IndexColumnScanOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

IndexColumnScanOperator* IndexColumnScanOperator::default_instance_ = NULL;

IndexColumnScanOperator* IndexColumnScanOperator::New(::google::protobuf::Arena* arena) const {
  IndexColumnScanOperator* n = new IndexColumnScanOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexColumnScanOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.IndexColumnScanOperator)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IndexColumnScanOperator, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IndexColumnScanOperator*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(column_id_, filter_operator_);
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && value2_ != NULL) delete value2_;
  value2_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool IndexColumnScanOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.IndexColumnScanOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column_id;
        break;
      }

      // optional int32 column_id = 2;
      case 2: {
        if (tag == 16) {
         parse_column_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_filter_operator;
        break;
      }

      // optional .opossum.proto.ScanType filter_operator = 3;
      case 3: {
        if (tag == 24) {
         parse_filter_operator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_operator(static_cast< ::opossum::proto::ScanType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional .opossum.proto.Variant value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value2;
        break;
      }

      // optional .opossum.proto.Variant value2 = 5;
      case 5: {
        if (tag == 42) {
         parse_value2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.IndexColumnScanOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.IndexColumnScanOperator)
  return false;
#undef DO_
}

void IndexColumnScanOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.IndexColumnScanOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->column_id(), output);
  }

  // optional .opossum.proto.ScanType filter_operator = 3;
  if (this->filter_operator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filter_operator(), output);
  }

  // optional .opossum.proto.Variant value = 4;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  // optional .opossum.proto.Variant value2 = 5;
  if (this->has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->value2_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.IndexColumnScanOperator)
}

::google::protobuf::uint8* IndexColumnScanOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.IndexColumnScanOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->column_id(), target);
  }

  // optional .opossum.proto.ScanType filter_operator = 3;
  if (this->filter_operator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filter_operator(), target);
  }

  // optional .opossum.proto.Variant value = 4;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->value_, false, target);
  }

  // optional .opossum.proto.Variant value2 = 5;
  if (this->has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->value2_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.IndexColumnScanOperator)
  return target;
}

int IndexColumnScanOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.IndexColumnScanOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->column_id());
  }

  // optional .opossum.proto.ScanType filter_operator = 3;
  if (this->filter_operator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_operator());
  }

  // optional .opossum.proto.Variant value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // optional .opossum.proto.Variant value2 = 5;
  if (this->has_value2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value2_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexColumnScanOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.IndexColumnScanOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IndexColumnScanOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexColumnScanOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.IndexColumnScanOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.IndexColumnScanOperator)
    MergeFrom(*source);
  }
}

void IndexColumnScanOperator::MergeFrom(const IndexColumnScanOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.IndexColumnScanOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
  if (from.column_id() != 0) {
    set_column_id(from.column_id());
  }
  if (from.filter_operator() != 0) {
    set_filter_operator(from.filter_operator());
  }
  if (from.has_value()) {
    mutable_value()->::opossum::proto::Variant::MergeFrom(from.value());
  }
  if (from.has_value2()) {
    mutable_value2()->::opossum::proto::Variant::MergeFrom(from.value2());
  }
}

void IndexColumnScanOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.IndexColumnScanOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexColumnScanOperator::CopyFrom(const IndexColumnScanOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.IndexColumnScanOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexColumnScanOperator::IsInitialized() const {

  return true;
}

void IndexColumnScanOperator::Swap(IndexColumnScanOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexColumnScanOperator::InternalSwap(IndexColumnScanOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  std::swap(column_id_, other->column_id_);
  std::swap(filter_operator_, other->filter_operator_);
  std::swap(value_, other->value_);
  std::swap(value2_, other->value2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexColumnScanOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexColumnScanOperator_descriptor_;
  metadata.reflection = IndexColumnScanOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexColumnScanOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool IndexColumnScanOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void IndexColumnScanOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& IndexColumnScanOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* IndexColumnScanOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.IndexColumnScanOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* IndexColumnScanOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.IndexColumnScanOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void IndexColumnScanOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.IndexColumnScanOperator.input_operator)
}

// optional int32 column_id = 2;
void IndexColumnScanOperator::clear_column_id() {
  column_id_ = 0;
}
 ::google::protobuf::int32 IndexColumnScanOperator::column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.column_id)
  return column_id_;
}
 void IndexColumnScanOperator::set_column_id(::google::protobuf::int32 value) {
  
  column_id_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.IndexColumnScanOperator.column_id)
}

// optional .opossum.proto.ScanType filter_operator = 3;
void IndexColumnScanOperator::clear_filter_operator() {
  filter_operator_ = 0;
}
 ::opossum::proto::ScanType IndexColumnScanOperator::filter_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.filter_operator)
  return static_cast< ::opossum::proto::ScanType >(filter_operator_);
}
 void IndexColumnScanOperator::set_filter_operator(::opossum::proto::ScanType value) {
  
  filter_operator_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.IndexColumnScanOperator.filter_operator)
}

// optional .opossum.proto.Variant value = 4;
bool IndexColumnScanOperator::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void IndexColumnScanOperator::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::opossum::proto::Variant& IndexColumnScanOperator::value() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::opossum::proto::Variant* IndexColumnScanOperator::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.IndexColumnScanOperator.value)
  return value_;
}
::opossum::proto::Variant* IndexColumnScanOperator::release_value() {
  // @@protoc_insertion_point(field_release:opossum.proto.IndexColumnScanOperator.value)
  
  ::opossum::proto::Variant* temp = value_;
  value_ = NULL;
  return temp;
}
void IndexColumnScanOperator::set_allocated_value(::opossum::proto::Variant* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.IndexColumnScanOperator.value)
}

// optional .opossum.proto.Variant value2 = 5;
bool IndexColumnScanOperator::has_value2() const {
  return !_is_default_instance_ && value2_ != NULL;
}
void IndexColumnScanOperator::clear_value2() {
  if (GetArenaNoVirtual() == NULL && value2_ != NULL) delete value2_;
  value2_ = NULL;
}
const ::opossum::proto::Variant& IndexColumnScanOperator::value2() const {
  // @@protoc_insertion_point(field_get:opossum.proto.IndexColumnScanOperator.value2)
  return value2_ != NULL ? *value2_ : *default_instance_->value2_;
}
::opossum::proto::Variant* IndexColumnScanOperator::mutable_value2() {
  
  if (value2_ == NULL) {
    value2_ = new ::opossum::proto::Variant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.IndexColumnScanOperator.value2)
  return value2_;
}
::opossum::proto::Variant* IndexColumnScanOperator::release_value2() {
  // @@protoc_insertion_point(field_release:opossum.proto.IndexColumnScanOperator.value2)
  
  ::opossum::proto::Variant* temp = value2_;
  value2_ = NULL;
  return temp;
}
void IndexColumnScanOperator::set_allocated_value2(::opossum::proto::Variant* value2) {
  delete value2_;
  value2_ = value2;
  if (value2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.IndexColumnScanOperator.value2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NestedLoopJoinOperator_JoinMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NestedLoopJoinOperator_JoinMode_descriptor_;
}
bool NestedLoopJoinOperator_JoinMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::Inner;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::Left;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::Right;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::Outer;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::Cross;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::Natural;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::Self;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::JoinMode_MIN;
const NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::JoinMode_MAX;
const int NestedLoopJoinOperator::JoinMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NestedLoopJoinOperator::kLeftOperatorFieldNumber;
const int NestedLoopJoinOperator::kRightOperatorFieldNumber;
const int NestedLoopJoinOperator::kLeftColumnIdFieldNumber;
const int NestedLoopJoinOperator::kRightColumnIdFieldNumber;
const int NestedLoopJoinOperator::kOpFieldNumber;
const int NestedLoopJoinOperator::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NestedLoopJoinOperator::NestedLoopJoinOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.NestedLoopJoinOperator)
}

void NestedLoopJoinOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  left_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
  right_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
  left_column_id_ = const_cast< ::opossum::proto::OptionalColumnID*>(&::opossum::proto::OptionalColumnID::default_instance());
  right_column_id_ = const_cast< ::opossum::proto::OptionalColumnID*>(&::opossum::proto::OptionalColumnID::default_instance());
}

NestedLoopJoinOperator::NestedLoopJoinOperator(const NestedLoopJoinOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.NestedLoopJoinOperator)
}

void NestedLoopJoinOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  left_operator_ = NULL;
  right_operator_ = NULL;
  left_column_id_ = NULL;
  right_column_id_ = NULL;
  op_ = 0;
  mode_ = 0;
}

NestedLoopJoinOperator::~NestedLoopJoinOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.NestedLoopJoinOperator)
  SharedDtor();
}

void NestedLoopJoinOperator::SharedDtor() {
  if (this != default_instance_) {
    delete left_operator_;
    delete right_operator_;
    delete left_column_id_;
    delete right_column_id_;
  }
}

void NestedLoopJoinOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestedLoopJoinOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NestedLoopJoinOperator_descriptor_;
}

const NestedLoopJoinOperator& NestedLoopJoinOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

NestedLoopJoinOperator* NestedLoopJoinOperator::default_instance_ = NULL;

NestedLoopJoinOperator* NestedLoopJoinOperator::New(::google::protobuf::Arena* arena) const {
  NestedLoopJoinOperator* n = new NestedLoopJoinOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NestedLoopJoinOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.NestedLoopJoinOperator)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NestedLoopJoinOperator, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NestedLoopJoinOperator*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(op_, mode_);
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_column_id_ != NULL) delete left_column_id_;
  left_column_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_column_id_ != NULL) delete right_column_id_;
  right_column_id_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool NestedLoopJoinOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.NestedLoopJoinOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant left_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right_operator;
        break;
      }

      // optional .opossum.proto.OperatorVariant right_operator = 2;
      case 2: {
        if (tag == 18) {
         parse_right_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_left_column_id;
        break;
      }

      // optional .opossum.proto.OptionalColumnID left_column_id = 3;
      case 3: {
        if (tag == 26) {
         parse_left_column_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_column_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_right_column_id;
        break;
      }

      // optional .opossum.proto.OptionalColumnID right_column_id = 4;
      case 4: {
        if (tag == 34) {
         parse_right_column_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_column_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_op;
        break;
      }

      // optional .opossum.proto.ScanType op = 5;
      case 5: {
        if (tag == 40) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::opossum::proto::ScanType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // optional .opossum.proto.NestedLoopJoinOperator.JoinMode mode = 6;
      case 6: {
        if (tag == 48) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::opossum::proto::NestedLoopJoinOperator_JoinMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.NestedLoopJoinOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.NestedLoopJoinOperator)
  return false;
#undef DO_
}

void NestedLoopJoinOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.NestedLoopJoinOperator)
  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_operator_, output);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_operator_, output);
  }

  // optional .opossum.proto.OptionalColumnID left_column_id = 3;
  if (this->has_left_column_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->left_column_id_, output);
  }

  // optional .opossum.proto.OptionalColumnID right_column_id = 4;
  if (this->has_right_column_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->right_column_id_, output);
  }

  // optional .opossum.proto.ScanType op = 5;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->op(), output);
  }

  // optional .opossum.proto.NestedLoopJoinOperator.JoinMode mode = 6;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.NestedLoopJoinOperator)
}

::google::protobuf::uint8* NestedLoopJoinOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.NestedLoopJoinOperator)
  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_operator_, false, target);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_operator_, false, target);
  }

  // optional .opossum.proto.OptionalColumnID left_column_id = 3;
  if (this->has_left_column_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->left_column_id_, false, target);
  }

  // optional .opossum.proto.OptionalColumnID right_column_id = 4;
  if (this->has_right_column_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->right_column_id_, false, target);
  }

  // optional .opossum.proto.ScanType op = 5;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->op(), target);
  }

  // optional .opossum.proto.NestedLoopJoinOperator.JoinMode mode = 6;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.NestedLoopJoinOperator)
  return target;
}

int NestedLoopJoinOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.NestedLoopJoinOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_operator_);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_operator_);
  }

  // optional .opossum.proto.OptionalColumnID left_column_id = 3;
  if (this->has_left_column_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_column_id_);
  }

  // optional .opossum.proto.OptionalColumnID right_column_id = 4;
  if (this->has_right_column_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_column_id_);
  }

  // optional .opossum.proto.ScanType op = 5;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // optional .opossum.proto.NestedLoopJoinOperator.JoinMode mode = 6;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestedLoopJoinOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.NestedLoopJoinOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NestedLoopJoinOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NestedLoopJoinOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.NestedLoopJoinOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.NestedLoopJoinOperator)
    MergeFrom(*source);
  }
}

void NestedLoopJoinOperator::MergeFrom(const NestedLoopJoinOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.NestedLoopJoinOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_left_operator()) {
    mutable_left_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.left_operator());
  }
  if (from.has_right_operator()) {
    mutable_right_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.right_operator());
  }
  if (from.has_left_column_id()) {
    mutable_left_column_id()->::opossum::proto::OptionalColumnID::MergeFrom(from.left_column_id());
  }
  if (from.has_right_column_id()) {
    mutable_right_column_id()->::opossum::proto::OptionalColumnID::MergeFrom(from.right_column_id());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void NestedLoopJoinOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.NestedLoopJoinOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedLoopJoinOperator::CopyFrom(const NestedLoopJoinOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.NestedLoopJoinOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedLoopJoinOperator::IsInitialized() const {

  return true;
}

void NestedLoopJoinOperator::Swap(NestedLoopJoinOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NestedLoopJoinOperator::InternalSwap(NestedLoopJoinOperator* other) {
  std::swap(left_operator_, other->left_operator_);
  std::swap(right_operator_, other->right_operator_);
  std::swap(left_column_id_, other->left_column_id_);
  std::swap(right_column_id_, other->right_column_id_);
  std::swap(op_, other->op_);
  std::swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NestedLoopJoinOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NestedLoopJoinOperator_descriptor_;
  metadata.reflection = NestedLoopJoinOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NestedLoopJoinOperator

// optional .opossum.proto.OperatorVariant left_operator = 1;
bool NestedLoopJoinOperator::has_left_operator() const {
  return !_is_default_instance_ && left_operator_ != NULL;
}
void NestedLoopJoinOperator::clear_left_operator() {
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& NestedLoopJoinOperator::left_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.left_operator)
  return left_operator_ != NULL ? *left_operator_ : *default_instance_->left_operator_;
}
::opossum::proto::OperatorVariant* NestedLoopJoinOperator::mutable_left_operator() {
  
  if (left_operator_ == NULL) {
    left_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.left_operator)
  return left_operator_;
}
::opossum::proto::OperatorVariant* NestedLoopJoinOperator::release_left_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.left_operator)
  
  ::opossum::proto::OperatorVariant* temp = left_operator_;
  left_operator_ = NULL;
  return temp;
}
void NestedLoopJoinOperator::set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator) {
  delete left_operator_;
  left_operator_ = left_operator;
  if (left_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.left_operator)
}

// optional .opossum.proto.OperatorVariant right_operator = 2;
bool NestedLoopJoinOperator::has_right_operator() const {
  return !_is_default_instance_ && right_operator_ != NULL;
}
void NestedLoopJoinOperator::clear_right_operator() {
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& NestedLoopJoinOperator::right_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.right_operator)
  return right_operator_ != NULL ? *right_operator_ : *default_instance_->right_operator_;
}
::opossum::proto::OperatorVariant* NestedLoopJoinOperator::mutable_right_operator() {
  
  if (right_operator_ == NULL) {
    right_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.right_operator)
  return right_operator_;
}
::opossum::proto::OperatorVariant* NestedLoopJoinOperator::release_right_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.right_operator)
  
  ::opossum::proto::OperatorVariant* temp = right_operator_;
  right_operator_ = NULL;
  return temp;
}
void NestedLoopJoinOperator::set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator) {
  delete right_operator_;
  right_operator_ = right_operator;
  if (right_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.right_operator)
}

// optional .opossum.proto.OptionalColumnID left_column_id = 3;
bool NestedLoopJoinOperator::has_left_column_id() const {
  return !_is_default_instance_ && left_column_id_ != NULL;
}
void NestedLoopJoinOperator::clear_left_column_id() {
  if (GetArenaNoVirtual() == NULL && left_column_id_ != NULL) delete left_column_id_;
  left_column_id_ = NULL;
}
const ::opossum::proto::OptionalColumnID& NestedLoopJoinOperator::left_column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.left_column_id)
  return left_column_id_ != NULL ? *left_column_id_ : *default_instance_->left_column_id_;
}
::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::mutable_left_column_id() {
  
  if (left_column_id_ == NULL) {
    left_column_id_ = new ::opossum::proto::OptionalColumnID;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.left_column_id)
  return left_column_id_;
}
::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::release_left_column_id() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.left_column_id)
  
  ::opossum::proto::OptionalColumnID* temp = left_column_id_;
  left_column_id_ = NULL;
  return temp;
}
void NestedLoopJoinOperator::set_allocated_left_column_id(::opossum::proto::OptionalColumnID* left_column_id) {
  delete left_column_id_;
  left_column_id_ = left_column_id;
  if (left_column_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.left_column_id)
}

// optional .opossum.proto.OptionalColumnID right_column_id = 4;
bool NestedLoopJoinOperator::has_right_column_id() const {
  return !_is_default_instance_ && right_column_id_ != NULL;
}
void NestedLoopJoinOperator::clear_right_column_id() {
  if (GetArenaNoVirtual() == NULL && right_column_id_ != NULL) delete right_column_id_;
  right_column_id_ = NULL;
}
const ::opossum::proto::OptionalColumnID& NestedLoopJoinOperator::right_column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.right_column_id)
  return right_column_id_ != NULL ? *right_column_id_ : *default_instance_->right_column_id_;
}
::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::mutable_right_column_id() {
  
  if (right_column_id_ == NULL) {
    right_column_id_ = new ::opossum::proto::OptionalColumnID;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.NestedLoopJoinOperator.right_column_id)
  return right_column_id_;
}
::opossum::proto::OptionalColumnID* NestedLoopJoinOperator::release_right_column_id() {
  // @@protoc_insertion_point(field_release:opossum.proto.NestedLoopJoinOperator.right_column_id)
  
  ::opossum::proto::OptionalColumnID* temp = right_column_id_;
  right_column_id_ = NULL;
  return temp;
}
void NestedLoopJoinOperator::set_allocated_right_column_id(::opossum::proto::OptionalColumnID* right_column_id) {
  delete right_column_id_;
  right_column_id_ = right_column_id;
  if (right_column_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.NestedLoopJoinOperator.right_column_id)
}

// optional .opossum.proto.ScanType op = 5;
void NestedLoopJoinOperator::clear_op() {
  op_ = 0;
}
 ::opossum::proto::ScanType NestedLoopJoinOperator::op() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.op)
  return static_cast< ::opossum::proto::ScanType >(op_);
}
 void NestedLoopJoinOperator::set_op(::opossum::proto::ScanType value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.NestedLoopJoinOperator.op)
}

// optional .opossum.proto.NestedLoopJoinOperator.JoinMode mode = 6;
void NestedLoopJoinOperator::clear_mode() {
  mode_ = 0;
}
 ::opossum::proto::NestedLoopJoinOperator_JoinMode NestedLoopJoinOperator::mode() const {
  // @@protoc_insertion_point(field_get:opossum.proto.NestedLoopJoinOperator.mode)
  return static_cast< ::opossum::proto::NestedLoopJoinOperator_JoinMode >(mode_);
}
 void NestedLoopJoinOperator::set_mode(::opossum::proto::NestedLoopJoinOperator_JoinMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.NestedLoopJoinOperator.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductOperator::kLeftOperatorFieldNumber;
const int ProductOperator::kRightOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductOperator::ProductOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.ProductOperator)
}

void ProductOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  left_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
  right_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

ProductOperator::ProductOperator(const ProductOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.ProductOperator)
}

void ProductOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  left_operator_ = NULL;
  right_operator_ = NULL;
}

ProductOperator::~ProductOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.ProductOperator)
  SharedDtor();
}

void ProductOperator::SharedDtor() {
  if (this != default_instance_) {
    delete left_operator_;
    delete right_operator_;
  }
}

void ProductOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductOperator_descriptor_;
}

const ProductOperator& ProductOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

ProductOperator* ProductOperator::default_instance_ = NULL;

ProductOperator* ProductOperator::New(::google::protobuf::Arena* arena) const {
  ProductOperator* n = new ProductOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.ProductOperator)
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}

bool ProductOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.ProductOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant left_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right_operator;
        break;
      }

      // optional .opossum.proto.OperatorVariant right_operator = 2;
      case 2: {
        if (tag == 18) {
         parse_right_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.ProductOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.ProductOperator)
  return false;
#undef DO_
}

void ProductOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.ProductOperator)
  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_operator_, output);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_operator_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.ProductOperator)
}

::google::protobuf::uint8* ProductOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.ProductOperator)
  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_operator_, false, target);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_operator_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.ProductOperator)
  return target;
}

int ProductOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.ProductOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_operator_);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_operator_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.ProductOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProductOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.ProductOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.ProductOperator)
    MergeFrom(*source);
  }
}

void ProductOperator::MergeFrom(const ProductOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.ProductOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_left_operator()) {
    mutable_left_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.left_operator());
  }
  if (from.has_right_operator()) {
    mutable_right_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.right_operator());
  }
}

void ProductOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.ProductOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductOperator::CopyFrom(const ProductOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.ProductOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductOperator::IsInitialized() const {

  return true;
}

void ProductOperator::Swap(ProductOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductOperator::InternalSwap(ProductOperator* other) {
  std::swap(left_operator_, other->left_operator_);
  std::swap(right_operator_, other->right_operator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductOperator_descriptor_;
  metadata.reflection = ProductOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductOperator

// optional .opossum.proto.OperatorVariant left_operator = 1;
bool ProductOperator::has_left_operator() const {
  return !_is_default_instance_ && left_operator_ != NULL;
}
void ProductOperator::clear_left_operator() {
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& ProductOperator::left_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProductOperator.left_operator)
  return left_operator_ != NULL ? *left_operator_ : *default_instance_->left_operator_;
}
::opossum::proto::OperatorVariant* ProductOperator::mutable_left_operator() {
  
  if (left_operator_ == NULL) {
    left_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ProductOperator.left_operator)
  return left_operator_;
}
::opossum::proto::OperatorVariant* ProductOperator::release_left_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ProductOperator.left_operator)
  
  ::opossum::proto::OperatorVariant* temp = left_operator_;
  left_operator_ = NULL;
  return temp;
}
void ProductOperator::set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator) {
  delete left_operator_;
  left_operator_ = left_operator;
  if (left_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ProductOperator.left_operator)
}

// optional .opossum.proto.OperatorVariant right_operator = 2;
bool ProductOperator::has_right_operator() const {
  return !_is_default_instance_ && right_operator_ != NULL;
}
void ProductOperator::clear_right_operator() {
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& ProductOperator::right_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ProductOperator.right_operator)
  return right_operator_ != NULL ? *right_operator_ : *default_instance_->right_operator_;
}
::opossum::proto::OperatorVariant* ProductOperator::mutable_right_operator() {
  
  if (right_operator_ == NULL) {
    right_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ProductOperator.right_operator)
  return right_operator_;
}
::opossum::proto::OperatorVariant* ProductOperator::release_right_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ProductOperator.right_operator)
  
  ::opossum::proto::OperatorVariant* temp = right_operator_;
  right_operator_ = NULL;
  return temp;
}
void ProductOperator::set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator) {
  delete right_operator_;
  right_operator_ = right_operator;
  if (right_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ProductOperator.right_operator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SortOperator_OrderByMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortOperator_OrderByMode_descriptor_;
}
bool SortOperator_OrderByMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SortOperator_OrderByMode SortOperator::Ascending;
const SortOperator_OrderByMode SortOperator::Descending;
const SortOperator_OrderByMode SortOperator::OrderByMode_MIN;
const SortOperator_OrderByMode SortOperator::OrderByMode_MAX;
const int SortOperator::OrderByMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SortOperator::kInputOperatorFieldNumber;
const int SortOperator::kColumnIdFieldNumber;
const int SortOperator::kOrderByModeFieldNumber;
const int SortOperator::kOutputChunkSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SortOperator::SortOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.SortOperator)
}

void SortOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

SortOperator::SortOperator(const SortOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.SortOperator)
}

void SortOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_operator_ = NULL;
  column_id_ = 0;
  order_by_mode_ = 0;
  output_chunk_size_ = 0;
}

SortOperator::~SortOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.SortOperator)
  SharedDtor();
}

void SortOperator::SharedDtor() {
  if (this != default_instance_) {
    delete input_operator_;
  }
}

void SortOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortOperator_descriptor_;
}

const SortOperator& SortOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

SortOperator* SortOperator::default_instance_ = NULL;

SortOperator* SortOperator::New(::google::protobuf::Arena* arena) const {
  SortOperator* n = new SortOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SortOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.SortOperator)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SortOperator, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SortOperator*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(column_id_, output_chunk_size_);
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SortOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.SortOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column_id;
        break;
      }

      // optional int32 column_id = 2;
      case 2: {
        if (tag == 16) {
         parse_column_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_by_mode;
        break;
      }

      // optional .opossum.proto.SortOperator.OrderByMode order_by_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_order_by_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_by_mode(static_cast< ::opossum::proto::SortOperator_OrderByMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_output_chunk_size;
        break;
      }

      // optional int32 output_chunk_size = 4;
      case 4: {
        if (tag == 32) {
         parse_output_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_chunk_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.SortOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.SortOperator)
  return false;
#undef DO_
}

void SortOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.SortOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->column_id(), output);
  }

  // optional .opossum.proto.SortOperator.OrderByMode order_by_mode = 3;
  if (this->order_by_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->order_by_mode(), output);
  }

  // optional int32 output_chunk_size = 4;
  if (this->output_chunk_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->output_chunk_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.SortOperator)
}

::google::protobuf::uint8* SortOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.SortOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->column_id(), target);
  }

  // optional .opossum.proto.SortOperator.OrderByMode order_by_mode = 3;
  if (this->order_by_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->order_by_mode(), target);
  }

  // optional int32 output_chunk_size = 4;
  if (this->output_chunk_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->output_chunk_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.SortOperator)
  return target;
}

int SortOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.SortOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  // optional int32 column_id = 2;
  if (this->column_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->column_id());
  }

  // optional .opossum.proto.SortOperator.OrderByMode order_by_mode = 3;
  if (this->order_by_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_by_mode());
  }

  // optional int32 output_chunk_size = 4;
  if (this->output_chunk_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_chunk_size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.SortOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SortOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SortOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.SortOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.SortOperator)
    MergeFrom(*source);
  }
}

void SortOperator::MergeFrom(const SortOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.SortOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
  if (from.column_id() != 0) {
    set_column_id(from.column_id());
  }
  if (from.order_by_mode() != 0) {
    set_order_by_mode(from.order_by_mode());
  }
  if (from.output_chunk_size() != 0) {
    set_output_chunk_size(from.output_chunk_size());
  }
}

void SortOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.SortOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortOperator::CopyFrom(const SortOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.SortOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortOperator::IsInitialized() const {

  return true;
}

void SortOperator::Swap(SortOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SortOperator::InternalSwap(SortOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  std::swap(column_id_, other->column_id_);
  std::swap(order_by_mode_, other->order_by_mode_);
  std::swap(output_chunk_size_, other->output_chunk_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SortOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortOperator_descriptor_;
  metadata.reflection = SortOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SortOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool SortOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void SortOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& SortOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* SortOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.SortOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* SortOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.SortOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void SortOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.SortOperator.input_operator)
}

// optional int32 column_id = 2;
void SortOperator::clear_column_id() {
  column_id_ = 0;
}
 ::google::protobuf::int32 SortOperator::column_id() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.column_id)
  return column_id_;
}
 void SortOperator::set_column_id(::google::protobuf::int32 value) {
  
  column_id_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.SortOperator.column_id)
}

// optional .opossum.proto.SortOperator.OrderByMode order_by_mode = 3;
void SortOperator::clear_order_by_mode() {
  order_by_mode_ = 0;
}
 ::opossum::proto::SortOperator_OrderByMode SortOperator::order_by_mode() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.order_by_mode)
  return static_cast< ::opossum::proto::SortOperator_OrderByMode >(order_by_mode_);
}
 void SortOperator::set_order_by_mode(::opossum::proto::SortOperator_OrderByMode value) {
  
  order_by_mode_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.SortOperator.order_by_mode)
}

// optional int32 output_chunk_size = 4;
void SortOperator::clear_output_chunk_size() {
  output_chunk_size_ = 0;
}
 ::google::protobuf::int32 SortOperator::output_chunk_size() const {
  // @@protoc_insertion_point(field_get:opossum.proto.SortOperator.output_chunk_size)
  return output_chunk_size_;
}
 void SortOperator::set_output_chunk_size(::google::protobuf::int32 value) {
  
  output_chunk_size_ = value;
  // @@protoc_insertion_point(field_set:opossum.proto.SortOperator.output_chunk_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnionAllOperator::kInputOperator1FieldNumber;
const int UnionAllOperator::kInputOperator2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnionAllOperator::UnionAllOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.UnionAllOperator)
}

void UnionAllOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator1_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
  input_operator2_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

UnionAllOperator::UnionAllOperator(const UnionAllOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.UnionAllOperator)
}

void UnionAllOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_operator1_ = NULL;
  input_operator2_ = NULL;
}

UnionAllOperator::~UnionAllOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.UnionAllOperator)
  SharedDtor();
}

void UnionAllOperator::SharedDtor() {
  if (this != default_instance_) {
    delete input_operator1_;
    delete input_operator2_;
  }
}

void UnionAllOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnionAllOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnionAllOperator_descriptor_;
}

const UnionAllOperator& UnionAllOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

UnionAllOperator* UnionAllOperator::default_instance_ = NULL;

UnionAllOperator* UnionAllOperator::New(::google::protobuf::Arena* arena) const {
  UnionAllOperator* n = new UnionAllOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnionAllOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.UnionAllOperator)
  if (GetArenaNoVirtual() == NULL && input_operator1_ != NULL) delete input_operator1_;
  input_operator1_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_operator2_ != NULL) delete input_operator2_;
  input_operator2_ = NULL;
}

bool UnionAllOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.UnionAllOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input_operator2;
        break;
      }

      // optional .opossum.proto.OperatorVariant input_operator2 = 2;
      case 2: {
        if (tag == 18) {
         parse_input_operator2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.UnionAllOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.UnionAllOperator)
  return false;
#undef DO_
}

void UnionAllOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.UnionAllOperator)
  // optional .opossum.proto.OperatorVariant input_operator1 = 1;
  if (this->has_input_operator1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator1_, output);
  }

  // optional .opossum.proto.OperatorVariant input_operator2 = 2;
  if (this->has_input_operator2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->input_operator2_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.UnionAllOperator)
}

::google::protobuf::uint8* UnionAllOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.UnionAllOperator)
  // optional .opossum.proto.OperatorVariant input_operator1 = 1;
  if (this->has_input_operator1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator1_, false, target);
  }

  // optional .opossum.proto.OperatorVariant input_operator2 = 2;
  if (this->has_input_operator2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->input_operator2_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.UnionAllOperator)
  return target;
}

int UnionAllOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.UnionAllOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator1 = 1;
  if (this->has_input_operator1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator1_);
  }

  // optional .opossum.proto.OperatorVariant input_operator2 = 2;
  if (this->has_input_operator2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator2_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnionAllOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.UnionAllOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnionAllOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnionAllOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.UnionAllOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.UnionAllOperator)
    MergeFrom(*source);
  }
}

void UnionAllOperator::MergeFrom(const UnionAllOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.UnionAllOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator1()) {
    mutable_input_operator1()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator1());
  }
  if (from.has_input_operator2()) {
    mutable_input_operator2()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator2());
  }
}

void UnionAllOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.UnionAllOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnionAllOperator::CopyFrom(const UnionAllOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.UnionAllOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnionAllOperator::IsInitialized() const {

  return true;
}

void UnionAllOperator::Swap(UnionAllOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnionAllOperator::InternalSwap(UnionAllOperator* other) {
  std::swap(input_operator1_, other->input_operator1_);
  std::swap(input_operator2_, other->input_operator2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnionAllOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnionAllOperator_descriptor_;
  metadata.reflection = UnionAllOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnionAllOperator

// optional .opossum.proto.OperatorVariant input_operator1 = 1;
bool UnionAllOperator::has_input_operator1() const {
  return !_is_default_instance_ && input_operator1_ != NULL;
}
void UnionAllOperator::clear_input_operator1() {
  if (GetArenaNoVirtual() == NULL && input_operator1_ != NULL) delete input_operator1_;
  input_operator1_ = NULL;
}
const ::opossum::proto::OperatorVariant& UnionAllOperator::input_operator1() const {
  // @@protoc_insertion_point(field_get:opossum.proto.UnionAllOperator.input_operator1)
  return input_operator1_ != NULL ? *input_operator1_ : *default_instance_->input_operator1_;
}
::opossum::proto::OperatorVariant* UnionAllOperator::mutable_input_operator1() {
  
  if (input_operator1_ == NULL) {
    input_operator1_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.UnionAllOperator.input_operator1)
  return input_operator1_;
}
::opossum::proto::OperatorVariant* UnionAllOperator::release_input_operator1() {
  // @@protoc_insertion_point(field_release:opossum.proto.UnionAllOperator.input_operator1)
  
  ::opossum::proto::OperatorVariant* temp = input_operator1_;
  input_operator1_ = NULL;
  return temp;
}
void UnionAllOperator::set_allocated_input_operator1(::opossum::proto::OperatorVariant* input_operator1) {
  delete input_operator1_;
  input_operator1_ = input_operator1;
  if (input_operator1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.UnionAllOperator.input_operator1)
}

// optional .opossum.proto.OperatorVariant input_operator2 = 2;
bool UnionAllOperator::has_input_operator2() const {
  return !_is_default_instance_ && input_operator2_ != NULL;
}
void UnionAllOperator::clear_input_operator2() {
  if (GetArenaNoVirtual() == NULL && input_operator2_ != NULL) delete input_operator2_;
  input_operator2_ = NULL;
}
const ::opossum::proto::OperatorVariant& UnionAllOperator::input_operator2() const {
  // @@protoc_insertion_point(field_get:opossum.proto.UnionAllOperator.input_operator2)
  return input_operator2_ != NULL ? *input_operator2_ : *default_instance_->input_operator2_;
}
::opossum::proto::OperatorVariant* UnionAllOperator::mutable_input_operator2() {
  
  if (input_operator2_ == NULL) {
    input_operator2_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.UnionAllOperator.input_operator2)
  return input_operator2_;
}
::opossum::proto::OperatorVariant* UnionAllOperator::release_input_operator2() {
  // @@protoc_insertion_point(field_release:opossum.proto.UnionAllOperator.input_operator2)
  
  ::opossum::proto::OperatorVariant* temp = input_operator2_;
  input_operator2_ = NULL;
  return temp;
}
void UnionAllOperator::set_allocated_input_operator2(::opossum::proto::OperatorVariant* input_operator2) {
  delete input_operator2_;
  input_operator2_ = input_operator2;
  if (input_operator2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.UnionAllOperator.input_operator2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportCsvOperator::kInputOperatorFieldNumber;
const int ImportCsvOperator::kDirectoryFieldNumber;
const int ImportCsvOperator::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportCsvOperator::ImportCsvOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.ImportCsvOperator)
}

void ImportCsvOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

ImportCsvOperator::ImportCsvOperator(const ImportCsvOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.ImportCsvOperator)
}

void ImportCsvOperator::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_operator_ = NULL;
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImportCsvOperator::~ImportCsvOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.ImportCsvOperator)
  SharedDtor();
}

void ImportCsvOperator::SharedDtor() {
  directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete input_operator_;
  }
}

void ImportCsvOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportCsvOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportCsvOperator_descriptor_;
}

const ImportCsvOperator& ImportCsvOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

ImportCsvOperator* ImportCsvOperator::default_instance_ = NULL;

ImportCsvOperator* ImportCsvOperator::New(::google::protobuf::Arena* arena) const {
  ImportCsvOperator* n = new ImportCsvOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportCsvOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.ImportCsvOperator)
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImportCsvOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.ImportCsvOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_directory;
        break;
      }

      // optional string directory = 2;
      case 2: {
        if (tag == 18) {
         parse_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.ImportCsvOperator.directory"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (tag == 26) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.ImportCsvOperator.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.ImportCsvOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.ImportCsvOperator)
  return false;
#undef DO_
}

void ImportCsvOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.ImportCsvOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // optional string directory = 2;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ImportCsvOperator.directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->directory(), output);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ImportCsvOperator.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.ImportCsvOperator)
}

::google::protobuf::uint8* ImportCsvOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.ImportCsvOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // optional string directory = 2;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ImportCsvOperator.directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directory(), target);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ImportCsvOperator.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.ImportCsvOperator)
  return target;
}

int ImportCsvOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.ImportCsvOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  // optional string directory = 2;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directory());
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportCsvOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.ImportCsvOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImportCsvOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportCsvOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.ImportCsvOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.ImportCsvOperator)
    MergeFrom(*source);
  }
}

void ImportCsvOperator::MergeFrom(const ImportCsvOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.ImportCsvOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void ImportCsvOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.ImportCsvOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportCsvOperator::CopyFrom(const ImportCsvOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.ImportCsvOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportCsvOperator::IsInitialized() const {

  return true;
}

void ImportCsvOperator::Swap(ImportCsvOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportCsvOperator::InternalSwap(ImportCsvOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  directory_.Swap(&other->directory_);
  filename_.Swap(&other->filename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportCsvOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportCsvOperator_descriptor_;
  metadata.reflection = ImportCsvOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportCsvOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool ImportCsvOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void ImportCsvOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& ImportCsvOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ImportCsvOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* ImportCsvOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ImportCsvOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* ImportCsvOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ImportCsvOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void ImportCsvOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ImportCsvOperator.input_operator)
}

// optional string directory = 2;
void ImportCsvOperator::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImportCsvOperator::directory() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ImportCsvOperator.directory)
  return directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCsvOperator::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ImportCsvOperator.directory)
}
 void ImportCsvOperator::set_directory(const char* value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ImportCsvOperator.directory)
}
 void ImportCsvOperator::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ImportCsvOperator.directory)
}
 ::std::string* ImportCsvOperator::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ImportCsvOperator.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportCsvOperator::release_directory() {
  // @@protoc_insertion_point(field_release:opossum.proto.ImportCsvOperator.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCsvOperator::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ImportCsvOperator.directory)
}

// optional string filename = 3;
void ImportCsvOperator::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImportCsvOperator::filename() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ImportCsvOperator.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCsvOperator::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ImportCsvOperator.filename)
}
 void ImportCsvOperator::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ImportCsvOperator.filename)
}
 void ImportCsvOperator::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ImportCsvOperator.filename)
}
 ::std::string* ImportCsvOperator::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ImportCsvOperator.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportCsvOperator::release_filename() {
  // @@protoc_insertion_point(field_release:opossum.proto.ImportCsvOperator.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCsvOperator::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ImportCsvOperator.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportCsvOperator::kInputOperatorFieldNumber;
const int ExportCsvOperator::kDirectoryFieldNumber;
const int ExportCsvOperator::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportCsvOperator::ExportCsvOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.ExportCsvOperator)
}

void ExportCsvOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

ExportCsvOperator::ExportCsvOperator(const ExportCsvOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.ExportCsvOperator)
}

void ExportCsvOperator::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_operator_ = NULL;
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExportCsvOperator::~ExportCsvOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.ExportCsvOperator)
  SharedDtor();
}

void ExportCsvOperator::SharedDtor() {
  directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete input_operator_;
  }
}

void ExportCsvOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportCsvOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportCsvOperator_descriptor_;
}

const ExportCsvOperator& ExportCsvOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

ExportCsvOperator* ExportCsvOperator::default_instance_ = NULL;

ExportCsvOperator* ExportCsvOperator::New(::google::protobuf::Arena* arena) const {
  ExportCsvOperator* n = new ExportCsvOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportCsvOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.ExportCsvOperator)
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExportCsvOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.ExportCsvOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_directory;
        break;
      }

      // optional string directory = 2;
      case 2: {
        if (tag == 18) {
         parse_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.ExportCsvOperator.directory"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (tag == 26) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.ExportCsvOperator.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.ExportCsvOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.ExportCsvOperator)
  return false;
#undef DO_
}

void ExportCsvOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.ExportCsvOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // optional string directory = 2;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ExportCsvOperator.directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->directory(), output);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ExportCsvOperator.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.ExportCsvOperator)
}

::google::protobuf::uint8* ExportCsvOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.ExportCsvOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // optional string directory = 2;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ExportCsvOperator.directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directory(), target);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ExportCsvOperator.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.ExportCsvOperator)
  return target;
}

int ExportCsvOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.ExportCsvOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  // optional string directory = 2;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directory());
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportCsvOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.ExportCsvOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExportCsvOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportCsvOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.ExportCsvOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.ExportCsvOperator)
    MergeFrom(*source);
  }
}

void ExportCsvOperator::MergeFrom(const ExportCsvOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.ExportCsvOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void ExportCsvOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.ExportCsvOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportCsvOperator::CopyFrom(const ExportCsvOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.ExportCsvOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportCsvOperator::IsInitialized() const {

  return true;
}

void ExportCsvOperator::Swap(ExportCsvOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportCsvOperator::InternalSwap(ExportCsvOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  directory_.Swap(&other->directory_);
  filename_.Swap(&other->filename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportCsvOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportCsvOperator_descriptor_;
  metadata.reflection = ExportCsvOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportCsvOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool ExportCsvOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void ExportCsvOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& ExportCsvOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportCsvOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* ExportCsvOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportCsvOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* ExportCsvOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportCsvOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void ExportCsvOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportCsvOperator.input_operator)
}

// optional string directory = 2;
void ExportCsvOperator::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExportCsvOperator::directory() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportCsvOperator.directory)
  return directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportCsvOperator::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ExportCsvOperator.directory)
}
 void ExportCsvOperator::set_directory(const char* value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ExportCsvOperator.directory)
}
 void ExportCsvOperator::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ExportCsvOperator.directory)
}
 ::std::string* ExportCsvOperator::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportCsvOperator.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportCsvOperator::release_directory() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportCsvOperator.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportCsvOperator::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportCsvOperator.directory)
}

// optional string filename = 3;
void ExportCsvOperator::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExportCsvOperator::filename() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportCsvOperator.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportCsvOperator::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ExportCsvOperator.filename)
}
 void ExportCsvOperator::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ExportCsvOperator.filename)
}
 void ExportCsvOperator::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ExportCsvOperator.filename)
}
 ::std::string* ExportCsvOperator::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportCsvOperator.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportCsvOperator::release_filename() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportCsvOperator.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportCsvOperator::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportCsvOperator.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportBinaryOperator::kInputOperatorFieldNumber;
const int ExportBinaryOperator::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportBinaryOperator::ExportBinaryOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.ExportBinaryOperator)
}

void ExportBinaryOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

ExportBinaryOperator::ExportBinaryOperator(const ExportBinaryOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.ExportBinaryOperator)
}

void ExportBinaryOperator::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_operator_ = NULL;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExportBinaryOperator::~ExportBinaryOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.ExportBinaryOperator)
  SharedDtor();
}

void ExportBinaryOperator::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete input_operator_;
  }
}

void ExportBinaryOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportBinaryOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportBinaryOperator_descriptor_;
}

const ExportBinaryOperator& ExportBinaryOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

ExportBinaryOperator* ExportBinaryOperator::default_instance_ = NULL;

ExportBinaryOperator* ExportBinaryOperator::New(::google::protobuf::Arena* arena) const {
  ExportBinaryOperator* n = new ExportBinaryOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportBinaryOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.ExportBinaryOperator)
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExportBinaryOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.ExportBinaryOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (tag == 26) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.ExportBinaryOperator.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.ExportBinaryOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.ExportBinaryOperator)
  return false;
#undef DO_
}

void ExportBinaryOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.ExportBinaryOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ExportBinaryOperator.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.ExportBinaryOperator)
}

::google::protobuf::uint8* ExportBinaryOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.ExportBinaryOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.ExportBinaryOperator.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.ExportBinaryOperator)
  return target;
}

int ExportBinaryOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.ExportBinaryOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportBinaryOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.ExportBinaryOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExportBinaryOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportBinaryOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.ExportBinaryOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.ExportBinaryOperator)
    MergeFrom(*source);
  }
}

void ExportBinaryOperator::MergeFrom(const ExportBinaryOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.ExportBinaryOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void ExportBinaryOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.ExportBinaryOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportBinaryOperator::CopyFrom(const ExportBinaryOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.ExportBinaryOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportBinaryOperator::IsInitialized() const {

  return true;
}

void ExportBinaryOperator::Swap(ExportBinaryOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportBinaryOperator::InternalSwap(ExportBinaryOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  filename_.Swap(&other->filename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportBinaryOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportBinaryOperator_descriptor_;
  metadata.reflection = ExportBinaryOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportBinaryOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool ExportBinaryOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void ExportBinaryOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& ExportBinaryOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportBinaryOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* ExportBinaryOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportBinaryOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* ExportBinaryOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportBinaryOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void ExportBinaryOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportBinaryOperator.input_operator)
}

// optional string filename = 3;
void ExportBinaryOperator::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExportBinaryOperator::filename() const {
  // @@protoc_insertion_point(field_get:opossum.proto.ExportBinaryOperator.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportBinaryOperator::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.ExportBinaryOperator.filename)
}
 void ExportBinaryOperator::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.ExportBinaryOperator.filename)
}
 void ExportBinaryOperator::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.ExportBinaryOperator.filename)
}
 ::std::string* ExportBinaryOperator::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:opossum.proto.ExportBinaryOperator.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportBinaryOperator::release_filename() {
  // @@protoc_insertion_point(field_release:opossum.proto.ExportBinaryOperator.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportBinaryOperator::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.ExportBinaryOperator.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrintOperator::kInputOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintOperator::PrintOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.PrintOperator)
}

void PrintOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

PrintOperator::PrintOperator(const PrintOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.PrintOperator)
}

void PrintOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_operator_ = NULL;
}

PrintOperator::~PrintOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.PrintOperator)
  SharedDtor();
}

void PrintOperator::SharedDtor() {
  if (this != default_instance_) {
    delete input_operator_;
  }
}

void PrintOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintOperator_descriptor_;
}

const PrintOperator& PrintOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

PrintOperator* PrintOperator::default_instance_ = NULL;

PrintOperator* PrintOperator::New(::google::protobuf::Arena* arena) const {
  PrintOperator* n = new PrintOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrintOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.PrintOperator)
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}

bool PrintOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.PrintOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant input_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.PrintOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.PrintOperator)
  return false;
#undef DO_
}

void PrintOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.PrintOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_operator_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.PrintOperator)
}

::google::protobuf::uint8* PrintOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.PrintOperator)
  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_operator_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.PrintOperator)
  return target;
}

int PrintOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.PrintOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant input_operator = 1;
  if (this->has_input_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_operator_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.PrintOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PrintOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrintOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.PrintOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.PrintOperator)
    MergeFrom(*source);
  }
}

void PrintOperator::MergeFrom(const PrintOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.PrintOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_input_operator()) {
    mutable_input_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.input_operator());
  }
}

void PrintOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.PrintOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintOperator::CopyFrom(const PrintOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.PrintOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintOperator::IsInitialized() const {

  return true;
}

void PrintOperator::Swap(PrintOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintOperator::InternalSwap(PrintOperator* other) {
  std::swap(input_operator_, other->input_operator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrintOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintOperator_descriptor_;
  metadata.reflection = PrintOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrintOperator

// optional .opossum.proto.OperatorVariant input_operator = 1;
bool PrintOperator::has_input_operator() const {
  return !_is_default_instance_ && input_operator_ != NULL;
}
void PrintOperator::clear_input_operator() {
  if (GetArenaNoVirtual() == NULL && input_operator_ != NULL) delete input_operator_;
  input_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& PrintOperator::input_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.PrintOperator.input_operator)
  return input_operator_ != NULL ? *input_operator_ : *default_instance_->input_operator_;
}
::opossum::proto::OperatorVariant* PrintOperator::mutable_input_operator() {
  
  if (input_operator_ == NULL) {
    input_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.PrintOperator.input_operator)
  return input_operator_;
}
::opossum::proto::OperatorVariant* PrintOperator::release_input_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.PrintOperator.input_operator)
  
  ::opossum::proto::OperatorVariant* temp = input_operator_;
  input_operator_ = NULL;
  return temp;
}
void PrintOperator::set_allocated_input_operator(::opossum::proto::OperatorVariant* input_operator) {
  delete input_operator_;
  input_operator_ = input_operator;
  if (input_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.PrintOperator.input_operator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DifferenceOperator::kLeftOperatorFieldNumber;
const int DifferenceOperator::kRightOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DifferenceOperator::DifferenceOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.DifferenceOperator)
}

void DifferenceOperator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  left_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
  right_operator_ = const_cast< ::opossum::proto::OperatorVariant*>(&::opossum::proto::OperatorVariant::default_instance());
}

DifferenceOperator::DifferenceOperator(const DifferenceOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.DifferenceOperator)
}

void DifferenceOperator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  left_operator_ = NULL;
  right_operator_ = NULL;
}

DifferenceOperator::~DifferenceOperator() {
  // @@protoc_insertion_point(destructor:opossum.proto.DifferenceOperator)
  SharedDtor();
}

void DifferenceOperator::SharedDtor() {
  if (this != default_instance_) {
    delete left_operator_;
    delete right_operator_;
  }
}

void DifferenceOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DifferenceOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DifferenceOperator_descriptor_;
}

const DifferenceOperator& DifferenceOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

DifferenceOperator* DifferenceOperator::default_instance_ = NULL;

DifferenceOperator* DifferenceOperator::New(::google::protobuf::Arena* arena) const {
  DifferenceOperator* n = new DifferenceOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DifferenceOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.DifferenceOperator)
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}

bool DifferenceOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.DifferenceOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.OperatorVariant left_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right_operator;
        break;
      }

      // optional .opossum.proto.OperatorVariant right_operator = 2;
      case 2: {
        if (tag == 18) {
         parse_right_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.DifferenceOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.DifferenceOperator)
  return false;
#undef DO_
}

void DifferenceOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.DifferenceOperator)
  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_operator_, output);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_operator_, output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.DifferenceOperator)
}

::google::protobuf::uint8* DifferenceOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.DifferenceOperator)
  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_operator_, false, target);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_operator_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.DifferenceOperator)
  return target;
}

int DifferenceOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.DifferenceOperator)
  int total_size = 0;

  // optional .opossum.proto.OperatorVariant left_operator = 1;
  if (this->has_left_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_operator_);
  }

  // optional .opossum.proto.OperatorVariant right_operator = 2;
  if (this->has_right_operator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_operator_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DifferenceOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.DifferenceOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DifferenceOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DifferenceOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.DifferenceOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.DifferenceOperator)
    MergeFrom(*source);
  }
}

void DifferenceOperator::MergeFrom(const DifferenceOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.DifferenceOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_left_operator()) {
    mutable_left_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.left_operator());
  }
  if (from.has_right_operator()) {
    mutable_right_operator()->::opossum::proto::OperatorVariant::MergeFrom(from.right_operator());
  }
}

void DifferenceOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.DifferenceOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DifferenceOperator::CopyFrom(const DifferenceOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.DifferenceOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DifferenceOperator::IsInitialized() const {

  return true;
}

void DifferenceOperator::Swap(DifferenceOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DifferenceOperator::InternalSwap(DifferenceOperator* other) {
  std::swap(left_operator_, other->left_operator_);
  std::swap(right_operator_, other->right_operator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DifferenceOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DifferenceOperator_descriptor_;
  metadata.reflection = DifferenceOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DifferenceOperator

// optional .opossum.proto.OperatorVariant left_operator = 1;
bool DifferenceOperator::has_left_operator() const {
  return !_is_default_instance_ && left_operator_ != NULL;
}
void DifferenceOperator::clear_left_operator() {
  if (GetArenaNoVirtual() == NULL && left_operator_ != NULL) delete left_operator_;
  left_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& DifferenceOperator::left_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.DifferenceOperator.left_operator)
  return left_operator_ != NULL ? *left_operator_ : *default_instance_->left_operator_;
}
::opossum::proto::OperatorVariant* DifferenceOperator::mutable_left_operator() {
  
  if (left_operator_ == NULL) {
    left_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.DifferenceOperator.left_operator)
  return left_operator_;
}
::opossum::proto::OperatorVariant* DifferenceOperator::release_left_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.DifferenceOperator.left_operator)
  
  ::opossum::proto::OperatorVariant* temp = left_operator_;
  left_operator_ = NULL;
  return temp;
}
void DifferenceOperator::set_allocated_left_operator(::opossum::proto::OperatorVariant* left_operator) {
  delete left_operator_;
  left_operator_ = left_operator;
  if (left_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.DifferenceOperator.left_operator)
}

// optional .opossum.proto.OperatorVariant right_operator = 2;
bool DifferenceOperator::has_right_operator() const {
  return !_is_default_instance_ && right_operator_ != NULL;
}
void DifferenceOperator::clear_right_operator() {
  if (GetArenaNoVirtual() == NULL && right_operator_ != NULL) delete right_operator_;
  right_operator_ = NULL;
}
const ::opossum::proto::OperatorVariant& DifferenceOperator::right_operator() const {
  // @@protoc_insertion_point(field_get:opossum.proto.DifferenceOperator.right_operator)
  return right_operator_ != NULL ? *right_operator_ : *default_instance_->right_operator_;
}
::opossum::proto::OperatorVariant* DifferenceOperator::mutable_right_operator() {
  
  if (right_operator_ == NULL) {
    right_operator_ = new ::opossum::proto::OperatorVariant;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.DifferenceOperator.right_operator)
  return right_operator_;
}
::opossum::proto::OperatorVariant* DifferenceOperator::release_right_operator() {
  // @@protoc_insertion_point(field_release:opossum.proto.DifferenceOperator.right_operator)
  
  ::opossum::proto::OperatorVariant* temp = right_operator_;
  right_operator_ = NULL;
  return temp;
}
void DifferenceOperator::set_allocated_right_operator(::opossum::proto::OperatorVariant* right_operator) {
  delete right_operator_;
  right_operator_ = right_operator;
  if (right_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.DifferenceOperator.right_operator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kResponseTableFieldNumber;
const int Response::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Response_default_oneof_instance_->response_table_ = const_cast< ::opossum::proto::Table*>(&::opossum::proto::Table::default_instance());
  Response_default_oneof_instance_->error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_result();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:opossum.proto.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_result()) {
    clear_result();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:opossum.proto.Response)
  switch(result_case()) {
    case kResponseTable: {
      delete result_.response_table_;
      break;
    }
    case kError: {
      result_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.Response)
  clear_result();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .opossum.proto.Table response_table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.Response.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.Response)
  // optional .opossum.proto.Table response_table = 1;
  if (has_response_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *result_.response_table_, output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.Response)
  // optional .opossum.proto.Table response_table = 1;
  if (has_response_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *result_.response_table_, false, target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.Response)
  int total_size = 0;

  switch (result_case()) {
    // optional .opossum.proto.Table response_table = 1;
    case kResponseTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *result_.response_table_);
      break;
    }
    // optional string error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.result_case()) {
    case kResponseTable: {
      mutable_response_table()->::opossum::proto::Table::MergeFrom(from.response_table());
      break;
    }
    case kError: {
      set_error(from.error());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(result_, other->result_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .opossum.proto.Table response_table = 1;
bool Response::has_response_table() const {
  return result_case() == kResponseTable;
}
void Response::set_has_response_table() {
  _oneof_case_[0] = kResponseTable;
}
void Response::clear_response_table() {
  if (has_response_table()) {
    delete result_.response_table_;
    clear_has_result();
  }
}
 const ::opossum::proto::Table& Response::response_table() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Response.response_table)
  return has_response_table()
      ? *result_.response_table_
      : ::opossum::proto::Table::default_instance();
}
::opossum::proto::Table* Response::mutable_response_table() {
  if (!has_response_table()) {
    clear_result();
    set_has_response_table();
    result_.response_table_ = new ::opossum::proto::Table;
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Response.response_table)
  return result_.response_table_;
}
::opossum::proto::Table* Response::release_response_table() {
  // @@protoc_insertion_point(field_release:opossum.proto.Response.response_table)
  if (has_response_table()) {
    clear_has_result();
    ::opossum::proto::Table* temp = result_.response_table_;
    result_.response_table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_response_table(::opossum::proto::Table* response_table) {
  clear_result();
  if (response_table) {
    set_has_response_table();
    result_.response_table_ = response_table;
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Response.response_table)
}

// optional string error = 2;
bool Response::has_error() const {
  return result_case() == kError;
}
void Response::set_has_error() {
  _oneof_case_[0] = kError;
}
void Response::clear_error() {
  if (has_error()) {
    result_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_result();
  }
}
 const ::std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:opossum.proto.Response.error)
  if (has_error()) {
    return result_.error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Response::set_error(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Response.error)
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opossum.proto.Response.error)
}
 void Response::set_error(const char* value) {
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opossum.proto.Response.error)
}
 void Response::set_error(const char* value, size_t size) {
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Response.error)
}
 ::std::string* Response::mutable_error() {
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:opossum.proto.Response.error)
  return result_.error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_error() {
  // @@protoc_insertion_point(field_release:opossum.proto.Response.error)
  if (has_error()) {
    clear_has_result();
    return result_.error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Response::set_allocated_error(::std::string* error) {
  if (!has_error()) {
    result_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_result();
  if (error != NULL) {
    set_has_error();
    result_.error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        error);
  }
  // @@protoc_insertion_point(field_set_allocated:opossum.proto.Response.error)
}

bool Response::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
void Response::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
Response::ResultCase Response::result_case() const {
  return Response::ResultCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kColumnTypeFieldNumber;
const int Table::kColumnNameFieldNumber;
const int Table::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.Table)
}

void Table::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Table::Table(const Table& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.Table)
}

void Table::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:opossum.proto.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.Table)
  column_type_.Clear();
  column_name_.Clear();
  row_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string column_type = 1;
      case 1: {
        if (tag == 10) {
         parse_column_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_column_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_type(this->column_type_size() - 1).data(),
            this->column_type(this->column_type_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.Table.column_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_column_type;
        if (input->ExpectTag(18)) goto parse_column_name;
        break;
      }

      // repeated string column_name = 2;
      case 2: {
        if (tag == 18) {
         parse_column_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_column_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_name(this->column_name_size() - 1).data(),
            this->column_name(this->column_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opossum.proto.Table.column_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column_name;
        if (input->ExpectTag(26)) goto parse_row;
        break;
      }

      // repeated .opossum.proto.Row row = 3;
      case 3: {
        if (tag == 26) {
         parse_row:
          DO_(input->IncrementRecursionDepth());
         parse_loop_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_row;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.Table)
  // repeated string column_type = 1;
  for (int i = 0; i < this->column_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_type(i).data(), this->column_type(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Table.column_type");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->column_type(i), output);
  }

  // repeated string column_name = 2;
  for (int i = 0; i < this->column_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name(i).data(), this->column_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Table.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->column_name(i), output);
  }

  // repeated .opossum.proto.Row row = 3;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->row(i), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.Table)
  // repeated string column_type = 1;
  for (int i = 0; i < this->column_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_type(i).data(), this->column_type(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Table.column_type");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->column_type(i), target);
  }

  // repeated string column_name = 2;
  for (int i = 0; i < this->column_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name(i).data(), this->column_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opossum.proto.Table.column_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->column_name(i), target);
  }

  // repeated .opossum.proto.Row row = 3;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->row(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.Table)
  return target;
}

int Table::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.Table)
  int total_size = 0;

  // repeated string column_type = 1;
  total_size += 1 * this->column_type_size();
  for (int i = 0; i < this->column_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->column_type(i));
  }

  // repeated string column_name = 2;
  total_size += 1 * this->column_name_size();
  for (int i = 0; i < this->column_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->column_name(i));
  }

  // repeated .opossum.proto.Row row = 3;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  column_type_.MergeFrom(from.column_type_);
  column_name_.MergeFrom(from.column_name_);
  row_.MergeFrom(from.row_);
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {

  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  column_type_.UnsafeArenaSwap(&other->column_type_);
  column_name_.UnsafeArenaSwap(&other->column_name_);
  row_.UnsafeArenaSwap(&other->row_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// repeated string column_type = 1;
int Table::column_type_size() const {
  return column_type_.size();
}
void Table::clear_column_type() {
  column_type_.Clear();
}
 const ::std::string& Table::column_type(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Table.column_type)
  return column_type_.Get(index);
}
 ::std::string* Table::mutable_column_type(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Table.column_type)
  return column_type_.Mutable(index);
}
 void Table::set_column_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Table.column_type)
  column_type_.Mutable(index)->assign(value);
}
 void Table::set_column_type(int index, const char* value) {
  column_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opossum.proto.Table.column_type)
}
 void Table::set_column_type(int index, const char* value, size_t size) {
  column_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Table.column_type)
}
 ::std::string* Table::add_column_type() {
  // @@protoc_insertion_point(field_add_mutable:opossum.proto.Table.column_type)
  return column_type_.Add();
}
 void Table::add_column_type(const ::std::string& value) {
  column_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opossum.proto.Table.column_type)
}
 void Table::add_column_type(const char* value) {
  column_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opossum.proto.Table.column_type)
}
 void Table::add_column_type(const char* value, size_t size) {
  column_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opossum.proto.Table.column_type)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Table::column_type() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Table.column_type)
  return column_type_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Table::mutable_column_type() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Table.column_type)
  return &column_type_;
}

// repeated string column_name = 2;
int Table::column_name_size() const {
  return column_name_.size();
}
void Table::clear_column_name() {
  column_name_.Clear();
}
 const ::std::string& Table::column_name(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Table.column_name)
  return column_name_.Get(index);
}
 ::std::string* Table::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Table.column_name)
  return column_name_.Mutable(index);
}
 void Table::set_column_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opossum.proto.Table.column_name)
  column_name_.Mutable(index)->assign(value);
}
 void Table::set_column_name(int index, const char* value) {
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opossum.proto.Table.column_name)
}
 void Table::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opossum.proto.Table.column_name)
}
 ::std::string* Table::add_column_name() {
  // @@protoc_insertion_point(field_add_mutable:opossum.proto.Table.column_name)
  return column_name_.Add();
}
 void Table::add_column_name(const ::std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opossum.proto.Table.column_name)
}
 void Table::add_column_name(const char* value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opossum.proto.Table.column_name)
}
 void Table::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opossum.proto.Table.column_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Table::column_name() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Table.column_name)
  return column_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Table::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Table.column_name)
  return &column_name_;
}

// repeated .opossum.proto.Row row = 3;
int Table::row_size() const {
  return row_.size();
}
void Table::clear_row() {
  row_.Clear();
}
const ::opossum::proto::Row& Table::row(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Table.row)
  return row_.Get(index);
}
::opossum::proto::Row* Table::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Table.row)
  return row_.Mutable(index);
}
::opossum::proto::Row* Table::add_row() {
  // @@protoc_insertion_point(field_add:opossum.proto.Table.row)
  return row_.Add();
}
::google::protobuf::RepeatedPtrField< ::opossum::proto::Row >*
Table::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Table.row)
  return &row_;
}
const ::google::protobuf::RepeatedPtrField< ::opossum::proto::Row >&
Table::row() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Table.row)
  return row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opossum.proto.Row)
}

void Row::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Row::Row(const Row& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opossum.proto.Row)
}

void Row::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:opossum.proto.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Row_descriptor_;
}

const Row& Row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opossum_2eproto();
  return *default_instance_;
}

Row* Row::default_instance_ = NULL;

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:opossum.proto.Row)
  value_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opossum.proto.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opossum.proto.Variant value = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_value;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opossum.proto.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opossum.proto.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opossum.proto.Row)
  // repeated .opossum.proto.Variant value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:opossum.proto.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opossum.proto.Row)
  // repeated .opossum.proto.Variant value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->value(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opossum.proto.Row)
  return target;
}

int Row::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opossum.proto.Row)
  int total_size = 0;

  // repeated .opossum.proto.Variant value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opossum.proto.Row)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Row* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opossum.proto.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opossum.proto.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opossum.proto.Row)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opossum.proto.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opossum.proto.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {

  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Row_descriptor_;
  metadata.reflection = Row_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// repeated .opossum.proto.Variant value = 1;
int Row::value_size() const {
  return value_.size();
}
void Row::clear_value() {
  value_.Clear();
}
const ::opossum::proto::Variant& Row::value(int index) const {
  // @@protoc_insertion_point(field_get:opossum.proto.Row.value)
  return value_.Get(index);
}
::opossum::proto::Variant* Row::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:opossum.proto.Row.value)
  return value_.Mutable(index);
}
::opossum::proto::Variant* Row::add_value() {
  // @@protoc_insertion_point(field_add:opossum.proto.Row.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::opossum::proto::Variant >*
Row::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:opossum.proto.Row.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::opossum::proto::Variant >&
Row::value() const {
  // @@protoc_insertion_point(field_list:opossum.proto.Row.value)
  return value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opossum

// @@protoc_insertion_point(global_scope)
