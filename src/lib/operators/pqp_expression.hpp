#pragma once

#include <optional>

#include "abstract_expression.hpp"
#include "abstract_operator.hpp"
#include "storage/table.hpp"
#include "types.hpp"
#include "utils/create_ptr_aliases.hpp"

namespace opossum {

class LQPExpression;

/**
 * Expression type used in PQPs, using ColumnIDs to refer to Columns.
 * AbstractExpression handles all other possible contained types (literals, operators, ...).
 */
class PQPExpression : public AbstractExpression<PQPExpression> {
 public:
  static PQPExpressionSPtr create_column(const ColumnID column_id,
                                                      const std::optional<std::string>& alias = std::nullopt);

  /**
   * Creates an expression representing a subselect, i.e. containing the PQP associated with the subselect.
   * From this PQP, a table can be created which then contains the value of this expression.
   */
  static PQPExpressionSPtr create_subselect(AbstractOperatorSPtr root_operator,
                                                         const std::optional<std::string>& alias = std::nullopt);

  // Necessary for the AbstractExpression<T>::create_*() methods
  using AbstractExpression<PQPExpression>::AbstractExpression;

  /**
   * Translates a LQPExpression into a PQPExpression, given the node that the LQPExpression is contained in
   */
  PQPExpression(const LQPExpressionSPtr& lqp_expression, const AbstractLQPNodeSPtr& node);

  ColumnID column_id() const;

  // The following members are only valid for subselect expressions:
  // Get the PQP associated with this expression
  AbstractOperatorSPtr subselect_operator();
  // Get the table that was generated by executing the subselect expression
  TableCSPtr subselect_table();
  // Set the result table for this subselect
  void set_subselect_table(TableCSPtr subselect_table);
  // Check if a table has already been generated for this subselect expression
  bool has_subselect_table() const;

  std::string to_string(const std::optional<std::vector<std::string>>& input_column_names = std::nullopt,
                        bool is_root = true) const override;

  bool operator==(const PQPExpression& other) const;

  PQPExpressionSPtr copy_with_placeholder_value(const AllTypeVariant& value);

 protected:
  void _deep_copy_impl(const PQPExpressionSPtr& copy) const override;

 private:
  std::optional<ColumnID> _column_id;
  AbstractOperatorSPtr _subselect_operator;
  TableCSPtr _subselect_table;
};


}  // namespace opossum
