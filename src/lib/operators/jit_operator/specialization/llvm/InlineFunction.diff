14a15,18
> // clang-format off
> 
> #include "../llvm_extensions.hpp"
> 
58a63
> #include "llvm/IR/ValueMap.h"
77c82
< EnableNoAliasConversion("enable-noalias-to-md-conversion", cl::init(true),
---
> EnableNoAliasConversion("opossum-enable-noalias-to-md-conversion", cl::init(true),
82c87
< PreserveAlignmentAssumptions("preserve-alignment-assumptions-during-inlining",
---
> PreserveAlignmentAssumptions("opossum-preserve-alignment-assumptions-during-inlining",
1492c1497
< bool llvm::InlineFunction(CallSite CS, InlineFunctionInfo &IFI,
---
> bool opossum::InlineFunction(CallSite CS, InlineFunctionInfo &IFI,
1494c1499,1500
<                           Function *ForwardVarArgsTo) {
---
>                           Function *ForwardVarArgsTo,
>                           opossum::SpecializationContext& Context) {
1627a1634,1637
>     // key_value is const to ensure that values are copied and not moved during insert
>     for (const ValueToValueMapTy::value_type &key_value : Context.llvm_value_map) {
>       VMap.insert(key_value);
>     }
1667c1677
<     CloneAndPruneFunctionInto(Caller, CalledFunc, VMap,
---
>     opossum::CloneAndPruneFunctionInto(Caller, CalledFunc, VMap,
1669c1679
<                               &InlinedFunctionInfo, TheCall);
---
>                               &InlinedFunctionInfo, TheCall, Context);
2339a2350,2353
> 
> template constexpr bool llvm::DominatorTreeBase<llvm::BasicBlock, false>::IsPostDominator;
> 
> // clang-format on
